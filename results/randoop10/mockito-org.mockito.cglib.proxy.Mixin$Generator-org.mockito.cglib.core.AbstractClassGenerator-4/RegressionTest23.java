import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        boolean boolean18 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator23.getStrategy();
        generator21.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        java.lang.ClassLoader classLoader46 = null;
        generator44.setClassLoader(classLoader46);
        boolean boolean48 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator44.getNamingPolicy();
        generator32.setNamingPolicy(namingPolicy49);
        generator21.setNamingPolicy(namingPolicy49);
        boolean boolean52 = generator21.getAttemptLoad();
        generator21.setAttemptLoad(true);
        generator21.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator57.getStrategy();
        generator57.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator63.getStrategy();
        generator57.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator57.getStrategy();
        generator57.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator57.getNamingPolicy();
        java.lang.ClassLoader classLoader71 = null;
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray77);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin79.newInstance((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        generator57.setClasses(classArray85);
        generator21.setClasses(classArray85);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy20.generate((org.mockito.cglib.core.ClassGenerator) generator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator16.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy48);
        generator16.setNamingPolicy(namingPolicy48);
        java.lang.ClassLoader classLoader51 = generator16.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        boolean boolean66 = generatorStrategy15.equals((java.lang.Object) mixin65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator67.setClasses(classArray76);
        boolean boolean80 = generator67.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator81.setDelegates((java.lang.Object[]) classArray88);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator81.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy90);
        boolean boolean92 = generator67.getAttemptLoad();
        java.lang.ClassLoader classLoader93 = generator67.getClassLoader();
        boolean boolean94 = generatorStrategy15.equals((java.lang.Object) generator67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator9.getStrategy();
        generator7.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator7.setDelegates(objArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator7.getStrategy();
        generator7.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator35.getStrategy();
        generator35.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        generator35.setStrategy(generatorStrategy43);
        boolean boolean45 = namingPolicy34.equals((java.lang.Object) generator35);
        generator35.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator35.getNamingPolicy();
        boolean boolean49 = namingPolicy28.equals((java.lang.Object) generator35);
        generator35.setUseCache(true);
        boolean boolean52 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator35.getStrategy();
        generator0.setStrategy(generatorStrategy53);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin55 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator10.setClassLoader(classLoader15);
        generator10.setAttemptLoad(true);
        generator10.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator21.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        generator21.setClasses(classArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator21.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        generator36.setStrategy(generatorStrategy40);
        generator21.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        boolean boolean55 = generatorStrategy40.equals((java.lang.Object) mixin54);
        generator10.setStrategy(generatorStrategy40);
        generator0.setStrategy(generatorStrategy40);
        generator0.setUseCache(true);
        boolean boolean60 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = namingPolicy14.equals((java.lang.Object) classArray35);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin42);
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        boolean boolean52 = generatorStrategy45.equals((java.lang.Object) objArray48);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean73 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(false);
        boolean boolean18 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        boolean boolean41 = generator28.getUseCache();
        generator28.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator28.getStrategy();
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        boolean boolean54 = generator52.getUseCache();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator52, true };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator59.setDelegates((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin76.newInstance((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray85);
        generator28.setClasses(classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator0.getNamingPolicy();
        boolean boolean91 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass92 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray57);
        generator37.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        generator60.setDelegates(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin36.newInstance(objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = mixin23.newInstance(objArray69);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray69);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray42);
        generator0.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        java.lang.ClassLoader classLoader50 = null;
        generator48.setClassLoader(classLoader50);
        boolean boolean52 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = namingPolicy53.equals((java.lang.Object) classArray74);
        generator46.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        generator27.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        generator27.setClasses(classArray62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator27.getStrategy();
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        generator27.setDelegates(objArray80);
        generator27.setAttemptLoad(false);
        boolean boolean86 = generator27.getAttemptLoad();
        boolean boolean87 = generator27.getUseCache();
        java.lang.ClassLoader classLoader88 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader88);
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader6 = null;
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        boolean boolean15 = generator13.getUseCache();
        java.lang.Object[] objArray17 = new java.lang.Object[] { generator13, true };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator20.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray27);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray61);
        boolean boolean63 = namingPolicy5.equals((java.lang.Object) mixin62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setAttemptLoad(true);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        generator64.setDelegates(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        boolean boolean77 = namingPolicy5.equals((java.lang.Object) objArray73);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, (java.lang.Object[]) classArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        boolean boolean90 = namingPolicy5.equals((java.lang.Object) mixin89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        generator61.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator61.getNamingPolicy();
        generator57.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator69.setStrategy(generatorStrategy71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator69.setClasses(classArray78);
        boolean boolean82 = generator69.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        generator83.setAttemptLoad(true);
        java.lang.ClassLoader classLoader90 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader90, objArray92);
        generator83.setDelegates(objArray92);
        generator69.setDelegates(objArray92);
        generator57.setDelegates(objArray92);
        generator0.setDelegates(objArray92);
        java.lang.ClassLoader classLoader98 = null;
        generator0.setClassLoader(classLoader98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10]");
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        generator0.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin23.newInstance((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator36.setClasses(classArray45);
        boolean boolean49 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setAttemptLoad(true);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        generator50.setDelegates(objArray59);
        generator36.setDelegates(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray83);
        generator36.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray83);
        generator0.setClasses(classArray83);
        java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin91 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getUseCache();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator8.getStrategy();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        boolean boolean28 = generatorStrategy16.equals((java.lang.Object) classArray27);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator33.getStrategy();
        generator31.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator31.setDelegates(objArray44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator31.getStrategy();
        generator31.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin53 = generator31.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator31.getStrategy();
        boolean boolean55 = generator31.getAttemptLoad();
        boolean boolean56 = namingPolicy30.equals((java.lang.Object) generator31);
        boolean boolean57 = generator31.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = generator11.getUseCache();
        boolean boolean35 = generator11.getAttemptLoad();
        java.lang.Object[] objArray36 = null;
        generator11.setDelegates(objArray36);
        java.lang.ClassLoader classLoader38 = generator11.getClassLoader();
        generator0.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator40.setDelegates(objArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        generator40.setClasses(classArray60);
        boolean boolean63 = generator40.getUseCache();
        generator40.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator40.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator70.getStrategy();
        generator68.setStrategy(generatorStrategy77);
        generator40.setStrategy(generatorStrategy77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy80);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        boolean boolean64 = generator33.getUseCache();
        generator33.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator33.setNamingPolicy(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean28 = generator0.getAttemptLoad();
        boolean boolean29 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator19.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        generator35.setClasses(classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        generator58.setDelegates(objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray67);
        generator19.setDelegates(objArray67);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator19.getNamingPolicy();
        boolean boolean74 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        generator19.setUseCache(false);
        boolean boolean79 = generator19.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray80 = generatorStrategy18.generate((org.mockito.cglib.core.ClassGenerator) generator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator41.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader48 = null;
        generator41.setClassLoader(classLoader48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator41.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator41.setStrategy(generatorStrategy51);
        generator41.setAttemptLoad(true);
        generator41.setAttemptLoad(true);
        boolean boolean57 = generator41.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator41.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        boolean boolean72 = generator59.getUseCache();
        generator59.setAttemptLoad(false);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator83.setDelegates((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray82, (java.lang.Object[]) classArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        generator59.setClasses(classArray93);
        boolean boolean95 = generatorStrategy58.equals((java.lang.Object) classArray93);
        generator0.setClasses(classArray93);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        boolean boolean18 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        generator5.setDelegates(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        generator5.setDelegates((java.lang.Object[]) classArray52);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator64.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray71);
        generator5.setClasses(classArray63);
        boolean boolean75 = namingPolicy4.equals((java.lang.Object) generator5);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator5.getNamingPolicy();
        generator5.setStyle(2);
        boolean boolean79 = generator5.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = generator5.getClassLoader();
        java.lang.Class<?> wildcardClass81 = generator5.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        boolean boolean12 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass13 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getUseCache();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator8.getStrategy();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        boolean boolean28 = generatorStrategy16.equals((java.lang.Object) classArray27);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin31 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(mixin31);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray13, (java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        boolean boolean28 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator32.setStrategy(generatorStrategy45);
        generator32.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator32.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy51);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        generator0.setNamingPolicy(namingPolicy28);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean36 = generator0.getAttemptLoad();
        boolean boolean37 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray51);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator58.getStrategy();
        generator56.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator56.setDelegates(objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray69);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        generator0.setDelegates((java.lang.Object[]) classArray76);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        generator49.setDelegates(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator61.setClassLoader(classLoader63);
        boolean boolean65 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin mixin68 = generator49.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator49.getStrategy();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray76);
        generator49.setClasses(classArray76);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray81);
        generator0.setClasses(classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = generator0.create();
        java.lang.ClassLoader classLoader85 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classLoader85);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin mixin26 = generator7.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        generator35.setClasses(classArray55);
        boolean boolean58 = namingPolicy34.equals((java.lang.Object) classArray55);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setDelegates((java.lang.Object[]) classArray59);
        boolean boolean61 = generator0.getUseCache();
        boolean boolean62 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        boolean boolean18 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy51);
        generator19.setNamingPolicy(namingPolicy51);
        java.lang.ClassLoader classLoader54 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = mixin62.newInstance((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        generator0.setDelegates((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator49.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setAttemptLoad(true);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        generator64.setDelegates(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        java.lang.ClassLoader classLoader78 = null;
        generator76.setClassLoader(classLoader78);
        boolean boolean80 = generator76.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy81);
        generator49.setNamingPolicy(namingPolicy81);
        generator0.setNamingPolicy(namingPolicy81);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        java.lang.Object obj88 = null;
        boolean boolean89 = namingPolicy87.equals(obj88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        generator22.setStrategy(generatorStrategy26);
        generator22.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        generator30.setUseCache(true);
        boolean boolean44 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator30.getStrategy();
        generator22.setStrategy(generatorStrategy45);
        generator0.setStrategy(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator8.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator33.setClasses(classArray42);
        boolean boolean46 = generator33.getUseCache();
        generator33.setAttemptLoad(false);
        generator33.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin51 = generator33.create();
        java.lang.ClassLoader classLoader52 = generator33.getClassLoader();
        java.lang.ClassLoader classLoader53 = generator33.getClassLoader();
        boolean boolean54 = generatorStrategy32.equals((java.lang.Object) classLoader53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        generator55.setAttemptLoad(false);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator55.setDelegates(objArray63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator55.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        boolean boolean71 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator73.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator73.getStrategy();
        generator73.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        generator73.setStrategy(generatorStrategy81);
        boolean boolean83 = namingPolicy72.equals((java.lang.Object) generator73);
        generator73.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator73.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy86);
        boolean boolean88 = generatorStrategy32.equals((java.lang.Object) generator55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator55.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin92 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        boolean boolean34 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin mixin37 = generator18.create();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator46.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray53);
        generator18.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator18.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setUseCache(true);
        generator58.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator58.getStrategy();
        boolean boolean68 = namingPolicy57.equals((java.lang.Object) generator58);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        generator69.setUseCache(true);
        generator69.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator69.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator76.getStrategy();
        generator69.setStrategy(generatorStrategy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator69.setStrategy(generatorStrategy81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator69.getStrategy();
        boolean boolean84 = namingPolicy57.equals((java.lang.Object) generator69);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = null;
        generator0.setNamingPolicy(namingPolicy86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean34 = generator0.getAttemptLoad();
        generator0.setStyle((int) (short) 1);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        boolean boolean18 = generator16.getUseCache();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator16, true };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator23.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin40.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray49);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass54 = namingPolicy53.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator8.getNamingPolicy();
        generator8.setAttemptLoad(false);
        generator8.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator21.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        generator21.setClasses(classArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator21.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator21.getStrategy();
        generator8.setStrategy(generatorStrategy36);
        boolean boolean38 = namingPolicy7.equals((java.lang.Object) generator8);
        boolean boolean39 = generator8.getUseCache();
        generator8.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator8.generateClass(classVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = mixin16.newInstance((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setDelegates((java.lang.Object[]) classArray56);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.Object[] objArray12 = null;
        generator0.setDelegates(objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = namingPolicy19.equals((java.lang.Object) classArray40);
        generator0.setNamingPolicy(namingPolicy19);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        generator47.setUseCache(true);
        boolean boolean51 = generator47.getUseCache();
        generator47.setAttemptLoad(true);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        generator47.setDelegates(objArray56);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray67);
        generator47.setClasses(classArray67);
        generator47.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator47.getStrategy();
        boolean boolean73 = generator47.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator47.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy74);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy78);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = mixin25.newInstance((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.Object[] objArray40 = null;
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator42.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        generator42.setClassLoader(classLoader56);
        boolean boolean58 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator42.getNamingPolicy();
        java.lang.ClassLoader classLoader60 = generator42.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        boolean boolean74 = generator61.getUseCache();
        generator61.setAttemptLoad(false);
        generator61.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin79 = generator61.create();
        java.lang.ClassLoader classLoader80 = generator61.getClassLoader();
        java.lang.ClassLoader classLoader81 = generator61.getClassLoader();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray84);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin91 = mixin41.newInstance((java.lang.Object[]) classArray90);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        generator16.setUseCache(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class<?> wildcardClass29 = mixin28.getClass();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator37.setClassLoader(classLoader39);
        boolean boolean41 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator37.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setUseCache(true);
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator37, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = mixin36.newInstance(objArray53);
        java.lang.Class<?> wildcardClass56 = mixin55.getClass();
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass29, wildcardClass56 };
        generator16.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        generator0.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray44);
        generator24.setClasses(classArray44);
        boolean boolean47 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator49.setDelegates((java.lang.Object[]) classArray56);
        boolean boolean58 = generatorStrategy48.equals((java.lang.Object) classArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        generator0.setClasses(classArray59);
        boolean boolean61 = generator0.getUseCache();
        java.lang.Object[] objArray62 = null;
        generator0.setDelegates(objArray62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator0.setStrategy(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        boolean boolean9 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator5.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        generator13.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator13.setClasses(classArray48);
        boolean boolean63 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = generator13.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray74);
        generator5.setClasses(classArray74);
        java.lang.ClassLoader classLoader90 = generator5.getClassLoader();
        generator0.setClassLoader(classLoader90);
        boolean boolean92 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        java.lang.ClassLoader classLoader94 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader95 = generator0.getClassLoader();
        generator0.setStyle((int) (short) 1);
        boolean boolean98 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertNotNull(classLoader95);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator0.setClassLoader(classLoader16);
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin mixin40 = generator21.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator21.getStrategy();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        generator21.setClasses(classArray48);
        java.lang.ClassLoader classLoader53 = generator21.getClassLoader();
        java.lang.ClassLoader classLoader54 = generator21.getClassLoader();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        boolean boolean63 = generator61.getUseCache();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator61, true };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator68.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray75);
        generator0.setClassLoader(classLoader54);
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator84.setDelegates((java.lang.Object[]) classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(namingPolicy94);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray36);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator12.setClasses(classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator32, true };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray36);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = mixin39.newInstance((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator49.setClasses(classArray61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        boolean boolean71 = generator69.getUseCache();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator69, true };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin39.newInstance(objArray73);
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin39.newInstance(objArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        generator0.setDelegates(objArray81);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setUseCache(true);
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator35, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin34.newInstance(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator0.setDelegates(objArray51);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator38.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator38.getStrategy();
        generator31.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator31.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray66);
        generator45.setDelegates((java.lang.Object[]) classArray66);
        generator45.setAttemptLoad(true);
        generator45.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin74 = generator45.create();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        java.lang.ClassLoader classLoader77 = null;
        generator75.setClassLoader(classLoader77);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator75.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Mixin mixin81 = generator45.create();
        boolean boolean82 = generatorStrategy44.equals((java.lang.Object) mixin81);
        generator0.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.ClassGenerator classGenerator84 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray85 = generatorStrategy44.generate(classGenerator84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generatorStrategy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        boolean boolean61 = generatorStrategy51.equals((java.lang.Object) classArray59);
        generator7.setClasses(classArray59);
        generator7.setUseCache(false);
        java.lang.ClassLoader classLoader65 = generator7.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin67 = generator7.create();
        generator7.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator7.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(generatorStrategy70);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator7.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin47.newInstance((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray56);
        generator7.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin60 = generator7.create();
        generator7.setStyle(0);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator7.getStrategy();
        boolean boolean66 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        boolean boolean75 = generator73.getUseCache();
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator73, true };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator80.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator7.setDelegates((java.lang.Object[]) classArray87);
        java.lang.ClassLoader classLoader94 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader94);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator20.setClassLoader(classLoader22);
        boolean boolean24 = generator20.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator20.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin mixin27 = generator8.create();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray43);
        generator8.setDelegates((java.lang.Object[]) classArray35);
        boolean boolean47 = generator8.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getAttemptLoad();
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator56.setDelegates((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = mixin72.newInstance((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray81);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        generator8.setClasses(classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator8.getNamingPolicy();
        boolean boolean89 = generatorStrategy7.equals((java.lang.Object) namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator9.getNamingPolicy();
        generator9.setUseCache(true);
        java.lang.ClassLoader classLoader35 = generator9.getClassLoader();
        boolean boolean36 = generator9.getAttemptLoad();
        generator9.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator39.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator39.getStrategy();
        generator39.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        generator39.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator39.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator39.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator52.getStrategy();
        generator52.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator58.getStrategy();
        generator52.setStrategy(generatorStrategy60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator52.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator52.getStrategy();
        generator9.setStrategy(generatorStrategy63);
        generator0.setStrategy(generatorStrategy63);
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        boolean boolean82 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator28.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        boolean boolean34 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator28.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator28.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        boolean boolean38 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin26 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator27.getNamingPolicy();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        boolean boolean42 = generator40.getUseCache();
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator40, true };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator47.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        boolean boolean65 = generator63.getUseCache();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator63, true };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin56.newInstance((java.lang.Object[]) classArray77);
        generator27.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin26.newInstance((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        boolean boolean24 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        boolean boolean39 = generator26.getUseCache();
        generator26.setAttemptLoad(false);
        generator26.setAttemptLoad(false);
        boolean boolean44 = generator26.getUseCache();
        java.lang.ClassLoader classLoader45 = generator26.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        generator46.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        boolean boolean68 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator55.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator55.getStrategy();
        generator46.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator46.getStrategy();
        boolean boolean73 = generator46.getUseCache();
        boolean boolean74 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator46.getStrategy();
        generator26.setStrategy(generatorStrategy75);
        org.mockito.cglib.proxy.Mixin mixin77 = generator26.create();
        boolean boolean78 = namingPolicy25.equals((java.lang.Object) generator26);
        java.lang.Class<?> wildcardClass79 = generator26.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        generator7.setUseCache(false);
        generator7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        boolean boolean65 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = generator15.getClassLoader();
        generator7.setClassLoader(classLoader66);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator7.setDelegates((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        generator82.setUseCache(true);
        boolean boolean86 = generator82.getUseCache();
        generator82.setAttemptLoad(true);
        generator82.setUseCache(true);
        boolean boolean91 = generator82.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator82.getStrategy();
        boolean boolean93 = namingPolicy81.equals((java.lang.Object) generator82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader3, (java.lang.Object[]) classArray9);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        java.lang.Class<?> wildcardClass15 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator52.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator52.getStrategy();
        java.lang.ClassLoader classLoader68 = null;
        generator52.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator52.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin mixin72 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator11.setStrategy(generatorStrategy17);
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        boolean boolean23 = generator11.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator11.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        boolean boolean35 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean19 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray62);
        generator0.setClassLoader(classLoader52);
        boolean boolean78 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        boolean boolean88 = generator83.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator83.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator22.getStrategy();
        generator12.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        java.lang.Object obj40 = null;
        boolean boolean41 = generatorStrategy37.equals(obj40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator42.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator42.getNamingPolicy();
        generator42.setStyle((int) (byte) 1);
        generator42.setUseCache(true);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        boolean boolean66 = generatorStrategy37.equals((java.lang.Object) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator11.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator11.getNamingPolicy();
        generator11.setAttemptLoad(false);
        generator11.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator24.setClasses(classArray33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator24.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator24.getStrategy();
        generator11.setStrategy(generatorStrategy39);
        generator0.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        boolean boolean45 = generator43.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator43.getStrategy();
        generator0.setStrategy(generatorStrategy46);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        boolean boolean34 = generator0.getUseCache();
        boolean boolean35 = generator0.getAttemptLoad();
        boolean boolean36 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        generator9.setUseCache(true);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader36 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        boolean boolean45 = generator43.getUseCache();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator43, true };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator50.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray60);
        java.lang.ClassLoader classLoader62 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray83);
        generator0.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin90 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        generator6.setUseCache(false);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        boolean boolean64 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = generator14.getClassLoader();
        generator6.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray69);
        generator0.setClassLoader(classLoader65);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor77 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator22.getStrategy();
        generator12.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator44.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator44.getStrategy();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        boolean boolean69 = generator67.getUseCache();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator67, true };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator74.setDelegates((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        boolean boolean86 = generatorStrategy59.equals((java.lang.Object) classArray66);
        generator0.setStrategy(generatorStrategy59);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getUseCache();
        boolean boolean6 = generator0.getAttemptLoad();
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator27.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator27.getStrategy();
        generator20.setStrategy(generatorStrategy42);
        generator8.setStrategy(generatorStrategy42);
        boolean boolean45 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator8.getNamingPolicy();
        generator8.setAttemptLoad(true);
        generator8.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy53);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator52.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator52.getStrategy();
        java.lang.ClassLoader classLoader68 = null;
        generator52.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator52.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin mixin72 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator74.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator74.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator78.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator78.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator78.getNamingPolicy();
        generator74.setNamingPolicy(namingPolicy82);
        generator0.setNamingPolicy(namingPolicy82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        boolean boolean42 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader45 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(classLoader45);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = null;
        generator0.setClassLoader(classLoader12);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator14.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy46);
        generator14.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader49 = generator14.getClassLoader();
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin55.newInstance((java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        boolean boolean75 = generator73.getUseCache();
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator73, true };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator80.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        generator0.setDelegates((java.lang.Object[]) classArray64);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        boolean boolean98 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin99 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(generatorStrategy97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        java.lang.ClassLoader classLoader27 = null;
        generator25.setClassLoader(classLoader27);
        boolean boolean29 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator25.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator25.setNamingPolicy(namingPolicy32);
        boolean boolean34 = generator25.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator35.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator35.getStrategy();
        generator25.setStrategy(generatorStrategy43);
        generator0.setStrategy(generatorStrategy43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader46 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        generator19.setClasses(classArray39);
        boolean boolean42 = generator19.getUseCache();
        generator19.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator19.setStrategy(generatorStrategy45);
        generator19.setUseCache(true);
        generator19.setAttemptLoad(true);
        boolean boolean51 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin52 = generator19.create();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(generatorStrategy55);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        generator0.setAttemptLoad(true);
        java.lang.Object[] objArray15 = null;
        generator0.setDelegates(objArray15);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        java.lang.ClassLoader classLoader27 = null;
        generator25.setClassLoader(classLoader27);
        boolean boolean29 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator25.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setUseCache(true);
        java.lang.Object[] objArray41 = new java.lang.Object[] { generator25, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        generator0.setClasses(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin15.newInstance((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin25.newInstance((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin76.newInstance((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        boolean boolean30 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator19.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        boolean boolean62 = namingPolicy38.equals((java.lang.Object) classArray59);
        boolean boolean63 = namingPolicy31.equals((java.lang.Object) boolean62);
        generator0.setNamingPolicy(namingPolicy31);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator84.setDelegates((java.lang.Object[]) classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(namingPolicy96);
        org.junit.Assert.assertNotNull(classLoader97);
        org.junit.Assert.assertNotNull(generatorStrategy98);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = mixin44.newInstance((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray53);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        java.lang.Class<?> wildcardClass60 = classArray57.getClass();
        boolean boolean61 = generatorStrategy19.equals((java.lang.Object) wildcardClass60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        generator62.setAttemptLoad(true);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        generator62.setDelegates(objArray71);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, (java.lang.Object[]) classArray82);
        generator62.setClasses(classArray82);
        boolean boolean85 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator62.getStrategy();
        boolean boolean87 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator62.getStrategy();
        boolean boolean89 = generator62.getAttemptLoad();
        java.lang.ClassLoader classLoader90 = generator62.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy19.generate((org.mockito.cglib.core.ClassGenerator) generator62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin26 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator33.setClasses(classArray42);
        boolean boolean46 = generator33.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin47 = generator33.create();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        java.lang.ClassLoader classLoader50 = null;
        generator48.setClassLoader(classLoader50);
        boolean boolean52 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator48.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setUseCache(true);
        java.lang.Object[] objArray64 = new java.lang.Object[] { generator48, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray64);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin47.newInstance((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        boolean boolean72 = namingPolicy32.equals((java.lang.Object) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin26.newInstance((java.lang.Object[]) classArray71);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        boolean boolean35 = generator12.getUseCache();
        generator12.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator12.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator12.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator12.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        boolean boolean55 = generator42.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setAttemptLoad(true);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        generator56.setDelegates(objArray65);
        generator42.setDelegates(objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        generator69.setUseCache(true);
        boolean boolean73 = generator69.getUseCache();
        generator69.setAttemptLoad(true);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        generator69.setDelegates(objArray78);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getUseCache();
        java.lang.ClassLoader classLoader83 = null;
        generator81.setClassLoader(classLoader83);
        boolean boolean85 = generator81.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator81.getNamingPolicy();
        generator69.setNamingPolicy(namingPolicy86);
        generator42.setNamingPolicy(namingPolicy86);
        generator42.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin91 = generator42.create();
        boolean boolean92 = generatorStrategy41.equals((java.lang.Object) generator42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator42.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator25.setClasses(classArray34);
        boolean boolean38 = generator25.getUseCache();
        generator25.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator25.getNamingPolicy();
        boolean boolean42 = generator25.getUseCache();
        java.lang.ClassLoader classLoader43 = generator25.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        boolean boolean46 = generator44.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator44.getStrategy();
        generator44.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator57.setClasses(classArray66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator57.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator57.getStrategy();
        generator50.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator50.setDelegates((java.lang.Object[]) classArray79);
        generator44.setClasses(classArray79);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin24.newInstance((java.lang.Object[]) classArray79);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator6.getNamingPolicy();
        generator6.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator6.getNamingPolicy();
        generator6.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        generator17.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        generator23.setUseCache(false);
        generator23.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        generator31.setClasses(classArray51);
        boolean boolean54 = generator31.getUseCache();
        generator31.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator57.setClasses(classArray66);
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray77);
        generator31.setClasses(classArray66);
        boolean boolean81 = generator31.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = generator31.getClassLoader();
        generator23.setClassLoader(classLoader82);
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator23.setDelegates((java.lang.Object[]) classArray91);
        java.lang.ClassLoader classLoader93 = generator23.getClassLoader();
        generator17.setClassLoader(classLoader93);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator17.getStrategy();
        generator0.setStrategy(generatorStrategy95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(generatorStrategy95);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator9.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy41);
        generator9.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader44 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator51, true };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray65);
        generator0.setClassLoader(classLoader44);
        boolean boolean70 = generator0.getAttemptLoad();
        java.lang.Object[] objArray71 = null;
        generator0.setDelegates(objArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator22.getStrategy();
        generator12.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator51, true };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.core.Predicate predicate60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = namingPolicy42.getClassName("", "hi!", (java.lang.Object) classArray59, predicate60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        boolean boolean18 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean21 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean28 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass12 = namingPolicy11.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator21.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        generator21.setClasses(classArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator21.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator21.getStrategy();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        boolean boolean46 = generator44.getUseCache();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator44, true };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        boolean boolean63 = generatorStrategy36.equals((java.lang.Object) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator64.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator64.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator68.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator68.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator68.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = null;
        generator64.setNamingPolicy(namingPolicy74);
        boolean boolean76 = generator64.getUseCache();
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = mixin83.newInstance((java.lang.Object[]) classArray92);
        generator64.setClasses(classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray92);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        generator0.setClasses(classArray96);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray96);
        java.lang.Class<?> wildcardClass99 = classArray98.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean34 = generator0.getAttemptLoad();
        generator0.setStyle((int) (short) 1);
        generator0.setUseCache(true);
        boolean boolean39 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray46);
        generator26.setClasses(classArray46);
        boolean boolean49 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator26.getStrategy();
        java.lang.Class[] classArray51 = null;
        generator26.setClasses(classArray51);
        boolean boolean53 = generator26.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator26.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator26.getNamingPolicy();
        java.lang.Class[] classArray56 = null;
        generator26.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        generator58.setDelegates(objArray67);
        generator58.setUseCache(true);
        boolean boolean72 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator58.getNamingPolicy();
        boolean boolean74 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator58.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator76.getStrategy();
        generator76.setStyle((int) (byte) 0);
        boolean boolean82 = namingPolicy75.equals((java.lang.Object) (byte) 0);
        generator26.setNamingPolicy(namingPolicy75);
        generator0.setNamingPolicy(namingPolicy75);
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        generator27.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        generator27.setClasses(classArray62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator27.getStrategy();
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        generator27.setDelegates(objArray80);
        generator27.setAttemptLoad(false);
        boolean boolean86 = generator27.getAttemptLoad();
        boolean boolean87 = generator27.getUseCache();
        java.lang.ClassLoader classLoader88 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader88);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator13.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        generator13.setClassLoader(classLoader27);
        boolean boolean29 = generator13.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        generator31.setClasses(classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray51);
        generator13.setDelegates((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin12.newInstance((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = null;
        generator12.setNamingPolicy(namingPolicy17);
        boolean boolean19 = generator12.getAttemptLoad();
        java.lang.Object[] objArray20 = null;
        generator12.setDelegates(objArray20);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        boolean boolean14 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator6.setClasses(classArray18);
        java.lang.ClassLoader classLoader20 = null;
        generator6.setClassLoader(classLoader20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator6.setStrategy(generatorStrategy22);
        boolean boolean24 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader76 = generator25.getClassLoader();
        java.lang.ClassLoader classLoader77 = null;
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, (java.lang.Object[]) classArray83);
        generator6.setClasses(classArray83);
        generator0.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        generator28.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        boolean boolean50 = generator37.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator37.getStrategy();
        generator28.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator28.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        boolean boolean56 = generator0.getUseCache();
        boolean boolean57 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        boolean boolean68 = generator55.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        generator69.setUseCache(true);
        boolean boolean73 = generator69.getUseCache();
        generator69.setAttemptLoad(true);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        generator69.setDelegates(objArray78);
        generator55.setDelegates(objArray78);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator55.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray83 = generatorStrategy54.generate((org.mockito.cglib.core.ClassGenerator) generator55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(namingPolicy82);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        boolean boolean56 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin57 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin60 = generator0.create();
        java.lang.Class<?> wildcardClass61 = mixin60.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        boolean boolean39 = generator0.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin46.newInstance((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        generator62.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator62.getStrategy();
        generator60.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator60.setDelegates(objArray73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator60.getStrategy();
        generator60.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator60.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin82 = generator60.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator60.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator60.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy84);
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator89 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = generatorStrategy88.generate(classGenerator89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator9.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy41);
        generator9.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader44 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator51, true };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray65);
        generator0.setClassLoader(classLoader44);
        boolean boolean70 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        boolean boolean82 = generator0.getAttemptLoad();
        boolean boolean83 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin84 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray27);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator0.getStrategy();
        boolean boolean33 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle(2);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        generator31.setClasses(classArray51);
        boolean boolean54 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator31.getStrategy();
        boolean boolean56 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator31.getStrategy();
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        boolean boolean70 = generator66.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator66.getNamingPolicy();
        generator59.setNamingPolicy(namingPolicy71);
        boolean boolean73 = namingPolicy30.equals((java.lang.Object) generator59);
        generator59.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator59.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin12.newInstance((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        generator24.setAttemptLoad(false);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator24.setDelegates(objArray32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        boolean boolean38 = generator36.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator36.getStrategy();
        boolean boolean40 = generatorStrategy35.equals((java.lang.Object) generatorStrategy39);
        generator0.setStrategy(generatorStrategy39);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator44.setStrategy(generatorStrategy57);
        boolean boolean59 = generator44.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator60.getStrategy();
        generator60.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator70.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        generator70.setClasses(classArray79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        generator70.setStrategy(generatorStrategy83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator70.getStrategy();
        generator60.setStrategy(generatorStrategy85);
        generator44.setStrategy(generatorStrategy85);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator44.getStrategy();
        generator0.setStrategy(generatorStrategy88);
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator21.setStrategy(generatorStrategy27);
        generator21.setAttemptLoad(true);
        generator21.setUseCache(true);
        boolean boolean33 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator21.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator35.getNamingPolicy();
        generator35.setUseCache(false);
        boolean boolean39 = generatorStrategy34.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator40.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator49.setClasses(classArray61);
        generator40.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        boolean boolean65 = generatorStrategy34.equals((java.lang.Object) mixin64);
        generator0.setStrategy(generatorStrategy34);
        java.lang.Object[] objArray67 = null;
        generator0.setDelegates(objArray67);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator22.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        boolean boolean36 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        boolean boolean38 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator40.setClassLoader(classLoader42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator44.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator44.getNamingPolicy();
        generator40.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator40.getNamingPolicy();
        generator40.setAttemptLoad(true);
        java.lang.Object[] objArray53 = null;
        generator40.setDelegates(objArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator40.getStrategy();
        boolean boolean57 = namingPolicy39.equals((java.lang.Object) generator40);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator17.setClassLoader(classLoader19);
        boolean boolean21 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        boolean boolean46 = namingPolicy22.equals((java.lang.Object) classArray43);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        boolean boolean62 = generator49.getUseCache();
        generator49.setAttemptLoad(false);
        generator49.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin67 = generator49.create();
        java.lang.ClassLoader classLoader68 = generator49.getClassLoader();
        java.lang.ClassLoader classLoader69 = generator49.getClassLoader();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray72);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray72);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray16);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray16);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray82);
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setDelegates((java.lang.Object[]) classArray15);
        boolean boolean18 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        generator21.setUseCache(true);
        generator21.setUseCache(false);
        generator21.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator21.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator59.setDelegates((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray66);
        boolean boolean69 = generatorStrategy50.equals((java.lang.Object) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator70.setStrategy(generatorStrategy72);
        generator70.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator70.getNamingPolicy();
        generator70.setUseCache(true);
        boolean boolean79 = generatorStrategy50.equals((java.lang.Object) true);
        generator0.setStrategy(generatorStrategy50);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        boolean boolean16 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader77 = generator0.getClassLoader();
        boolean boolean78 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        boolean boolean88 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator0.getStrategy();
        boolean boolean92 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator8.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator19.setNamingPolicy(namingPolicy26);
        boolean boolean28 = generator19.getAttemptLoad();
        java.lang.Object[] objArray29 = null;
        generator19.setDelegates(objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        generator31.setClasses(classArray51);
        generator19.setClasses(classArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        boolean boolean65 = generator63.getUseCache();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator63, true };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin55.newInstance((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray13);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        boolean boolean31 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        generator18.setDelegates(objArray41);
        generator18.setAttemptLoad(false);
        boolean boolean47 = generator18.getAttemptLoad();
        generator18.setUseCache(false);
        boolean boolean50 = generator18.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator51.setClasses(classArray63);
        java.lang.ClassLoader classLoader65 = null;
        generator51.setClassLoader(classLoader65);
        boolean boolean67 = generator51.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        generator69.setUseCache(true);
        boolean boolean73 = generator69.getUseCache();
        generator69.setAttemptLoad(true);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        generator69.setDelegates(objArray78);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray89);
        generator69.setClasses(classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray89);
        generator51.setDelegates((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray94);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        generator18.setClasses(classArray97);
        org.mockito.cglib.proxy.Mixin mixin99 = mixin17.newInstance((java.lang.Object[]) classArray97);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        boolean boolean20 = generator7.getUseCache();
        generator7.setAttemptLoad(false);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator31.setDelegates((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        generator7.setClasses(classArray41);
        java.lang.ClassLoader classLoader43 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass46 = namingPolicy45.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setUseCache(true);
        generator40.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator40.getStrategy();
        boolean boolean50 = namingPolicy39.equals((java.lang.Object) generator40);
        boolean boolean51 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator40.getStrategy();
        boolean boolean53 = generator40.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        boolean boolean13 = generator11.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray20);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = mixin31.newInstance((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator43.setClasses(classArray52);
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray69);
        generator0.setClasses(classArray20);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator0.setNamingPolicy(namingPolicy75);
        boolean boolean77 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator57.setDelegates((java.lang.Object[]) classArray64);
        boolean boolean66 = namingPolicy55.equals((java.lang.Object) classArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = namingPolicy14.equals((java.lang.Object) classArray35);
        generator7.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator40.setDelegates(objArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        generator40.setClasses(classArray60);
        boolean boolean63 = generator40.getUseCache();
        generator40.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator40.getStrategy();
        boolean boolean67 = namingPolicy14.equals((java.lang.Object) generator40);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator68.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator68.getNamingPolicy();
        boolean boolean78 = namingPolicy14.equals((java.lang.Object) namingPolicy77);
        generator0.setNamingPolicy(namingPolicy77);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        generator10.setDelegates((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator19.setStrategy(generatorStrategy25);
        generator19.setAttemptLoad(true);
        generator19.setUseCache(false);
        boolean boolean31 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator32.setClasses(classArray44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        boolean boolean54 = generator52.getUseCache();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator52, true };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray56);
        generator19.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        java.lang.ClassLoader classLoader72 = null;
        generator70.setClassLoader(classLoader72);
        boolean boolean74 = generator70.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator70.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        generator77.setUseCache(true);
        boolean boolean81 = generator77.getUseCache();
        generator77.setUseCache(true);
        java.lang.Object[] objArray86 = new java.lang.Object[] { generator70, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin69.newInstance(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray86);
        generator0.setClasses(classArray17);
        boolean boolean93 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator16.setClasses(classArray28);
        java.lang.ClassLoader classLoader30 = null;
        generator16.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = generator16.getClassLoader();
        boolean boolean33 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        generator38.setClassLoader(classLoader40);
        boolean boolean42 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator38.setStrategy(generatorStrategy44);
        generator38.setAttemptLoad(true);
        generator38.setUseCache(false);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.ClassLoader classLoader51 = null;
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray57);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray61);
        generator38.setClasses(classArray61);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        generator38.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        generator0.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin77 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, (java.lang.Object[]) classArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray11);
        generator0.setClasses(classArray11);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        generator0.setClasses(classArray40);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin27);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        boolean boolean30 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin20 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator21.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        generator21.setClasses(classArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator21.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray57);
        generator37.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        generator60.setDelegates(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        generator21.setDelegates(objArray69);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin20.newInstance(objArray69);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
        generator0.setUseCache(true);
        boolean boolean27 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray35);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin40.newInstance((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator55.setClasses(classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        generator0.setClasses(classArray51);
        generator0.setStyle((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        boolean boolean29 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        boolean boolean14 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setStyle((int) (byte) 1);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator21.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        generator21.setClasses(classArray30);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        java.lang.ClassLoader classLoader46 = null;
        generator44.setClassLoader(classLoader46);
        boolean boolean48 = generator44.getAttemptLoad();
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator44.setClasses(classArray56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        boolean boolean66 = generator64.getUseCache();
        java.lang.Object[] objArray68 = new java.lang.Object[] { generator64, true };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray56);
        generator0.setDelegates((java.lang.Object[]) classArray56);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        boolean boolean20 = generator0.getUseCache();
        boolean boolean21 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mixin22);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray62);
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getUseCache();
        boolean boolean83 = generator81.getUseCache();
        java.lang.Object[] objArray85 = new java.lang.Object[] { generator81, true };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        generator0.setDelegates(objArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = generator0.create();
        java.lang.Class<?> wildcardClass89 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        boolean boolean22 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        generator23.setUseCache(false);
        generator23.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        generator31.setClasses(classArray51);
        boolean boolean54 = generator31.getUseCache();
        generator31.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator57.setClasses(classArray66);
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray77);
        generator31.setClasses(classArray66);
        boolean boolean81 = generator31.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = generator31.getClassLoader();
        generator23.setClassLoader(classLoader82);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray86);
        generator0.setClassLoader(classLoader82);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray5 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray5);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, (java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = mixin6.newInstance((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        boolean boolean59 = generator57.getUseCache();
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator57, true };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator64.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin49.newInstance((java.lang.Object[]) classArray76);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator11.setStrategy(generatorStrategy17);
        generator11.setAttemptLoad(true);
        generator11.setUseCache(true);
        boolean boolean23 = generator11.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator11.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin44.newInstance((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin35.newInstance((java.lang.Object[]) classArray50);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator27.getNamingPolicy();
        boolean boolean32 = generatorStrategy26.equals((java.lang.Object) generator27);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator33.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator37.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy41);
        generator33.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator33.setStrategy(generatorStrategy45);
        boolean boolean47 = generator33.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setAttemptLoad(true);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        generator48.setDelegates(objArray57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray68);
        generator48.setClasses(classArray68);
        boolean boolean71 = generator48.getUseCache();
        boolean boolean72 = generator48.getAttemptLoad();
        java.lang.Object[] objArray73 = null;
        generator48.setDelegates(objArray73);
        java.lang.ClassLoader classLoader75 = generator48.getClassLoader();
        generator33.setClassLoader(classLoader75);
        generator27.setClassLoader(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean10 = generator0.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator38.setDelegates((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        boolean boolean67 = generatorStrategy37.equals((java.lang.Object) classArray66);
        java.lang.Class[] classArray68 = null;
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        boolean boolean77 = generator75.getUseCache();
        java.lang.Object[] objArray79 = new java.lang.Object[] { generator75, true };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray79);
        boolean boolean84 = generatorStrategy37.equals((java.lang.Object) classArray68);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setStyle(1);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator14.setDelegates(objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader33 = null;
        generator32.setClassLoader(classLoader33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray61);
        generator41.setClasses(classArray61);
        boolean boolean64 = namingPolicy40.equals((java.lang.Object) classArray61);
        generator32.setNamingPolicy(namingPolicy40);
        generator14.setNamingPolicy(namingPolicy40);
        java.lang.Object obj67 = null;
        boolean boolean68 = namingPolicy40.equals(obj67);
        generator0.setNamingPolicy(namingPolicy40);
        boolean boolean70 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass33 = namingPolicy32.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        boolean boolean70 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator14.getStrategy();
        boolean boolean19 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator22.getStrategy();
        generator22.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin40 = generator22.create();
        boolean boolean41 = generatorStrategy20.equals((java.lang.Object) generator22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator22.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator47.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator47.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator43.getNamingPolicy();
        boolean boolean54 = generator43.getAttemptLoad();
        generator43.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator43.getNamingPolicy();
        boolean boolean58 = generatorStrategy42.equals((java.lang.Object) generator43);
        boolean boolean59 = generator43.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator19.getNamingPolicy();
        generator19.setAttemptLoad(false);
        generator19.setUseCache(true);
        generator19.setUseCache(false);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.ClassLoader classLoader35 = null;
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray41);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray53);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin46.newInstance((java.lang.Object[]) classArray57);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        generator19.setClasses(classArray61);
        generator19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator19.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator69.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator69.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator69.getNamingPolicy();
        generator69.setUseCache(false);
        boolean boolean76 = generator69.getUseCache();
        boolean boolean77 = generator69.getUseCache();
        generator69.setAttemptLoad(false);
        boolean boolean80 = generator69.getAttemptLoad();
        boolean boolean81 = generator69.getAttemptLoad();
        boolean boolean82 = generator69.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray83 = generatorStrategy68.generate((org.mockito.cglib.core.ClassGenerator) generator69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        generator7.setUseCache(false);
        generator7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        boolean boolean65 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = generator15.getClassLoader();
        generator7.setClassLoader(classLoader66);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator7.setDelegates((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader77);
        boolean boolean79 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.create(objArray2);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(objArray2);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean10 = generator0.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        boolean boolean37 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        boolean boolean43 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator38.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator45.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator45.setNamingPolicy(namingPolicy52);
        boolean boolean54 = generator45.getAttemptLoad();
        java.lang.Object[] objArray55 = null;
        generator45.setDelegates(objArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator45.getStrategy();
        generator38.setStrategy(generatorStrategy57);
        generator0.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader60 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        generator23.setClasses(classArray32);
        boolean boolean36 = generator23.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        generator23.setDelegates(objArray46);
        generator23.setStyle(2);
        boolean boolean52 = generator23.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator23.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy60);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        boolean boolean37 = generator35.getUseCache();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator35, true };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin59.newInstance(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray76);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        generator0.setDelegates(objArray76);
        org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
        boolean boolean84 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setStyle(0);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        boolean boolean26 = generator13.getUseCache();
        generator13.setAttemptLoad(false);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator13.setClasses(classArray47);
        java.lang.ClassLoader classLoader49 = generator13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator13.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        boolean boolean61 = generatorStrategy50.equals((java.lang.Object) mixin60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator62.setClassLoader(classLoader67);
        boolean boolean69 = generator62.getAttemptLoad();
        boolean boolean70 = generatorStrategy50.equals((java.lang.Object) boolean69);
        generator0.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy38);
        boolean boolean40 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        boolean boolean71 = generator69.getUseCache();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator69, true };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator76.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader87 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = mixin86.newInstance((java.lang.Object[]) classArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator16.setClasses(classArray28);
        java.lang.ClassLoader classLoader30 = null;
        generator16.setClassLoader(classLoader30);
        java.lang.ClassLoader classLoader32 = generator16.getClassLoader();
        boolean boolean33 = generator16.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator16.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin mixin57 = generator38.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator38.getStrategy();
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray65);
        generator38.setClasses(classArray65);
        java.lang.ClassLoader classLoader70 = generator38.getClassLoader();
        java.lang.ClassLoader classLoader71 = generator38.getClassLoader();
        generator38.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator38.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy74);
        boolean boolean76 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle(2);
        boolean boolean17 = generator0.getUseCache();
        boolean boolean18 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray27);
        generator7.setClasses(classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator7.getNamingPolicy();
        generator7.setUseCache(true);
        java.lang.ClassLoader classLoader33 = generator7.getClassLoader();
        boolean boolean34 = generator7.getAttemptLoad();
        generator7.setAttemptLoad(true);
        boolean boolean37 = generator7.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = generator7.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator7.getNamingPolicy();
        java.lang.ClassLoader classLoader40 = generator7.getClassLoader();
        boolean boolean41 = namingPolicy6.equals((java.lang.Object) generator7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class<?> wildcardClass43 = classArray35.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator33.getNamingPolicy();
        generator33.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator33.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin mixin74 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        boolean boolean78 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean34 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator0.getStrategy();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(objArray39);
        boolean boolean43 = generatorStrategy35.equals((java.lang.Object) mixin42);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        boolean boolean39 = generator16.getUseCache();
        generator16.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray62);
        generator16.setClasses(classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        boolean boolean70 = generator66.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator66.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy71);
        generator14.setNamingPolicy(namingPolicy71);
        generator0.setNamingPolicy(namingPolicy71);
        boolean boolean75 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin76 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin56.newInstance((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator65.setClassLoader(classLoader67);
        boolean boolean69 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        generator65.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        generator72.setUseCache(true);
        boolean boolean76 = generator72.getUseCache();
        generator72.setUseCache(true);
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator65, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator0.setDelegates(objArray81);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray86);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setStyle(1);
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator15.getStrategy();
        generator13.setStrategy(generatorStrategy22);
        boolean boolean24 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.ClassGenerator classGenerator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = generatorStrategy25.generate(classGenerator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        boolean boolean61 = generator33.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin62 = generator33.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(mixin62);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray39 = null;
        generator0.setClasses(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator0.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin mixin44 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin45 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        boolean boolean38 = generator36.getUseCache();
        java.lang.Object[] objArray40 = new java.lang.Object[] { generator36, true };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator43.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        generator54.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        boolean boolean76 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator63.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator63.getStrategy();
        generator54.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator54.getStrategy();
        java.lang.ClassLoader classLoader81 = null;
        java.lang.ClassLoader classLoader82 = null;
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray92);
        boolean boolean94 = generatorStrategy80.equals((java.lang.Object) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray92);
        generator0.setClasses(classArray92);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean88 = generator87.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator87.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator87.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator87.getStrategy();
        boolean boolean92 = generator87.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator87.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        org.mockito.cglib.proxy.Mixin mixin95 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        boolean boolean41 = generator28.getUseCache();
        generator28.setAttemptLoad(false);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        generator28.setClasses(classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        generator0.setDelegates((java.lang.Object[]) classArray64);
        generator0.setStyle((int) (short) 0);
        boolean boolean68 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        boolean boolean30 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        java.lang.Object obj32 = null;
        boolean boolean33 = namingPolicy31.equals(obj32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        boolean boolean30 = generator0.getUseCache();
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        generator32.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        generator32.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        generator32.setNamingPolicy(namingPolicy43);
        boolean boolean45 = generator32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator32.getStrategy();
        generator32.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator32.getStrategy();
        generator0.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setAttemptLoad(true);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        generator51.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.proxy.Mixin mixin70 = generator51.create();
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator79.setDelegates((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray78, (java.lang.Object[]) classArray86);
        generator51.setDelegates((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        boolean boolean91 = generatorStrategy49.equals((java.lang.Object) classArray78);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generatorStrategy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        boolean boolean61 = generatorStrategy51.equals((java.lang.Object) classArray59);
        generator7.setClasses(classArray59);
        generator7.setUseCache(false);
        generator7.setStyle((int) (short) 1);
        boolean boolean67 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator7.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator7.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator11.setNamingPolicy(namingPolicy18);
        boolean boolean20 = generator11.getAttemptLoad();
        java.lang.Object[] objArray21 = null;
        generator11.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        generator11.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setClasses(classArray43);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean51 = generator0.getUseCache();
        boolean boolean52 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator53.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator53.getStrategy();
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        boolean boolean78 = generator76.getUseCache();
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator76, true };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator83.setDelegates((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        boolean boolean95 = generatorStrategy68.equals((java.lang.Object) classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = generator18.getUseCache();
        generator18.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray64);
        generator18.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        java.lang.ClassLoader classLoader70 = null;
        generator68.setClassLoader(classLoader70);
        boolean boolean72 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy73);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator83.setDelegates((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray82, (java.lang.Object[]) classArray90);
        boolean boolean93 = namingPolicy73.equals((java.lang.Object) mixin92);
        generator0.setNamingPolicy(namingPolicy73);
        java.lang.ClassLoader classLoader95 = generator0.getClassLoader();
        generator0.setUseCache(false);
        boolean boolean98 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(classLoader95);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray48);
        generator28.setClasses(classArray48);
        generator28.setUseCache(true);
        generator28.setUseCache(false);
        java.lang.ClassLoader classLoader55 = generator28.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator63.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator63.getStrategy();
        generator56.setStrategy(generatorStrategy78);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator80.setDelegates((java.lang.Object[]) classArray87);
        generator56.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray87);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        boolean boolean28 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy61);
        generator29.setNamingPolicy(namingPolicy61);
        java.lang.ClassLoader classLoader64 = generator29.getClassLoader();
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray72);
        generator0.setClassLoader(classLoader64);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getUseCache();
        java.lang.ClassLoader classLoader82 = null;
        generator80.setClassLoader(classLoader82);
        boolean boolean84 = generator80.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = null;
        generator80.setNamingPolicy(namingPolicy85);
        java.lang.ClassLoader classLoader87 = null;
        generator80.setClassLoader(classLoader87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator80.getStrategy();
        generator0.setStrategy(generatorStrategy89);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator30, true };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = mixin23.newInstance((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        boolean boolean40 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        generator27.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        boolean boolean70 = generator66.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator66.getNamingPolicy();
        generator54.setNamingPolicy(namingPolicy71);
        generator27.setNamingPolicy(namingPolicy71);
        generator27.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin76 = generator27.create();
        java.lang.ClassLoader classLoader77 = generator27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin79 = generator27.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator27.getNamingPolicy();
        java.lang.Class[] classArray81 = null;
        generator27.setClasses(classArray81);
        boolean boolean83 = generator27.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin84 = generator27.create();
        generator27.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator27.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(namingPolicy87);
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator20.setClassLoader(classLoader22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator20.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        generator20.setClasses(classArray31);
        org.mockito.cglib.proxy.Mixin mixin38 = generator20.create();
        java.lang.ClassLoader classLoader39 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator40.setDelegates(objArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        generator40.setClasses(classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator20.setClasses(classArray60);
        generator0.setDelegates((java.lang.Object[]) classArray60);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        java.lang.ClassLoader classLoader78 = null;
        generator76.setClassLoader(classLoader78);
        boolean boolean80 = generator76.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = null;
        generator76.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        generator83.setUseCache(true);
        java.lang.Object[] objArray92 = new java.lang.Object[] { generator76, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = mixin75.newInstance(objArray92);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray95);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        generator0.setDelegates((java.lang.Object[]) classArray95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        generator10.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator10.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator37.setClassLoader(classLoader39);
        boolean boolean41 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator37.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy42);
        generator10.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator10.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator47.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator56.setClasses(classArray68);
        generator47.setClasses(classArray68);
        generator10.setDelegates((java.lang.Object[]) classArray68);
        generator0.setClasses(classArray68);
        generator0.setStyle(0);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader77 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader77);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setUseCache(true);
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator32, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin31.newInstance(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        boolean boolean52 = generatorStrategy24.equals((java.lang.Object) objArray48);
        java.lang.ClassLoader classLoader53 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator55.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator64.setClasses(classArray76);
        generator55.setClasses(classArray76);
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator54, generator55, (short) -1 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray80);
        boolean boolean82 = generatorStrategy24.equals((java.lang.Object) classLoader53);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        java.lang.ClassLoader classLoader88 = null;
        generator83.setClassLoader(classLoader88);
        boolean boolean90 = generatorStrategy24.equals((java.lang.Object) generator83);
        boolean boolean91 = generator83.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setUseCache(true);
        java.lang.Object[] objArray16 = new java.lang.Object[] { generator0, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray19);
        java.lang.Object[] objArray24 = null;
        org.mockito.cglib.proxy.Mixin mixin25 = mixin23.newInstance(objArray24);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin25);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator13.setNamingPolicy(namingPolicy20);
        boolean boolean22 = generator13.getAttemptLoad();
        java.lang.Object[] objArray23 = null;
        generator13.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator25.getStrategy();
        generator25.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator35.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator35.getStrategy();
        generator25.setStrategy(generatorStrategy50);
        generator13.setStrategy(generatorStrategy50);
        java.lang.Object obj53 = null;
        boolean boolean54 = generatorStrategy50.equals(obj53);
        generator0.setStrategy(generatorStrategy50);
        boolean boolean56 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator61.getStrategy();
        generator59.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        boolean boolean30 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator26.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator14.getStrategy();
        boolean boolean34 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        boolean boolean48 = generator35.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        generator49.setDelegates(objArray58);
        generator35.setDelegates(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        generator62.setAttemptLoad(true);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        generator62.setDelegates(objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        java.lang.ClassLoader classLoader76 = null;
        generator74.setClassLoader(classLoader76);
        boolean boolean78 = generator74.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator74.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy79);
        generator35.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator35.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator83.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator83.getStrategy();
        generator83.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator83.getStrategy();
        boolean boolean90 = generatorStrategy82.equals((java.lang.Object) generator83);
        generator14.setStrategy(generatorStrategy82);
        generator0.setStrategy(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator9.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator18.setClassLoader(classLoader20);
        generator18.setUseCache(false);
        generator18.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray46);
        generator26.setClasses(classArray46);
        boolean boolean49 = generator26.getUseCache();
        generator26.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray72);
        generator26.setClasses(classArray61);
        boolean boolean76 = generator26.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = generator26.getClassLoader();
        generator18.setClassLoader(classLoader77);
        generator9.setClassLoader(classLoader77);
        generator0.setClassLoader(classLoader77);
        generator0.setUseCache(false);
        boolean boolean83 = generator0.getUseCache();
        boolean boolean84 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setUseCache(true);
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator32, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin31.newInstance(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray48);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin59.newInstance((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setUseCache(true);
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator35, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin34.newInstance(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator0.setDelegates(objArray51);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        boolean boolean62 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator58.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator58.setNamingPolicy(namingPolicy65);
        boolean boolean67 = generator58.getAttemptLoad();
        java.lang.Object[] objArray68 = null;
        generator58.setDelegates(objArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setAttemptLoad(true);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        generator70.setDelegates(objArray79);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray90);
        generator70.setClasses(classArray90);
        generator58.setClasses(classArray90);
        generator58.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator58.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean10 = generator0.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator38.setDelegates((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        boolean boolean67 = generatorStrategy37.equals((java.lang.Object) classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator68.setStrategy(generatorStrategy70);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        generator68.setClasses(classArray77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator68.setStrategy(generatorStrategy81);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator83.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator85.getStrategy();
        generator83.setStrategy(generatorStrategy87);
        generator68.setStrategy(generatorStrategy87);
        generator68.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader92 = generator68.getClassLoader();
        java.lang.ClassLoader classLoader93 = generator68.getClassLoader();
        generator68.setAttemptLoad(false);
        boolean boolean96 = generator68.getAttemptLoad();
        boolean boolean97 = generatorStrategy37.equals((java.lang.Object) boolean96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator11.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator11.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator15.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator11.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator11.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        boolean boolean25 = generator0.getAttemptLoad();
        generator0.setStyle((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        boolean boolean64 = generator33.getUseCache();
        generator33.setStyle(1);
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator33.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass13 = mixin12.getClass();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator21, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray37);
        java.lang.Class<?> wildcardClass40 = mixin39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass13, wildcardClass40 };
        generator0.setClasses(classArray41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin49.newInstance((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        generator0.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin95 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        boolean boolean26 = generator13.getUseCache();
        generator13.setAttemptLoad(false);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator13.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator21.setClasses(classArray33);
        java.lang.ClassLoader classLoader35 = null;
        generator21.setClassLoader(classLoader35);
        java.lang.ClassLoader classLoader37 = generator21.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator21.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy38);
        boolean boolean40 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        generator4.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray13, (java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator32.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator32.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator32.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy36);
        generator28.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator28.setStrategy(generatorStrategy40);
        boolean boolean42 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator28.getStrategy();
        boolean boolean44 = namingPolicy27.equals((java.lang.Object) generator28);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator28.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        boolean boolean16 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.Class<?> wildcardClass20 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        boolean boolean56 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator57.getStrategy();
        generator57.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator63.getStrategy();
        generator57.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator57.getStrategy();
        generator0.setStrategy(generatorStrategy68);
        boolean boolean70 = generator0.getAttemptLoad();
        boolean boolean71 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        java.lang.Object obj24 = null;
        boolean boolean25 = namingPolicy23.equals(obj24);
        generator0.setNamingPolicy(namingPolicy23);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        boolean boolean30 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
        generator0.setAttemptLoad(true);
        generator0.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(mixin22);
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy39);
        generator7.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader42 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        generator44.setClasses(classArray64);
        generator44.setUseCache(true);
        generator44.setUseCache(false);
        java.lang.ClassLoader classLoader71 = generator44.getClassLoader();
        generator0.setClassLoader(classLoader71);
        generator0.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader75 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin mixin29 = generator10.create();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        generator10.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator49.getNamingPolicy();
        generator49.setAttemptLoad(false);
        generator49.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator62.setStrategy(generatorStrategy64);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        generator62.setClasses(classArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator62.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator62.getStrategy();
        generator49.setStrategy(generatorStrategy77);
        generator10.setStrategy(generatorStrategy77);
        boolean boolean80 = namingPolicy9.equals((java.lang.Object) generator10);
        boolean boolean81 = generator10.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin83 = generator10.create();
        generator10.setStyle(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader10 = null;
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        boolean boolean19 = generator17.getUseCache();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator17, true };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray16, (java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, (java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator42.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setUseCache(true);
        java.lang.Object[] objArray58 = new java.lang.Object[] { generator42, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin41.newInstance(objArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray68);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin69.newInstance((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        org.mockito.asm.ClassVisitor classVisitor87 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray62);
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getUseCache();
        generator85.setUseCache(true);
        boolean boolean89 = generator85.getUseCache();
        java.lang.ClassLoader classLoader90 = null;
        generator85.setClassLoader(classLoader90);
        generator85.setStyle(2);
        boolean boolean94 = generator85.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator85.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator85.getStrategy();
        generator0.setStrategy(generatorStrategy96);
        org.mockito.cglib.core.NamingPolicy namingPolicy98 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin99 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertNotNull(namingPolicy98);
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator38.getStrategy();
        generator38.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator38.setStrategy(generatorStrategy46);
        boolean boolean48 = namingPolicy37.equals((java.lang.Object) generator38);
        generator0.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        boolean boolean52 = generator50.getUseCache();
        generator50.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        boolean boolean57 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        generator15.setUseCache(false);
        generator15.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        boolean boolean46 = generator23.getUseCache();
        generator23.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray69);
        generator23.setClasses(classArray58);
        boolean boolean73 = generator23.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = generator23.getClassLoader();
        generator15.setClassLoader(classLoader74);
        generator6.setClassLoader(classLoader74);
        generator0.setClassLoader(classLoader74);
        boolean boolean78 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        generator0.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy52);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        boolean boolean64 = generator33.getUseCache();
        generator33.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator33.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator33.generateClass(classVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        boolean boolean19 = generator0.getUseCache();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator11.setNamingPolicy(namingPolicy18);
        boolean boolean20 = generator11.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator11.getStrategy();
        boolean boolean22 = namingPolicy10.equals((java.lang.Object) generatorStrategy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator23.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator31.getStrategy();
        generator31.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator31.getStrategy();
        generator23.setStrategy(generatorStrategy37);
        boolean boolean39 = namingPolicy10.equals((java.lang.Object) generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator49.setStrategy(generatorStrategy62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator49.getStrategy();
        generator42.setStrategy(generatorStrategy64);
        generator42.setAttemptLoad(false);
        java.lang.Class[] classArray68 = null;
        generator42.setClasses(classArray68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator42.getStrategy();
        boolean boolean71 = generator42.getUseCache();
        generator42.setAttemptLoad(false);
        org.mockito.cglib.core.Predicate predicate74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = namingPolicy10.getClassName("hi!", "hi!", (java.lang.Object) false, predicate74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        generator0.setStyle((int) (short) 1);
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        boolean boolean53 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        generator0.setDelegates(objArray48);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        boolean boolean55 = generator0.getUseCache();
        boolean boolean56 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        generator57.setUseCache(true);
        boolean boolean61 = generator57.getUseCache();
        generator57.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        generator57.setDelegates(objArray66);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray77);
        generator57.setClasses(classArray77);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator57.getNamingPolicy();
        generator57.setUseCache(true);
        java.lang.ClassLoader classLoader83 = generator57.getClassLoader();
        boolean boolean84 = generator57.getAttemptLoad();
        generator57.setAttemptLoad(true);
        boolean boolean87 = generator57.getAttemptLoad();
        java.lang.ClassLoader classLoader88 = generator57.getClassLoader();
        generator0.setClassLoader(classLoader88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        generator0.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin mixin54 = generator0.create();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin60 = generator0.create();
        java.lang.Class<?> wildcardClass61 = mixin60.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = generator0.create();
        java.lang.Class<?> wildcardClass52 = mixin51.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        boolean boolean26 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator16.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        generator16.setNamingPolicy(namingPolicy23);
        boolean boolean25 = generator16.getAttemptLoad();
        java.lang.Object[] objArray26 = null;
        generator16.setDelegates(objArray26);
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        generator16.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin15.newInstance((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator53.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setUseCache(true);
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator53, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(objArray69);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray69);
        java.lang.Class<?> wildcardClass76 = classArray37.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        java.lang.ClassLoader classLoader85 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        boolean boolean44 = namingPolicy20.equals((java.lang.Object) classArray41);
        generator13.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        generator46.setDelegates(objArray55);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray66);
        generator46.setClasses(classArray66);
        boolean boolean69 = generator46.getUseCache();
        generator46.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator46.getStrategy();
        boolean boolean73 = namingPolicy20.equals((java.lang.Object) generator46);
        generator46.setAttemptLoad(false);
        boolean boolean76 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator46.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator46.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy78);
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator28.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setAttemptLoad(true);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        generator43.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy60);
        generator28.setNamingPolicy(namingPolicy60);
        generator0.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        boolean boolean73 = generator71.getUseCache();
        java.lang.Object[] objArray75 = new java.lang.Object[] { generator71, true };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator78.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        generator0.setUseCache(true);
        boolean boolean21 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator14.getStrategy();
        generator14.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        boolean boolean20 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        boolean boolean24 = generator0.getAttemptLoad();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        generator0.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        generator6.setDelegates(objArray15);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray26);
        generator6.setClasses(classArray26);
        boolean boolean29 = namingPolicy5.equals((java.lang.Object) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator30.getNamingPolicy();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        boolean boolean48 = generator46.getUseCache();
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator46, true };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator53.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin70.newInstance((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray79);
        generator30.setDelegates((java.lang.Object[]) classArray63);
        boolean boolean83 = namingPolicy5.equals((java.lang.Object) generator30);
        org.mockito.cglib.proxy.Mixin mixin84 = generator30.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        boolean boolean26 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        generator11.setUseCache(true);
        generator11.setUseCache(false);
        generator11.setStyle(2);
        generator11.setAttemptLoad(true);
        boolean boolean42 = generator11.getUseCache();
        boolean boolean43 = generator11.getUseCache();
        generator11.setAttemptLoad(false);
        boolean boolean46 = generator11.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        boolean boolean18 = generator16.getUseCache();
        generator16.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator16.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator24.setNamingPolicy(namingPolicy29);
        generator24.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator24.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        java.lang.ClassLoader classLoader46 = null;
        generator44.setClassLoader(classLoader46);
        boolean boolean48 = generator44.getAttemptLoad();
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator44.setClasses(classArray56);
        generator35.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = generator35.create();
        org.mockito.cglib.proxy.Mixin mixin60 = generator35.create();
        boolean boolean61 = namingPolicy33.equals((java.lang.Object) mixin60);
        generator0.setNamingPolicy(namingPolicy33);
        java.lang.Object obj63 = null;
        boolean boolean64 = namingPolicy33.equals(obj63);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        generator27.setUseCache(true);
        generator27.setUseCache(false);
        generator27.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator27.getStrategy();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray72);
        boolean boolean75 = generatorStrategy56.equals((java.lang.Object) classArray64);
        generator0.setClasses(classArray64);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin80 = generator0.create();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator19, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator0.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator40.getStrategy();
        generator40.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        generator40.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator40.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader58 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(namingPolicy59);
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator9.setStrategy(generatorStrategy15);
        generator9.setAttemptLoad(true);
        generator9.setUseCache(false);
        boolean boolean21 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator22.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        boolean boolean44 = generator42.getUseCache();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator42, true };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray46);
        generator9.setDelegates((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray34);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        generator27.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        generator27.setDelegates((java.lang.Object[]) classArray56);
        generator0.setClasses(classArray56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader68 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass69 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator8.getStrategy();
        generator8.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.ClassGenerator classGenerator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray17 = generatorStrategy14.generate(classGenerator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        generator11.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator11.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = namingPolicy28.equals((java.lang.Object) classArray49);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray59);
        boolean boolean63 = namingPolicy28.equals((java.lang.Object) classArray59);
        generator11.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin77 = generator0.create();
        java.lang.ClassLoader classLoader78 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        java.lang.ClassLoader classLoader81 = null;
        generator79.setClassLoader(classLoader81);
        boolean boolean83 = generator79.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = null;
        generator79.setNamingPolicy(namingPolicy84);
        boolean boolean86 = generator79.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator79.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator79.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator79.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy89);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = generator29.getUseCache();
        generator29.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader55 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        generator0.setDelegates((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        generator0.setUseCache(true);
        boolean boolean25 = generator0.getUseCache();
        boolean boolean26 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(mixin28);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        generator32.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        generator32.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator32.getStrategy();
        generator0.setStrategy(generatorStrategy82);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getUseCache();
        java.lang.ClassLoader classLoader86 = null;
        generator84.setClassLoader(classLoader86);
        boolean boolean88 = generator84.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = null;
        generator84.setNamingPolicy(namingPolicy89);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator84.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy91);
        java.lang.Object obj93 = null;
        boolean boolean94 = namingPolicy91.equals(obj93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator19, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator0.setClasses(classArray38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        boolean boolean54 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        generator55.setDelegates(objArray64);
        generator41.setDelegates(objArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        generator68.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getUseCache();
        java.lang.ClassLoader classLoader82 = null;
        generator80.setClassLoader(classLoader82);
        boolean boolean84 = generator80.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator80.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy85);
        generator41.setNamingPolicy(namingPolicy85);
        generator41.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin90 = generator41.create();
        boolean boolean91 = namingPolicy40.equals((java.lang.Object) generator41);
        boolean boolean92 = generator41.getUseCache();
        boolean boolean93 = generator41.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator29.setStrategy(generatorStrategy42);
        generator29.setUseCache(false);
        boolean boolean46 = generator29.getAttemptLoad();
        generator29.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        generator55.setDelegates(objArray64);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray75);
        generator55.setClasses(classArray75);
        boolean boolean78 = namingPolicy54.equals((java.lang.Object) classArray75);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        generator29.setClasses(classArray75);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.ClassLoader classLoader83 = null;
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray89);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        generator27.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator27.getStrategy();
        boolean boolean53 = generator27.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator27.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy54);
        java.lang.ClassLoader classLoader56 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator6.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setUseCache(true);
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator6, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        java.lang.Class<?> wildcardClass30 = classArray28.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        generator23.setUseCache(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class<?> wildcardClass36 = mixin35.getClass();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        java.lang.ClassLoader classLoader46 = null;
        generator44.setClassLoader(classLoader46);
        boolean boolean48 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator44.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setUseCache(true);
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator44, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin43.newInstance(objArray60);
        java.lang.Class<?> wildcardClass63 = mixin62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass36, wildcardClass63 };
        generator23.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader70);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        boolean boolean7 = generator0.getUseCache();
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator28.getStrategy();
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin38.newInstance((java.lang.Object[]) classArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        boolean boolean58 = generator56.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator56, true };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator63.setDelegates((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray55);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        boolean boolean75 = generatorStrategy32.equals((java.lang.Object) classArray55);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator21.setStrategy(generatorStrategy27);
        generator21.setAttemptLoad(true);
        generator21.setUseCache(true);
        boolean boolean33 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator21.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator35.getNamingPolicy();
        generator35.setUseCache(false);
        boolean boolean39 = generatorStrategy34.equals((java.lang.Object) false);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator40.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator49.setClasses(classArray61);
        generator40.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        boolean boolean65 = generatorStrategy34.equals((java.lang.Object) mixin64);
        generator0.setStrategy(generatorStrategy34);
        java.lang.Object obj67 = null;
        boolean boolean68 = generatorStrategy34.equals(obj67);
        java.lang.Object obj69 = null;
        boolean boolean70 = generatorStrategy34.equals(obj69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator71.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator71.getStrategy();
        generator71.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator77.getStrategy();
        generator71.setStrategy(generatorStrategy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator71.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = null;
        generator71.setNamingPolicy(namingPolicy82);
        boolean boolean84 = generator71.getAttemptLoad();
        boolean boolean85 = generator71.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator71.getNamingPolicy();
        boolean boolean87 = generatorStrategy34.equals((java.lang.Object) generator71);
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator71.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        boolean boolean30 = generator26.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setUseCache(true);
        java.lang.Object[] objArray42 = new java.lang.Object[] { generator26, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator0.setDelegates(objArray42);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(namingPolicy49);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator25.getStrategy();
        java.lang.ClassLoader classLoader77 = generator25.getClassLoader();
        boolean boolean78 = generator25.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator25.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin42.newInstance((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader57 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator12.setAttemptLoad(false);
        java.lang.Class[] classArray38 = null;
        generator12.setClasses(classArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator12.getStrategy();
        boolean boolean41 = generator12.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin47.newInstance((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        boolean boolean67 = generator65.getUseCache();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator65, true };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator72.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator12.setDelegates((java.lang.Object[]) classArray64);
        generator0.setClasses(classArray64);
        java.lang.ClassLoader classLoader86 = null;
        generator0.setClassLoader(classLoader86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator8.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        generator8.setClasses(classArray17);
        boolean boolean21 = generator8.getUseCache();
        generator8.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin24 = generator8.create();
        boolean boolean25 = namingPolicy7.equals((java.lang.Object) generator8);
        java.lang.ClassLoader classLoader26 = generator8.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator37.setClassLoader(classLoader39);
        boolean boolean41 = generator37.getAttemptLoad();
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator37.setClasses(classArray49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        boolean boolean59 = generator57.getUseCache();
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator57, true };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray61);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin36.newInstance((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin30.newInstance((java.lang.Object[]) classArray67);
        generator0.setDelegates((java.lang.Object[]) classArray67);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader72 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classLoader72);
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator6.setClasses(classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator26, true };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray30);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin35 = mixin5.newInstance((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        java.lang.Class[] classArray32 = null;
        generator0.setClasses(classArray32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getUseCache();
        boolean boolean51 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator54.setClassLoader(classLoader59);
        generator54.setStyle(2);
        generator54.setAttemptLoad(false);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        boolean boolean73 = generator71.getUseCache();
        java.lang.Object[] objArray75 = new java.lang.Object[] { generator71, true };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator78.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator54.setDelegates((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean91 = generator0.getAttemptLoad();
        boolean boolean92 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator41.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setUseCache(true);
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator41, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin40.newInstance(objArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = mixin33.newInstance(objArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        generator0.setDelegates(objArray57);
        org.mockito.cglib.proxy.Mixin mixin64 = generator0.create();
        java.lang.Class<?> wildcardClass65 = mixin64.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        generator82.setUseCache(true);
        boolean boolean86 = generator82.getUseCache();
        generator82.setUseCache(true);
        generator82.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader91 = null;
        generator82.setClassLoader(classLoader91);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator82.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy93);
        generator0.setStyle((int) (byte) 1);
        boolean boolean97 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator22.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin38.newInstance((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin40 = generator0.create();
        java.lang.ClassLoader classLoader41 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classLoader41);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator13.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        boolean boolean35 = generator33.getUseCache();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator33, true };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray37);
        generator0.setDelegates((java.lang.Object[]) classArray25);
        java.lang.Object[] objArray42 = null;
        generator0.setDelegates(objArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        boolean boolean45 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        generator34.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator34.getStrategy();
        boolean boolean41 = namingPolicy33.equals((java.lang.Object) generator34);
        generator34.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass13 = mixin12.getClass();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator21, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray37);
        java.lang.Class<?> wildcardClass40 = mixin39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass13, wildcardClass40 };
        generator0.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator53.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin44.newInstance((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        generator14.setUseCache(false);
        generator14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        boolean boolean72 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = generator22.getClassLoader();
        generator14.setClassLoader(classLoader73);
        generator5.setClassLoader(classLoader73);
        generator0.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(namingPolicy79);
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin20 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator21.setDelegates((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin20.newInstance((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        boolean boolean28 = generator0.getAttemptLoad();
        boolean boolean29 = generator0.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin38.newInstance((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        java.lang.ClassLoader classLoader49 = null;
        generator47.setClassLoader(classLoader49);
        boolean boolean51 = generator47.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator47.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setUseCache(true);
        java.lang.Object[] objArray63 = new java.lang.Object[] { generator47, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator0.setDelegates((java.lang.Object[]) classArray66);
        boolean boolean70 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = generator20.getUseCache();
        generator20.setAttemptLoad(false);
        java.lang.ClassLoader classLoader46 = generator20.getClassLoader();
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray55);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setClasses(classArray59);
        boolean boolean61 = generator0.getUseCache();
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader63);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setUseCache(true);
        java.lang.Object[] objArray29 = new java.lang.Object[] { generator13, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin12.newInstance(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin5.newInstance(objArray29);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator49.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setUseCache(true);
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator49, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator30.setClasses(classArray68);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        boolean boolean71 = generator0.getUseCache();
        boolean boolean72 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray35);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin47.newInstance((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        boolean boolean67 = generator65.getUseCache();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator65, true };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator72.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.Class[] classArray6 = null;
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Object[] objArray15 = null;
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator17.setClassLoader(classLoader19);
        boolean boolean21 = generator17.getAttemptLoad();
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator17.setClasses(classArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        boolean boolean39 = generator37.getUseCache();
        java.lang.Object[] objArray41 = new java.lang.Object[] { generator37, true };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray41);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray41);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray41);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator0.setDelegates((java.lang.Object[]) classArray48);
        boolean boolean51 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        generator23.setUseCache(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class<?> wildcardClass36 = mixin35.getClass();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        java.lang.ClassLoader classLoader46 = null;
        generator44.setClassLoader(classLoader46);
        boolean boolean48 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator44.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setUseCache(true);
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator44, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin43.newInstance(objArray60);
        java.lang.Class<?> wildcardClass63 = mixin62.getClass();
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass36, wildcardClass63 };
        generator23.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        boolean boolean71 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass72 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        boolean boolean64 = generator33.getUseCache();
        boolean boolean65 = generator33.getAttemptLoad();
        boolean boolean66 = generator33.getUseCache();
        generator33.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator33.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        boolean boolean34 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator30.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator30.setNamingPolicy(namingPolicy37);
        boolean boolean39 = generator30.getAttemptLoad();
        java.lang.Object[] objArray40 = null;
        generator30.setDelegates(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        generator30.setClasses(classArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray76);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, (java.lang.Object[]) classArray90);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray94);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray94);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        boolean boolean8 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        generator4.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin mixin23 = generator4.create();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator32.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray39);
        generator4.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        generator49.setDelegates(objArray58);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray69);
        generator49.setClasses(classArray69);
        boolean boolean72 = namingPolicy48.equals((java.lang.Object) classArray69);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray79);
        boolean boolean83 = namingPolicy48.equals((java.lang.Object) classArray79);
        generator4.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        boolean boolean88 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator16.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setUseCache(true);
        java.lang.Object[] objArray32 = new java.lang.Object[] { generator16, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin15.newInstance(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin8.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class<?> wildcardClass40 = classArray37.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator26, true };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        generator33.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray52);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin53.newInstance((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray91);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        boolean boolean88 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin93 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        boolean boolean29 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        generator0.setStyle((int) (short) 1);
        generator0.setUseCache(false);
        boolean boolean53 = generator0.getAttemptLoad();
        boolean boolean54 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator15.setDelegates(objArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator35.getNamingPolicy();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        generator35.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin mixin53 = generator35.create();
        java.lang.ClassLoader classLoader54 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        generator55.setDelegates(objArray64);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray75);
        generator55.setClasses(classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        generator35.setClasses(classArray75);
        generator15.setDelegates((java.lang.Object[]) classArray75);
        generator0.setClasses(classArray75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator11.setClasses(classArray23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        boolean boolean33 = generator31.getUseCache();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator31, true };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray23);
        boolean boolean41 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator46.setClasses(classArray58);
        generator37.setClasses(classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = generator0.create();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin62);
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin mixin74 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        boolean boolean78 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin79 = generator0.create();
        java.lang.ClassLoader classLoader80 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader81 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        generator0.setStyle(0);
        boolean boolean73 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy77);
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        boolean boolean29 = generator0.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin35.newInstance((java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        boolean boolean55 = generator53.getUseCache();
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator53, true };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        generator60.setDelegates((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator0.setDelegates((java.lang.Object[]) classArray52);
        boolean boolean73 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean34 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator38.setDelegates((java.lang.Object[]) classArray59);
        generator38.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator65.setClassLoader(classLoader67);
        boolean boolean69 = generator65.getAttemptLoad();
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator65.setClasses(classArray77);
        java.lang.ClassLoader classLoader79 = null;
        generator65.setClassLoader(classLoader79);
        boolean boolean81 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator65.getStrategy();
        generator38.setStrategy(generatorStrategy82);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator38.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator7.setClassLoader(classLoader12);
        generator7.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator7.getStrategy();
        boolean boolean18 = generatorStrategy16.equals((java.lang.Object) 0L);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        generator19.setClasses(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator19.getNamingPolicy();
        generator19.setUseCache(true);
        java.lang.ClassLoader classLoader45 = generator19.getClassLoader();
        boolean boolean46 = generator19.getAttemptLoad();
        generator19.setAttemptLoad(true);
        boolean boolean49 = generator19.getAttemptLoad();
        boolean boolean50 = generatorStrategy16.equals((java.lang.Object) generator19);
        java.lang.ClassLoader classLoader51 = generator19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator19.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.ClassGenerator classGenerator54 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray55 = generatorStrategy52.generate(classGenerator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        boolean boolean35 = namingPolicy11.equals((java.lang.Object) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { 1L, '4', classArray32, generator36, classArray68 };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        boolean boolean28 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        boolean boolean34 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator30.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator30.setNamingPolicy(namingPolicy37);
        boolean boolean39 = generator30.getAttemptLoad();
        java.lang.Object[] objArray40 = null;
        generator30.setDelegates(objArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator30.getStrategy();
        generator30.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator55.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray70);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = mixin71.newInstance((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        generator0.setClasses(classArray84);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator0.getNamingPolicy();
        boolean boolean87 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        generator0.setDelegates((java.lang.Object[]) classArray16);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin20 = generator0.create();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = mixin30.newInstance((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        boolean boolean50 = generator48.getUseCache();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator48, true };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator55.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray47);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        boolean boolean71 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = null;
        generator67.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        generator74.setUseCache(true);
        boolean boolean78 = generator74.getUseCache();
        generator74.setUseCache(true);
        java.lang.Object[] objArray83 = new java.lang.Object[] { generator67, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray83);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        generator0.setClasses(classArray89);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator0.getNamingPolicy();
        generator0.setStyle(1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(namingPolicy91);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        boolean boolean33 = generator0.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        boolean boolean42 = generator40.getUseCache();
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator40, true };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator47.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray39);
        generator0.setDelegates((java.lang.Object[]) classArray39);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        generator7.setUseCache(false);
        generator7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        boolean boolean65 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = generator15.getClassLoader();
        generator7.setClassLoader(classLoader66);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator7.setDelegates((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader82 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        java.lang.Class[] classArray84 = null;
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray84, objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        generator9.setUseCache(true);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader36 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        boolean boolean45 = generator43.getUseCache();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator43, true };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator50.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray60);
        java.lang.ClassLoader classLoader62 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray83);
        generator0.setClassLoader(classLoader36);
        generator0.setStyle((int) (short) 1);
        boolean boolean91 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        boolean boolean76 = generator25.getAttemptLoad();
        boolean boolean77 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator25.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator79.getStrategy();
        generator79.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator85.getStrategy();
        generator79.setStrategy(generatorStrategy87);
        generator79.setUseCache(true);
        boolean boolean91 = generator79.getUseCache();
        boolean boolean92 = generator79.getAttemptLoad();
        boolean boolean93 = generatorStrategy78.equals((java.lang.Object) generator79);
        generator79.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator44.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator44.getStrategy();
        generator37.setStrategy(generatorStrategy59);
        generator0.setStrategy(generatorStrategy59);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(generatorStrategy59);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        boolean boolean72 = generator59.getUseCache();
        generator59.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin75 = generator59.create();
        java.lang.ClassLoader classLoader76 = generator59.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin77 = generator59.create();
        generator59.setAttemptLoad(true);
        org.mockito.cglib.core.Predicate predicate80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = namingPolicy55.getClassName("", "", (java.lang.Object) generator59, predicate80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass19 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        boolean boolean39 = generator16.getUseCache();
        generator16.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray62);
        generator16.setClasses(classArray51);
        boolean boolean66 = generator16.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = generator16.getClassLoader();
        java.lang.ClassLoader classLoader68 = null;
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray74);
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray83);
        generator0.setDelegates(objArray83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator19, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator0.setClasses(classArray38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        boolean boolean54 = generator41.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        generator55.setDelegates(objArray64);
        generator41.setDelegates(objArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        generator68.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getUseCache();
        java.lang.ClassLoader classLoader82 = null;
        generator80.setClassLoader(classLoader82);
        boolean boolean84 = generator80.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator80.getNamingPolicy();
        generator68.setNamingPolicy(namingPolicy85);
        generator41.setNamingPolicy(namingPolicy85);
        generator41.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin90 = generator41.create();
        boolean boolean91 = namingPolicy40.equals((java.lang.Object) generator41);
        generator41.setUseCache(true);
        generator41.setStyle((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        boolean boolean17 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        boolean boolean64 = generator33.getUseCache();
        generator33.setUseCache(false);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        boolean boolean76 = generator74.getUseCache();
        java.lang.Object[] objArray78 = new java.lang.Object[] { generator74, true };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray78);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator81.setDelegates((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        generator33.setDelegates((java.lang.Object[]) classArray73);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator28.getStrategy();
        java.lang.ClassLoader classLoader33 = null;
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin41.newInstance((java.lang.Object[]) classArray47);
        boolean boolean50 = generatorStrategy32.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator51.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator51.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator55.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator55.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator55.getNamingPolicy();
        generator51.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator51.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator51.getStrategy();
        boolean boolean64 = generatorStrategy32.equals((java.lang.Object) generatorStrategy63);
        generator0.setStrategy(generatorStrategy32);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator8.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        generator24.setUseCache(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class<?> wildcardClass37 = mixin36.getClass();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator45.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setUseCache(true);
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator45, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin44.newInstance(objArray61);
        java.lang.Class<?> wildcardClass64 = mixin63.getClass();
        java.lang.Class[] classArray65 = new java.lang.Class[] { wildcardClass37, wildcardClass64 };
        generator24.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin23.newInstance((java.lang.Object[]) classArray70);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        generator6.setDelegates(objArray15);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray26);
        generator6.setClasses(classArray26);
        boolean boolean29 = namingPolicy5.equals((java.lang.Object) classArray26);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin30 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(namingPolicy31);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean7 = generator0.getUseCache();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        boolean boolean33 = generator10.getUseCache();
        generator10.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator36.setClasses(classArray45);
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray56);
        generator10.setClasses(classArray45);
        boolean boolean60 = generator10.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray61 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator13.setNamingPolicy(namingPolicy20);
        boolean boolean22 = generator13.getAttemptLoad();
        java.lang.Object[] objArray23 = null;
        generator13.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator25.getStrategy();
        generator25.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator35.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator35.getStrategy();
        generator25.setStrategy(generatorStrategy50);
        generator13.setStrategy(generatorStrategy50);
        java.lang.Object obj53 = null;
        boolean boolean54 = generatorStrategy50.equals(obj53);
        generator0.setStrategy(generatorStrategy50);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator58.setStrategy(generatorStrategy71);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator58.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator58.getClassLoader();
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.ClassLoader classLoader83 = null;
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray80, objArray86);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, (java.lang.Object[]) classArray92);
        generator0.setClassLoader(classLoader74);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator42.setStrategy(generatorStrategy55);
        generator42.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator42.getStrategy();
        boolean boolean61 = generator42.getAttemptLoad();
        generator42.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator42.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator42.getStrategy();
        generator0.setStrategy(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin13 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin8.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator17.setClassLoader(classLoader19);
        boolean boolean21 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator17.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setUseCache(true);
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator17, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Mixin mixin58 = generator39.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator39.getStrategy();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray66);
        generator39.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin72 = mixin38.newInstance((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator6.getNamingPolicy();
        generator6.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator6.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator6.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean20 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        boolean boolean22 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean16 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator0.setStrategy(generatorStrategy12);
        boolean boolean14 = generator0.getUseCache();
        generator0.setStyle(0);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        boolean boolean39 = generator0.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin46.newInstance((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        generator59.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = null;
        generator59.setNamingPolicy(namingPolicy66);
        boolean boolean68 = generator59.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy69);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        boolean boolean14 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        boolean boolean39 = namingPolicy15.equals((java.lang.Object) classArray36);
        generator8.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator41.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator41.setNamingPolicy(namingPolicy48);
        boolean boolean50 = generator41.getAttemptLoad();
        java.lang.Object[] objArray51 = null;
        generator41.setDelegates(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        generator53.setDelegates(objArray62);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray73);
        generator53.setClasses(classArray73);
        generator41.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        boolean boolean78 = namingPolicy15.equals((java.lang.Object) classArray73);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(mixin22);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        generator19.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator40.setDelegates(objArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        generator40.setClasses(classArray60);
        boolean boolean63 = namingPolicy39.equals((java.lang.Object) classArray60);
        generator32.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator65.setClassLoader(classLoader67);
        boolean boolean69 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator65.setStrategy(generatorStrategy71);
        generator65.setAttemptLoad(true);
        generator65.setUseCache(true);
        boolean boolean77 = generator65.getUseCache();
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        generator65.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean88 = namingPolicy39.equals((java.lang.Object) generator65);
        generator25.setNamingPolicy(namingPolicy39);
        generator19.setNamingPolicy(namingPolicy39);
        generator0.setNamingPolicy(namingPolicy39);
        boolean boolean92 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setStyle(0);
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator28.setClasses(classArray40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        boolean boolean50 = generator48.getUseCache();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator48, true };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray63);
        generator0.setClasses(classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator70.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        generator70.setClasses(classArray79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        generator70.setStrategy(generatorStrategy83);
        generator70.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator70.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator70.getStrategy();
        boolean boolean89 = generator70.getAttemptLoad();
        generator70.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator70.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator70.getNamingPolicy();
        boolean boolean94 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader95 = generator70.getClassLoader();
        generator0.setClassLoader(classLoader95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(classLoader95);
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        generator14.setUseCache(true);
        generator14.setUseCache(false);
        java.lang.ClassLoader classLoader41 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader41);
        boolean boolean43 = generator0.getUseCache();
        boolean boolean44 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin45 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        generator46.setDelegates(objArray55);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray66);
        generator46.setClasses(classArray66);
        boolean boolean69 = generator46.getUseCache();
        generator46.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator46.setStrategy(generatorStrategy72);
        generator46.setUseCache(true);
        java.lang.ClassLoader classLoader76 = generator46.getClassLoader();
        java.lang.ClassLoader classLoader77 = null;
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray83);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        generator46.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin mixin91 = mixin45.newInstance((java.lang.Object[]) classArray83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.ClassLoader classLoader54 = null;
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator67.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator67.getNamingPolicy();
        generator67.setAttemptLoad(false);
        generator67.setUseCache(true);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        generator67.setClasses(classArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray87);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        generator0.setClasses(classArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        boolean boolean18 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        boolean boolean21 = generator19.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray28);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator53.setStrategy(generatorStrategy66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator53.getStrategy();
        generator46.setStrategy(generatorStrategy68);
        generator34.setStrategy(generatorStrategy68);
        generator34.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator34.getStrategy();
        generator19.setStrategy(generatorStrategy73);
        generator0.setStrategy(generatorStrategy73);
        java.lang.Class<?> wildcardClass76 = generatorStrategy73.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        boolean boolean21 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        generator12.setUseCache(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.Class<?> wildcardClass25 = mixin24.getClass();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator33.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setUseCache(true);
        java.lang.Object[] objArray49 = new java.lang.Object[] { generator33, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin32.newInstance(objArray49);
        java.lang.Class<?> wildcardClass52 = mixin51.getClass();
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass25, wildcardClass52 };
        generator12.setClasses(classArray53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        boolean boolean61 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator57.setStrategy(generatorStrategy63);
        generator57.setAttemptLoad(true);
        generator57.setUseCache(true);
        boolean boolean69 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator57.getStrategy();
        generator0.setStrategy(generatorStrategy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator72.setStrategy(generatorStrategy74);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        generator72.setClasses(classArray81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = null;
        generator72.setStrategy(generatorStrategy85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator72.getNamingPolicy();
        boolean boolean88 = generatorStrategy70.equals((java.lang.Object) namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin mixin20 = generator0.create();
        boolean boolean21 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator5.setClassLoader(classLoader10);
        generator5.setStyle(2);
        generator5.setUseCache(true);
        boolean boolean16 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator21.getStrategy();
        generator19.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray50);
        generator30.setClasses(classArray50);
        boolean boolean53 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator30.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator30.getStrategy();
        boolean boolean56 = generatorStrategy28.equals((java.lang.Object) generator30);
        generator5.setStrategy(generatorStrategy28);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        boolean boolean62 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setAttemptLoad(true);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        generator64.setDelegates(objArray73);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, (java.lang.Object[]) classArray84);
        generator64.setClasses(classArray84);
        boolean boolean87 = namingPolicy63.equals((java.lang.Object) classArray84);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        generator5.setClasses(classArray84);
        java.lang.ClassLoader classLoader90 = generator5.getClassLoader();
        generator0.setClassLoader(classLoader90);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.Object[] objArray95 = null;
        generator0.setDelegates(objArray95);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        boolean boolean25 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        generator35.setClasses(classArray55);
        boolean boolean58 = namingPolicy34.equals((java.lang.Object) classArray55);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray65);
        boolean boolean69 = namingPolicy34.equals((java.lang.Object) classArray65);
        generator0.setClasses(classArray65);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader73 = generator0.getClassLoader();
        boolean boolean74 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass75 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        generator15.setUseCache(true);
        generator15.setUseCache(false);
        java.lang.ClassLoader classLoader42 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator45.setNamingPolicy(namingPolicy50);
        java.lang.ClassLoader classLoader52 = null;
        generator45.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator45.setStrategy(generatorStrategy55);
        generator45.setAttemptLoad(true);
        generator45.setAttemptLoad(true);
        boolean boolean61 = generator45.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator45.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator65.getStrategy();
        generator63.setStrategy(generatorStrategy72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator63.getStrategy();
        generator45.setStrategy(generatorStrategy74);
        generator0.setStrategy(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator8.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        generator8.setClasses(classArray17);
        boolean boolean21 = generator8.getUseCache();
        generator8.setAttemptLoad(false);
        generator8.setAttemptLoad(false);
        boolean boolean26 = generator8.getUseCache();
        java.lang.ClassLoader classLoader27 = generator8.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        boolean boolean41 = generator28.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        generator28.setDelegates(objArray51);
        generator28.setStyle(2);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        generator28.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin65.newInstance((java.lang.Object[]) classArray71);
        generator8.setDelegates((java.lang.Object[]) classArray71);
        boolean boolean77 = generatorStrategy7.equals((java.lang.Object) classArray71);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean88 = generator87.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator87.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator87.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator87.getStrategy();
        boolean boolean92 = generator87.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator87.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        java.lang.ClassLoader classLoader95 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(classLoader95);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator13.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        generator52.setDelegates(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        generator13.setDelegates(objArray61);
        org.mockito.cglib.proxy.Mixin mixin67 = generator13.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator13.setStrategy(generatorStrategy68);
        generator13.setAttemptLoad(true);
        generator13.setAttemptLoad(true);
        generator13.setUseCache(true);
        boolean boolean76 = generatorStrategy12.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        boolean boolean13 = generator11.getUseCache();
        generator11.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator17.setClassLoader(classLoader19);
        generator17.setUseCache(false);
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader76 = generator25.getClassLoader();
        generator17.setClassLoader(classLoader76);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray80);
        generator11.setClassLoader(classLoader76);
        generator0.setClassLoader(classLoader76);
        boolean boolean87 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator25.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        generator38.setClasses(classArray58);
        boolean boolean61 = generator38.getUseCache();
        generator38.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray84);
        generator38.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray73);
        generator0.setDelegates((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin90 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        generator0.setClassLoader(classLoader11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        generator0.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        generator22.setClassLoader(classLoader26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        generator22.setClasses(classArray35);
        boolean boolean39 = generator22.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray40 = generatorStrategy20.generate((org.mockito.cglib.core.ClassGenerator) generator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = generator20.getUseCache();
        generator20.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator20.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator50.getStrategy();
        generator48.setStrategy(generatorStrategy57);
        generator20.setStrategy(generatorStrategy57);
        generator0.setStrategy(generatorStrategy57);
        org.mockito.cglib.proxy.Mixin mixin61 = generator0.create();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(mixin61);
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        boolean boolean46 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator12.setClasses(classArray24);
        generator12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator47.setClasses(classArray56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator47.setStrategy(generatorStrategy60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator47.getStrategy();
        generator40.setStrategy(generatorStrategy62);
        generator28.setStrategy(generatorStrategy62);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray80);
        boolean boolean82 = generatorStrategy62.equals((java.lang.Object) mixin81);
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin81.newInstance((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        generator12.setDelegates((java.lang.Object[]) classArray90);
        boolean boolean92 = namingPolicy11.equals((java.lang.Object) generator12);
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator12.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        java.lang.Object obj40 = null;
        boolean boolean41 = namingPolicy39.equals(obj40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = generator42.getUseCache();
        generator42.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator42.setStrategy(generatorStrategy68);
        generator42.setUseCache(true);
        generator42.setAttemptLoad(true);
        boolean boolean74 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator42.getNamingPolicy();
        generator42.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator42.getNamingPolicy();
        boolean boolean79 = namingPolicy39.equals((java.lang.Object) namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        generator14.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        generator6.setStrategy(generatorStrategy20);
        boolean boolean22 = namingPolicy5.equals((java.lang.Object) generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator23.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setUseCache(true);
        generator32.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator32.getStrategy();
        generator23.setStrategy(generatorStrategy41);
        boolean boolean43 = namingPolicy5.equals((java.lang.Object) generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = generator11.getUseCache();
        generator11.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray57);
        generator11.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator61.setClassLoader(classLoader63);
        boolean boolean65 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator68.setDelegates((java.lang.Object[]) classArray75);
        boolean boolean77 = namingPolicy66.equals((java.lang.Object) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin10.newInstance((java.lang.Object[]) classArray75);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray39 = null;
        generator0.setClasses(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        generator0.setDelegates((java.lang.Object[]) classArray54);
        generator0.setUseCache(false);
        boolean boolean60 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = generator11.getUseCache();
        generator11.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray57);
        generator11.setClasses(classArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator11.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator11.getStrategy();
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        java.lang.ClassLoader classLoader72 = null;
        generator70.setClassLoader(classLoader72);
        boolean boolean74 = generator70.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = null;
        generator70.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        generator77.setUseCache(true);
        boolean boolean81 = generator77.getUseCache();
        generator77.setUseCache(true);
        java.lang.Object[] objArray86 = new java.lang.Object[] { generator70, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin69.newInstance(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator11.setDelegates((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray89);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        java.lang.Object obj24 = null;
        boolean boolean25 = namingPolicy23.equals(obj24);
        generator0.setNamingPolicy(namingPolicy23);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        boolean boolean23 = generator21.getUseCache();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator21, true };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator0.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin33 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = generator29.getUseCache();
        generator29.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        generator29.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray64);
        boolean boolean80 = namingPolicy14.equals((java.lang.Object) mixin79);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getUseCache();
        generator81.setUseCache(true);
        boolean boolean85 = generator81.getUseCache();
        generator81.setUseCache(true);
        generator81.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator81.getStrategy();
        boolean boolean91 = namingPolicy14.equals((java.lang.Object) generatorStrategy90);
        generator0.setNamingPolicy(namingPolicy14);
        boolean boolean93 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin94 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(1);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classArray31);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        boolean boolean33 = generator31.getUseCache();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator31, true };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader40 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator51.setClasses(classArray63);
        generator42.setClasses(classArray63);
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator41, generator42, (short) -1 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.Object[] objArray8 = null;
        generator0.setDelegates(objArray8);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator12.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        java.lang.ClassLoader classLoader74 = null;
        generator72.setClassLoader(classLoader74);
        boolean boolean76 = generator72.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = null;
        generator72.setNamingPolicy(namingPolicy77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        generator79.setUseCache(true);
        boolean boolean83 = generator79.getUseCache();
        generator79.setUseCache(true);
        java.lang.Object[] objArray88 = new java.lang.Object[] { generator72, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator12.setClasses(classArray91);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator12.getNamingPolicy();
        java.lang.ClassLoader classLoader94 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader94);
        boolean boolean96 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray63);
        boolean boolean65 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin69 = generator0.create();
        generator0.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(mixin69);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        generator12.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator12.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        java.lang.ClassLoader classLoader27 = null;
        generator22.setClassLoader(classLoader27);
        generator22.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator22.getNamingPolicy();
        boolean boolean33 = namingPolicy21.equals((java.lang.Object) generator22);
        java.lang.Class<?> wildcardClass34 = namingPolicy21.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setClasses(classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = generator0.create();
        boolean boolean71 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray48);
        generator28.setClasses(classArray48);
        boolean boolean51 = namingPolicy27.equals((java.lang.Object) classArray48);
        generator20.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        generator53.setDelegates(objArray62);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray73);
        generator53.setClasses(classArray73);
        boolean boolean76 = generator53.getUseCache();
        generator53.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator53.getStrategy();
        boolean boolean80 = namingPolicy27.equals((java.lang.Object) generator53);
        org.mockito.cglib.proxy.Mixin mixin81 = generator53.create();
        boolean boolean82 = namingPolicy19.equals((java.lang.Object) generator53);
        generator53.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator20.getStrategy();
        generator18.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator18.setDelegates(objArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin37 = generator18.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator18.getStrategy();
        java.lang.ClassLoader classLoader39 = generator18.getClassLoader();
        boolean boolean40 = namingPolicy17.equals((java.lang.Object) generator18);
        boolean boolean41 = generator18.getAttemptLoad();
        boolean boolean42 = generator18.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setAttemptLoad(false);
        boolean boolean29 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        boolean boolean34 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator77.getStrategy();
        generator70.setStrategy(generatorStrategy81);
        generator0.setStrategy(generatorStrategy81);
        boolean boolean84 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin19.newInstance((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        java.lang.ClassLoader classLoader53 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader53);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray44);
        generator24.setClasses(classArray44);
        boolean boolean47 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator49.setDelegates((java.lang.Object[]) classArray56);
        boolean boolean58 = generatorStrategy48.equals((java.lang.Object) classArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        generator0.setClasses(classArray59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator0.getStrategy();
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        boolean boolean85 = generator0.getUseCache();
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        boolean boolean87 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin42.newInstance((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = generator11.getUseCache();
        generator11.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray57);
        generator11.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator61.setClassLoader(classLoader63);
        boolean boolean65 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy66);
        generator9.setNamingPolicy(namingPolicy66);
        generator9.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator9.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader73 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader18);
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        boolean boolean19 = generator17.getUseCache();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator17, true };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray16, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray54);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        java.lang.ClassLoader classLoader27 = null;
        generator25.setClassLoader(classLoader27);
        boolean boolean29 = generator25.getAttemptLoad();
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator25.setClasses(classArray37);
        java.lang.ClassLoader classLoader39 = null;
        generator25.setClassLoader(classLoader39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator25.setStrategy(generatorStrategy41);
        generator25.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = generatorStrategy24.generate((org.mockito.cglib.core.ClassGenerator) generator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray16);
        generator0.setClasses(classArray17);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray25);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin31.newInstance((java.lang.Object[]) classArray39);
        generator0.setDelegates((java.lang.Object[]) classArray39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        generator15.setUseCache(true);
        boolean boolean29 = generator15.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin30 = generator15.create();
        generator15.setUseCache(false);
        boolean boolean33 = namingPolicy14.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        java.lang.Class[] classArray52 = null;
        generator27.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator54.getStrategy();
        generator27.setStrategy(generatorStrategy79);
        generator0.setStrategy(generatorStrategy79);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader83 = null;
        generator0.setClassLoader(classLoader83);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(namingPolicy82);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        generator0.setDelegates(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        generator27.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator27.setStrategy(generatorStrategy53);
        generator27.setUseCache(true);
        java.lang.ClassLoader classLoader57 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader57);
        java.lang.Object[] objArray59 = null;
        generator0.setDelegates(objArray59);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader64 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = generator65.getUseCache();
        generator65.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator65.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator65.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator27.getNamingPolicy();
        generator27.setAttemptLoad(false);
        generator27.setUseCache(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin26.newInstance((java.lang.Object[]) classArray47);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        generator17.setClasses(classArray37);
        boolean boolean40 = generator17.getUseCache();
        generator17.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator43.setClasses(classArray52);
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray63);
        generator17.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        boolean boolean71 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy72);
        generator15.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator15.setStrategy(generatorStrategy75);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray82, objArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator15.setDelegates(objArray88);
        generator0.setDelegates(objArray88);
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        boolean boolean88 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(classLoader91);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator60.setStrategy(generatorStrategy62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator60.setClasses(classArray69);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        generator0.setAttemptLoad(true);
        boolean boolean87 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        generator25.setUseCache(true);
        java.lang.ClassLoader classLoader50 = generator25.getClassLoader();
        generator0.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray57);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator34.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin51.newInstance((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = mixin45.newInstance((java.lang.Object[]) classArray89);
        generator0.setClasses(classArray89);
        org.mockito.cglib.proxy.Mixin mixin95 = generator0.create();
        generator0.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin98 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        generator13.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator13.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray48);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray67);
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator15.getStrategy();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        generator15.setDelegates(objArray68);
        boolean boolean72 = generator15.getAttemptLoad();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader75 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setStyle((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator28.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = generator28.getClassLoader();
        generator0.setClassLoader(classLoader43);
        org.mockito.cglib.proxy.Mixin mixin45 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(mixin45);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator9.setStrategy(generatorStrategy22);
        generator9.setUseCache(false);
        boolean boolean26 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = mixin33.newInstance((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator45.setClasses(classArray54);
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray76);
        generator0.setClasses(classArray76);
        boolean boolean79 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator0.getStrategy();
        boolean boolean87 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin88 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        boolean boolean14 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = null;
        generator10.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setUseCache(true);
        java.lang.Object[] objArray26 = new java.lang.Object[] { generator10, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator0.setDelegates((java.lang.Object[]) classArray29);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle(2);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        boolean boolean31 = generator0.getAttemptLoad();
        boolean boolean32 = generator0.getUseCache();
        boolean boolean33 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator34.setDelegates((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        generator34.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator34.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin46 = generator34.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator34.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator48.getStrategy();
        generator48.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator54.getStrategy();
        generator48.setStrategy(generatorStrategy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator48.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator48.setNamingPolicy(namingPolicy59);
        boolean boolean61 = generator48.getAttemptLoad();
        boolean boolean62 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        boolean boolean66 = generator64.getAttemptLoad();
        boolean boolean67 = generator64.getAttemptLoad();
        boolean boolean68 = namingPolicy63.equals((java.lang.Object) boolean67);
        boolean boolean69 = generatorStrategy47.equals((java.lang.Object) namingPolicy63);
        generator0.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator20.getStrategy();
        generator18.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator18.setDelegates(objArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin37 = generator18.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator18.getStrategy();
        java.lang.ClassLoader classLoader39 = generator18.getClassLoader();
        boolean boolean40 = namingPolicy17.equals((java.lang.Object) generator18);
        java.lang.Class<?> wildcardClass41 = namingPolicy17.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        generator9.setUseCache(true);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader36 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        boolean boolean45 = generator43.getUseCache();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator43, true };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator50.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray60);
        java.lang.ClassLoader classLoader62 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray83);
        generator0.setClassLoader(classLoader36);
        generator0.setStyle((int) (short) 1);
        boolean boolean91 = generator0.getUseCache();
        java.lang.ClassLoader classLoader92 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass93 = classLoader92.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        boolean boolean14 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator12.getStrategy();
        boolean boolean16 = generatorStrategy11.equals((java.lang.Object) generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        boolean boolean29 = generatorStrategy15.equals((java.lang.Object) mixin28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        boolean boolean34 = generator30.getAttemptLoad();
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator30.setClasses(classArray42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        boolean boolean52 = generator50.getUseCache();
        java.lang.Object[] objArray54 = new java.lang.Object[] { generator50, true };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        boolean boolean67 = generator65.getUseCache();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator65, true };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator72.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray79);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin85 = mixin28.newInstance((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        java.lang.ClassLoader classLoader88 = null;
        java.lang.Object[] objArray95 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses(objArray95);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, (java.lang.Object[]) classArray96);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray96);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.create(classArray84, (java.lang.Object[]) classArray98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        boolean boolean71 = generator69.getUseCache();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator69, true };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator76.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray68);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator44.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator44.getStrategy();
        generator37.setStrategy(generatorStrategy59);
        generator0.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy62);
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator8.getNamingPolicy();
        generator8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator8.getNamingPolicy();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        boolean boolean29 = generator27.getUseCache();
        java.lang.Object[] objArray31 = new java.lang.Object[] { generator27, true };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator34.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator52.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setUseCache(true);
        java.lang.Object[] objArray68 = new java.lang.Object[] { generator52, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin51.newInstance(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray68);
        boolean boolean73 = namingPolicy19.equals((java.lang.Object) classArray41);
        generator0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy75);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray62);
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin81 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin77 = generator0.create();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator33.getNamingPolicy();
        generator33.setUseCache(true);
        boolean boolean67 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator33.setStrategy(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setUseCache(true);
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator35, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin34.newInstance(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator0.setDelegates(objArray51);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin57 = generator0.create();
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator66.setDelegates((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        generator0.setClasses(classArray76);
        boolean boolean78 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        boolean boolean18 = generator0.getUseCache();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        boolean boolean20 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        boolean boolean46 = generator23.getUseCache();
        generator23.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray69);
        generator23.setClasses(classArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator23.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray79, objArray85);
        boolean boolean89 = namingPolicy73.equals((java.lang.Object) objArray85);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray85);
        boolean boolean91 = namingPolicy21.equals((java.lang.Object) classLoader22);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setStyle((int) (short) 0);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator15.getStrategy();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = mixin25.newInstance((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        boolean boolean45 = generator43.getUseCache();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator43, true };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator50.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        boolean boolean62 = generatorStrategy19.equals((java.lang.Object) classArray42);
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        boolean boolean82 = generatorStrategy19.equals((java.lang.Object) classArray78);
        generator0.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        boolean boolean72 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator0.getStrategy();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        generator0.setDelegates((java.lang.Object[]) classArray72);
        boolean boolean77 = generator0.getAttemptLoad();
        boolean boolean78 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        boolean boolean20 = generator7.getUseCache();
        generator7.setAttemptLoad(false);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator31.setDelegates((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        generator7.setClasses(classArray41);
        java.lang.ClassLoader classLoader43 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader43);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader47 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setAttemptLoad(true);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        generator48.setDelegates(objArray57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray68);
        generator48.setClasses(classArray68);
        boolean boolean71 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator48.getStrategy();
        boolean boolean73 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator48.getStrategy();
        java.lang.Object obj75 = null;
        boolean boolean76 = generatorStrategy74.equals(obj75);
        generator0.setStrategy(generatorStrategy74);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator12.getNamingPolicy();
        generator12.setAttemptLoad(false);
        generator12.setUseCache(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        generator0.setClasses(classArray32);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(generatorStrategy39);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator77.getStrategy();
        generator70.setStrategy(generatorStrategy81);
        generator0.setStrategy(generatorStrategy81);
        java.lang.ClassLoader classLoader84 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classLoader84);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        boolean boolean28 = generator0.getUseCache();
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator30.setStrategy(generatorStrategy32);
        boolean boolean34 = generator30.getAttemptLoad();
        boolean boolean35 = generator30.getAttemptLoad();
        generator30.setAttemptLoad(true);
        boolean boolean38 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        generator30.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator30.getStrategy();
        generator0.setStrategy(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setStyle(0);
        boolean boolean27 = generator0.getAttemptLoad();
        boolean boolean28 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin31 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        generator32.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator32.setStrategy(generatorStrategy58);
        generator32.setUseCache(true);
        generator32.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator70.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator70.getStrategy();
        generator70.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        generator70.setStrategy(generatorStrategy78);
        boolean boolean80 = namingPolicy69.equals((java.lang.Object) generator70);
        generator32.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        boolean boolean44 = namingPolicy20.equals((java.lang.Object) classArray41);
        generator13.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator46.setStrategy(generatorStrategy52);
        generator46.setAttemptLoad(true);
        generator46.setUseCache(true);
        boolean boolean58 = generator46.getUseCache();
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        generator46.setDelegates((java.lang.Object[]) classArray66);
        boolean boolean69 = namingPolicy20.equals((java.lang.Object) generator46);
        generator6.setNamingPolicy(namingPolicy20);
        generator0.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader72 = null;
        generator0.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy75);
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean9 = generator0.getAttemptLoad();
        boolean boolean10 = generator0.getUseCache();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator16.setStrategy(generatorStrategy29);
        generator16.setUseCache(false);
        java.lang.Class<?> wildcardClass33 = generator16.getClass();
        boolean boolean34 = generatorStrategy15.equals((java.lang.Object) wildcardClass33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator42.setStrategy(generatorStrategy55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator42.getStrategy();
        generator35.setStrategy(generatorStrategy57);
        generator35.setAttemptLoad(false);
        java.lang.Class[] classArray61 = null;
        generator35.setClasses(classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator35.getStrategy();
        java.lang.Class<?> wildcardClass64 = generatorStrategy63.getClass();
        boolean boolean65 = generatorStrategy15.equals((java.lang.Object) generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        generator38.setClasses(classArray58);
        boolean boolean61 = namingPolicy37.equals((java.lang.Object) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass67 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray76);
        java.lang.Object[] objArray79 = new java.lang.Object[] { 1L, '4', classArray29, generator33, classArray65 };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray29);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        boolean boolean26 = generator13.getUseCache();
        generator13.setAttemptLoad(false);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator13.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator51.setClasses(classArray63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        boolean boolean73 = generator71.getUseCache();
        java.lang.Object[] objArray75 = new java.lang.Object[] { generator71, true };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray75);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = namingPolicy14.equals((java.lang.Object) classArray35);
        generator7.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator40.setClassLoader(classLoader42);
        boolean boolean44 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator40.setStrategy(generatorStrategy46);
        generator40.setAttemptLoad(true);
        generator40.setUseCache(true);
        boolean boolean52 = generator40.getUseCache();
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        generator40.setDelegates((java.lang.Object[]) classArray60);
        boolean boolean63 = namingPolicy14.equals((java.lang.Object) generator40);
        generator0.setNamingPolicy(namingPolicy14);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy67);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean11 = generatorStrategy9.equals((java.lang.Object) 0L);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator12.getNamingPolicy();
        generator12.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator12.getClassLoader();
        boolean boolean39 = generator12.getAttemptLoad();
        generator12.setAttemptLoad(true);
        boolean boolean42 = generator12.getAttemptLoad();
        boolean boolean43 = generatorStrategy9.equals((java.lang.Object) generator12);
        java.lang.ClassLoader classLoader44 = generator12.getClassLoader();
        boolean boolean45 = generator12.getUseCache();
        boolean boolean46 = generator12.getAttemptLoad();
        boolean boolean47 = generator12.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin48 = generator12.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(mixin48);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        boolean boolean28 = generator0.getAttemptLoad();
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin30 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mixin30);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator20.setClassLoader(classLoader22);
        boolean boolean24 = generator20.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator20.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = null;
        generator20.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = generator42.getUseCache();
        generator42.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator68.setStrategy(generatorStrategy70);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        generator68.setClasses(classArray77);
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray88);
        generator42.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray77);
        generator20.setClasses(classArray38);
        generator0.setDelegates((java.lang.Object[]) classArray38);
        generator0.setStyle(0);
        generator0.setStyle(2);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        boolean boolean41 = generator0.getUseCache();
        boolean boolean42 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        java.lang.Class[] classArray52 = null;
        generator27.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator54.getStrategy();
        generator27.setStrategy(generatorStrategy79);
        generator0.setStrategy(generatorStrategy79);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray5 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray5);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, (java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = mixin6.newInstance((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        generator52.setDelegates(objArray61);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray72);
        generator52.setClasses(classArray72);
        boolean boolean75 = namingPolicy51.equals((java.lang.Object) classArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray78);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        boolean boolean25 = generator20.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator20.getNamingPolicy();
        boolean boolean27 = generator20.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setUseCache(true);
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator28, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        generator20.setClasses(classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        boolean boolean33 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator10.getStrategy();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator45.setClasses(classArray57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        boolean boolean67 = generator65.getUseCache();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator65, true };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray69);
        boolean boolean74 = generatorStrategy35.equals((java.lang.Object) mixin73);
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        generator0.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classLoader51);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = generator18.getUseCache();
        generator18.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray64);
        generator18.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray53);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        generator0.setUseCache(true);
        boolean boolean72 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = generatorStrategy14.generate(classGenerator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy14);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        java.lang.ClassLoader classLoader27 = null;
        generator25.setClassLoader(classLoader27);
        boolean boolean29 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator25.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator25.setNamingPolicy(namingPolicy32);
        boolean boolean34 = generator25.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator35.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator35.getStrategy();
        generator25.setStrategy(generatorStrategy43);
        generator0.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy46);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator8.setStrategy(generatorStrategy10);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        generator8.setClasses(classArray17);
        boolean boolean21 = generator8.getUseCache();
        generator8.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin24 = generator8.create();
        boolean boolean25 = namingPolicy7.equals((java.lang.Object) generator8);
        boolean boolean26 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy61);
        generator29.setNamingPolicy(namingPolicy61);
        java.lang.ClassLoader classLoader64 = generator29.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin66 = generator29.create();
        generator29.setUseCache(false);
        java.lang.ClassLoader classLoader69 = generator29.getClassLoader();
        generator8.setClassLoader(classLoader69);
        boolean boolean71 = generator8.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin72 = generator8.create();
        // The following exception was thrown during execution in test generation
        try {
            generator8.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        boolean boolean28 = generator0.getUseCache();
        boolean boolean29 = generator0.getUseCache();
        java.lang.Class[] classArray30 = null;
        generator0.setClasses(classArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        java.lang.Object[] objArray31 = new java.lang.Object[] { generator15, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = mixin14.newInstance((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        boolean boolean47 = generator45.getUseCache();
        java.lang.Object[] objArray49 = new java.lang.Object[] { generator45, true };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin69.newInstance((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin84 = mixin38.newInstance((java.lang.Object[]) classArray62);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        generator15.setDelegates((java.lang.Object[]) classArray22);
        java.lang.ClassLoader classLoader24 = null;
        generator15.setClassLoader(classLoader24);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator15.create();
        java.lang.ClassLoader classLoader28 = generator15.getClassLoader();
        generator15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator31.getStrategy();
        generator31.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator31.getStrategy();
        generator15.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy37);
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator17.setClassLoader(classLoader19);
        boolean boolean21 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        boolean boolean46 = namingPolicy22.equals((java.lang.Object) classArray43);
        generator14.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        generator49.setDelegates(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator61.setClassLoader(classLoader63);
        boolean boolean65 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin mixin68 = generator49.create();
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator77.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray84);
        generator49.setDelegates((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        generator0.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin90 = generator0.create();
        generator0.setStyle((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin58.newInstance((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
        boolean boolean74 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator11.setNamingPolicy(namingPolicy18);
        boolean boolean20 = generator11.getAttemptLoad();
        java.lang.Object[] objArray21 = null;
        generator11.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator23.getStrategy();
        generator23.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator33.setClasses(classArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator33.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator33.getStrategy();
        generator23.setStrategy(generatorStrategy48);
        generator11.setStrategy(generatorStrategy48);
        java.lang.Object obj51 = null;
        boolean boolean52 = generatorStrategy48.equals(obj51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator53.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator53.getNamingPolicy();
        generator53.setStyle((int) (byte) 1);
        generator53.setUseCache(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        generator53.setClasses(classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        boolean boolean77 = generatorStrategy48.equals((java.lang.Object) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(classArray78);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator6.setClasses(classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator26, true };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray30);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin35 = mixin5.newInstance((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator43.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator43.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator43.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator39.getStrategy();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        generator39.setDelegates((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray58);
        java.lang.Class<?> wildcardClass64 = mixin63.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        java.lang.Object obj8 = null;
        boolean boolean9 = namingPolicy7.equals(obj8);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        generator52.setDelegates(objArray61);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray72);
        generator52.setClasses(classArray72);
        generator52.setUseCache(true);
        generator52.setUseCache(false);
        java.lang.ClassLoader classLoader79 = generator52.getClassLoader();
        generator0.setClassLoader(classLoader79);
        boolean boolean81 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator32, true };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator39.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray46);
        boolean boolean49 = generatorStrategy25.equals((java.lang.Object) mixin48);
        java.lang.Class<?> wildcardClass50 = generatorStrategy25.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = null;
        generator0.setNamingPolicy(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        boolean boolean18 = generator0.getUseCache();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator20.setClasses(classArray29);
        boolean boolean33 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        generator20.setDelegates(objArray43);
        generator20.setStyle(2);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        generator20.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = mixin57.newInstance((java.lang.Object[]) classArray63);
        generator0.setDelegates((java.lang.Object[]) classArray63);
        boolean boolean69 = generator0.getUseCache();
        java.lang.Class[] classArray70 = null;
        generator0.setClasses(classArray70);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin79.newInstance((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        generator0.setClasses(classArray88);
        boolean boolean95 = generator0.getUseCache();
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.ClassLoader classLoader15 = null;
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, (java.lang.Object[]) classArray21);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = mixin26.newInstance((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        generator0.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin43);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        boolean boolean31 = generator18.getUseCache();
        generator18.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator18.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass13 = mixin12.getClass();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator21, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray37);
        java.lang.Class<?> wildcardClass40 = mixin39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass13, wildcardClass40 };
        generator0.setClasses(classArray41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin49.newInstance((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass93 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator30.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator30.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setAttemptLoad(true);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        generator43.setDelegates(objArray52);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray63);
        generator43.setClasses(classArray63);
        boolean boolean66 = generator43.getUseCache();
        generator43.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator69.setStrategy(generatorStrategy71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator69.setClasses(classArray78);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, (java.lang.Object[]) classArray89);
        generator43.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray96);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator33.setClasses(classArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator33.setStrategy(generatorStrategy46);
        generator33.setUseCache(false);
        boolean boolean50 = generator33.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator33.getClassLoader();
        generator0.setClassLoader(classLoader51);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader51);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle(2);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        generator31.setClasses(classArray51);
        boolean boolean54 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator31.getStrategy();
        boolean boolean56 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator31.getStrategy();
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = generator59.getUseCache();
        generator59.setStyle((int) (byte) 0);
        boolean boolean85 = generator59.getUseCache();
        java.lang.Object[] objArray86 = new java.lang.Object[] {};
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator59.setClasses(classArray87);
        boolean boolean89 = namingPolicy30.equals((java.lang.Object) generator59);
        boolean boolean90 = generator59.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator18.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        java.lang.Object obj24 = null;
        boolean boolean25 = namingPolicy23.equals(obj24);
        generator0.setNamingPolicy(namingPolicy23);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator34.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator34.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator34.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator30.getNamingPolicy();
        boolean boolean41 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator42.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator42.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray57);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        boolean boolean62 = generatorStrategy50.equals((java.lang.Object) classArray61);
        generator30.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray61);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mixin64);
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator21, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        generator0.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin44);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray28);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray22);
        java.lang.Class<?> wildcardClass35 = classArray22.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        boolean boolean12 = generator0.getAttemptLoad();
        java.lang.Object[] objArray13 = null;
        generator0.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator22.getStrategy();
        generator15.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator39.setDelegates((java.lang.Object[]) classArray46);
        generator15.setDelegates((java.lang.Object[]) classArray46);
        generator0.setDelegates((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        boolean boolean71 = generator69.getUseCache();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator69, true };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        boolean boolean39 = generator16.getUseCache();
        generator16.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray62);
        generator16.setClasses(classArray51);
        boolean boolean66 = generator16.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = generator16.getClassLoader();
        java.lang.ClassLoader classLoader68 = null;
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray74);
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray83);
        generator0.setDelegates(objArray83);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin92 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        boolean boolean31 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        generator18.setDelegates(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator45.setClasses(classArray54);
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray65);
        generator18.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(classArray73);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        boolean boolean64 = generator33.getUseCache();
        generator33.setUseCache(false);
        boolean boolean67 = generator33.getUseCache();
        java.lang.ClassLoader classLoader68 = generator33.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        java.lang.ClassLoader classLoader71 = null;
        generator69.setClassLoader(classLoader71);
        boolean boolean73 = generator69.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator69.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator69.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator69.getNamingPolicy();
        generator69.setStyle((int) (byte) 1);
        generator69.setUseCache(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        generator69.setClasses(classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = mixin25.newInstance((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classArray40);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        generator13.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator13.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        generator13.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        boolean boolean79 = namingPolicy68.equals((java.lang.Object) classArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        generator0.setClasses(classArray80);
        boolean boolean83 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        boolean boolean43 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy46);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        generator7.setUseCache(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class<?> wildcardClass20 = mixin19.getClass();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setUseCache(true);
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator28, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin27.newInstance(objArray44);
        java.lang.Class<?> wildcardClass47 = mixin46.getClass();
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass20, wildcardClass47 };
        generator7.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator0.setClasses(classArray48);
        boolean boolean52 = generator0.getAttemptLoad();
        boolean boolean53 = generator0.getAttemptLoad();
        boolean boolean54 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = mixin16.newInstance((java.lang.Object[]) classArray25);
        boolean boolean27 = generatorStrategy8.equals((java.lang.Object) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        boolean boolean34 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator30.setNamingPolicy(namingPolicy35);
        java.lang.ClassLoader classLoader37 = null;
        generator30.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator30.getStrategy();
        boolean boolean40 = generator30.getUseCache();
        boolean boolean41 = generator30.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator42.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        generator42.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader58 = generator42.getClassLoader();
        java.lang.ClassLoader classLoader59 = generator42.getClassLoader();
        generator30.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader62 = null;
        generator61.setClassLoader(classLoader62);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator61.getNamingPolicy();
        generator61.setAttemptLoad(false);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator61.setClasses(classArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = mixin29.newInstance((java.lang.Object[]) classArray72);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator19.getNamingPolicy();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator32, true };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator39.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        boolean boolean57 = generator55.getUseCache();
        java.lang.Object[] objArray59 = new java.lang.Object[] { generator55, true };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray54, objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator62.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin48.newInstance((java.lang.Object[]) classArray69);
        generator19.setClasses(classArray69);
        generator0.setDelegates((java.lang.Object[]) classArray69);
        boolean boolean76 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        java.lang.ClassLoader classLoader87 = null;
        java.lang.ClassLoader classLoader88 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create(classArray85, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, (java.lang.Object[]) classArray93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader31 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator33.getNamingPolicy();
        generator33.setUseCache(true);
        boolean boolean40 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator33.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator42.getStrategy();
        generator42.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        generator42.setStrategy(generatorStrategy50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator42.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator62.setStrategy(generatorStrategy64);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        generator62.setClasses(classArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator62.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator62.getStrategy();
        generator55.setStrategy(generatorStrategy77);
        generator55.setAttemptLoad(false);
        java.lang.Class[] classArray81 = null;
        generator55.setClasses(classArray81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator55.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator84.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator84.getStrategy();
        generator84.setStyle((int) (byte) 0);
        boolean boolean90 = generator84.getAttemptLoad();
        generator84.setUseCache(false);
        boolean boolean93 = generatorStrategy83.equals((java.lang.Object) generator84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator84.getStrategy();
        generator42.setStrategy(generatorStrategy94);
        boolean boolean96 = namingPolicy41.equals((java.lang.Object) generatorStrategy94);
        generator0.setStrategy(generatorStrategy94);
        boolean boolean98 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.ClassLoader classLoader61 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin62 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean28 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        boolean boolean33 = generator0.getUseCache();
        generator0.setStyle(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        generator5.setDelegates(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator24.setClasses(classArray33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator24.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator24.getStrategy();
        generator17.setStrategy(generatorStrategy39);
        generator5.setStrategy(generatorStrategy39);
        boolean boolean42 = generator5.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator5.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator45.setClasses(classArray54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator45.setStrategy(generatorStrategy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator45.getNamingPolicy();
        boolean boolean61 = namingPolicy44.equals((java.lang.Object) generator45);
        generator0.setNamingPolicy(namingPolicy44);
        boolean boolean63 = generator0.getAttemptLoad();
        boolean boolean64 = generator0.getUseCache();
        boolean boolean65 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator0.getNamingPolicy();
        java.lang.Class[] classArray67 = null;
        generator0.setClasses(classArray67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = generator0.create();
        java.lang.ClassLoader classLoader37 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator38.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin mixin57 = generator38.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator38.getStrategy();
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray65);
        generator38.setClasses(classArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray70);
        generator0.setDelegates((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        java.lang.ClassLoader classLoader76 = null;
        generator74.setClassLoader(classLoader76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator78.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator78.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator78.getNamingPolicy();
        generator74.setNamingPolicy(namingPolicy82);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator74.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator85.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator85.getStrategy();
        generator85.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator91 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean92 = generator91.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator91.getStrategy();
        generator85.setStrategy(generatorStrategy93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator85.getNamingPolicy();
        generator74.setNamingPolicy(namingPolicy95);
        generator0.setNamingPolicy(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        boolean boolean85 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator52.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator52.getStrategy();
        java.lang.ClassLoader classLoader68 = null;
        generator52.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator52.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin mixin72 = generator0.create();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy78);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator78 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray79 = generatorStrategy77.generate(classGenerator78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin12.newInstance((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator26.getStrategy();
        generator24.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = namingPolicy41.equals((java.lang.Object) classArray62);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray72);
        boolean boolean76 = namingPolicy41.equals((java.lang.Object) classArray72);
        generator24.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray78 = null;
        generator24.setClasses(classArray78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator24.setClasses(classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator0.getNamingPolicy();
        boolean boolean92 = generator0.getUseCache();
        generator0.setStyle(1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(generatorStrategy95);
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray36);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        java.lang.Class<?> wildcardClass44 = objArray36.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.Object[] objArray8 = null;
        generator0.setDelegates(objArray8);
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        boolean boolean40 = generatorStrategy11.equals((java.lang.Object) classArray18);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        boolean boolean35 = generator12.getUseCache();
        generator12.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator38.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator38.setClasses(classArray47);
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray58);
        generator12.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        java.lang.ClassLoader classLoader64 = null;
        generator62.setClassLoader(classLoader64);
        boolean boolean66 = generator62.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator62.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        boolean boolean77 = generator75.getUseCache();
        java.lang.Object[] objArray79 = new java.lang.Object[] { generator75, true };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray79);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getAttemptLoad();
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator82.setDelegates((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray89);
        boolean boolean92 = namingPolicy67.equals((java.lang.Object) classArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        generator0.setClasses(classArray89);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader97 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean34 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, (java.lang.Object[]) classArray15);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        generator6.setClasses(classArray15);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = mixin26.newInstance((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator38.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator38.setClasses(classArray47);
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray64);
        boolean boolean68 = generatorStrategy4.equals((java.lang.Object) classArray64);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator49.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setUseCache(true);
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator49, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray22);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy11);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin20.newInstance((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        generator0.setClasses(classArray58);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator0.setStrategy(generatorStrategy81);
        generator0.setStyle(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        java.lang.ClassLoader classLoader20 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = namingPolicy26.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray47);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray52);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray57);
        generator37.setClasses(classArray57);
        boolean boolean60 = generator37.getUseCache();
        generator37.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray83);
        generator37.setClasses(classArray72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator37.getStrategy();
        java.lang.ClassLoader classLoader88 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        generator37.setDelegates(objArray90);
        boolean boolean94 = generator37.getAttemptLoad();
        boolean boolean95 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader96 = generator37.getClassLoader();
        generator0.setClassLoader(classLoader96);
        org.mockito.cglib.proxy.Mixin mixin98 = generator0.create();
        java.lang.Class<?> wildcardClass99 = mixin98.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader25);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setUseCache(true);
        java.lang.Object[] objArray45 = new java.lang.Object[] { generator29, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator0.setClasses(classArray48);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy52);
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        boolean boolean61 = generator33.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        generator62.setAttemptLoad(true);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        generator62.setDelegates(objArray71);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, (java.lang.Object[]) classArray82);
        generator62.setClasses(classArray82);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator62.getNamingPolicy();
        generator62.setUseCache(true);
        java.lang.ClassLoader classLoader88 = generator62.getClassLoader();
        boolean boolean89 = generator62.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator62.getStrategy();
        generator33.setStrategy(generatorStrategy90);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator33.getStrategy();
        generator33.setUseCache(false);
        generator33.setUseCache(true);
        generator33.setUseCache(true);
        boolean boolean99 = generator33.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator20.setClasses(classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray79);
        generator33.setClasses(classArray68);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray68);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        generator0.setClasses(classArray92);
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setStyle(1);
        boolean boolean12 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        generator13.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        boolean boolean20 = generator13.getAttemptLoad();
        generator13.setUseCache(false);
        boolean boolean23 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator13.getNamingPolicy();
        boolean boolean25 = namingPolicy12.equals((java.lang.Object) namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Object[] objArray18 = null;
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator20.setClassLoader(classLoader22);
        boolean boolean24 = generator20.getAttemptLoad();
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator20.setClasses(classArray32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        boolean boolean42 = generator40.getUseCache();
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator40, true };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray39, objArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray44);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setClasses(classArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(false);
        boolean boolean18 = generator0.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator27.setDelegates((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin43.newInstance((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        generator0.setClasses(classArray56);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        generator5.setDelegates(objArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray25);
        generator5.setClasses(classArray25);
        boolean boolean28 = generator5.getUseCache();
        generator5.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator31.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        generator31.setClasses(classArray40);
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray51);
        generator5.setClasses(classArray40);
        boolean boolean55 = generator5.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = generator5.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator57.setClasses(classArray66);
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray66);
        generator4.setClassLoader(classLoader56);
        generator0.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader87 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(classLoader87);
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        boolean boolean24 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean9 = generator0.getAttemptLoad();
        boolean boolean10 = generator0.getUseCache();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator13.setStrategy(generatorStrategy26);
        generator13.setUseCache(false);
        boolean boolean30 = generator13.getAttemptLoad();
        boolean boolean31 = generatorStrategy12.equals((java.lang.Object) generator13);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator13.setNamingPolicy(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean9 = generator0.getAttemptLoad();
        boolean boolean10 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        boolean boolean33 = generator28.getAttemptLoad();
        generator28.setUseCache(false);
        boolean boolean36 = namingPolicy27.equals((java.lang.Object) generator28);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray57);
        generator37.setClasses(classArray57);
        java.lang.Object[] objArray60 = null;
        generator37.setDelegates(objArray60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator37.getStrategy();
        boolean boolean63 = namingPolicy27.equals((java.lang.Object) generator37);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setAttemptLoad(true);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        generator64.setDelegates(objArray73);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, (java.lang.Object[]) classArray84);
        generator64.setClasses(classArray84);
        boolean boolean87 = generator64.getUseCache();
        generator64.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin90 = generator64.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator64.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator64.getNamingPolicy();
        boolean boolean93 = namingPolicy27.equals((java.lang.Object) namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray39 = null;
        generator0.setClasses(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        java.lang.ClassLoader classLoader43 = null;
        generator0.setClassLoader(classLoader43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator45.setStrategy(generatorStrategy51);
        generator45.setAttemptLoad(true);
        generator45.setUseCache(true);
        boolean boolean57 = generator45.getUseCache();
        boolean boolean58 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator59.setStrategy(generatorStrategy72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator59.getStrategy();
        java.lang.ClassLoader classLoader75 = null;
        generator59.setClassLoader(classLoader75);
        boolean boolean77 = generator59.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator59.getStrategy();
        boolean boolean79 = generator59.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = generator59.getClassLoader();
        generator45.setClassLoader(classLoader80);
        generator0.setClassLoader(classLoader80);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classLoader80);
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader42 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator50.setStrategy(generatorStrategy52);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        generator50.setClasses(classArray59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator50.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator50.getStrategy();
        generator43.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        generator43.setDelegates((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin52 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator0.getNamingPolicy();
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator56.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setUseCache(true);
        java.lang.Object[] objArray72 = new java.lang.Object[] { generator56, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator0.setClasses(classArray75);
        java.lang.Class<?> wildcardClass77 = classArray75.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader23 = null;
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator30, true };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray50);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin mixin31 = generator12.create();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator40.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray47);
        generator12.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        generator57.setUseCache(true);
        boolean boolean61 = generator57.getUseCache();
        generator57.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        generator57.setDelegates(objArray66);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray77);
        generator57.setClasses(classArray77);
        boolean boolean80 = namingPolicy56.equals((java.lang.Object) classArray77);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray87);
        boolean boolean91 = namingPolicy56.equals((java.lang.Object) classArray87);
        generator12.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        boolean boolean95 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator0.getStrategy();
        boolean boolean97 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin98 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(2);
        generator0.setAttemptLoad(true);
        boolean boolean31 = generator0.getUseCache();
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = null;
        generator52.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setUseCache(true);
        java.lang.Object[] objArray68 = new java.lang.Object[] { generator52, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(objArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator33.setClasses(classArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator73.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator73.getStrategy();
        generator73.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        generator73.setStrategy(generatorStrategy81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator73.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = null;
        generator73.setNamingPolicy(namingPolicy84);
        boolean boolean86 = generator73.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator73.getStrategy();
        generator33.setStrategy(generatorStrategy87);
        generator0.setStrategy(generatorStrategy87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getAttemptLoad();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        boolean boolean12 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = namingPolicy13.equals((java.lang.Object) classArray34);
        generator6.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        boolean boolean53 = generator40.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        generator40.setDelegates(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setAttemptLoad(true);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        generator67.setDelegates(objArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        java.lang.ClassLoader classLoader81 = null;
        generator79.setClassLoader(classLoader81);
        boolean boolean83 = generator79.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator79.getNamingPolicy();
        generator67.setNamingPolicy(namingPolicy84);
        generator40.setNamingPolicy(namingPolicy84);
        generator40.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin89 = generator40.create();
        java.lang.ClassLoader classLoader90 = generator40.getClassLoader();
        java.lang.Class<?> wildcardClass91 = classLoader90.getClass();
        boolean boolean92 = generatorStrategy39.equals((java.lang.Object) wildcardClass91);
        generator0.setStrategy(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        generator0.setAttemptLoad(false);
        boolean boolean59 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator68.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        generator0.setStyle((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        generator38.setClasses(classArray58);
        boolean boolean61 = generator38.getUseCache();
        generator38.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator38.setStrategy(generatorStrategy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator68.getStrategy();
        generator66.setStrategy(generatorStrategy75);
        generator38.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator38.getStrategy();
        generator0.setStrategy(generatorStrategy78);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy78);
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator17.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator17.getStrategy();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = mixin27.newInstance((java.lang.Object[]) classArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        boolean boolean47 = generator45.getUseCache();
        java.lang.Object[] objArray49 = new java.lang.Object[] { generator45, true };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        boolean boolean64 = generatorStrategy21.equals((java.lang.Object) classArray44);
        generator0.setStrategy(generatorStrategy21);
        generator0.setStyle(0);
        boolean boolean68 = generator0.getAttemptLoad();
        boolean boolean69 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        generator10.setClasses(classArray19);
        boolean boolean23 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        generator10.setDelegates(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        boolean boolean38 = namingPolicy8.equals((java.lang.Object) objArray33);
        java.lang.Object obj41 = null;
        org.mockito.cglib.core.Predicate predicate42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = namingPolicy8.getClassName("", "", obj41, predicate42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        generator0.setAttemptLoad(true);
        java.lang.Object[] objArray15 = null;
        generator0.setDelegates(objArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        generator17.setClasses(classArray37);
        boolean boolean40 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator17.getStrategy();
        java.lang.Class[] classArray42 = null;
        generator17.setClasses(classArray42);
        boolean boolean44 = generator17.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        boolean boolean59 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        generator60.setDelegates(objArray69);
        generator46.setDelegates(objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        generator73.setDelegates(objArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getUseCache();
        java.lang.ClassLoader classLoader87 = null;
        generator85.setClassLoader(classLoader87);
        boolean boolean89 = generator85.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator85.getNamingPolicy();
        generator73.setNamingPolicy(namingPolicy90);
        generator46.setNamingPolicy(namingPolicy90);
        generator46.setAttemptLoad(false);
        boolean boolean95 = namingPolicy45.equals((java.lang.Object) false);
        generator0.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass98 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(namingPolicy97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        generator0.setAttemptLoad(false);
        boolean boolean59 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator68.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        generator6.setDelegates(objArray15);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray26);
        generator6.setClasses(classArray26);
        boolean boolean29 = namingPolicy5.equals((java.lang.Object) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator30.getNamingPolicy();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        boolean boolean48 = generator46.getUseCache();
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator46, true };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray45, objArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator53.setDelegates((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = mixin70.newInstance((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray79);
        generator30.setDelegates((java.lang.Object[]) classArray63);
        boolean boolean83 = namingPolicy5.equals((java.lang.Object) generator30);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator84.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator84.getStrategy();
        generator30.setStrategy(generatorStrategy87);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator30.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader90 = generator30.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader11 = null;
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        generator17.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator17.getNamingPolicy();
        boolean boolean24 = generator17.getAttemptLoad();
        generator17.setUseCache(false);
        boolean boolean27 = generator17.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = namingPolicy33.equals((java.lang.Object) classArray54);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        generator17.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin16.newInstance((java.lang.Object[]) classArray58);
        boolean boolean61 = namingPolicy10.equals((java.lang.Object) classArray58);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator14.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator14.getStrategy();
        java.lang.ClassLoader classLoader30 = null;
        generator14.setClassLoader(classLoader30);
        boolean boolean32 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator14.getStrategy();
        boolean boolean34 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader35);
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader35);
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray59);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray80);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin72.newInstance((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        generator0.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = generator0.getClassLoader();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        generator0.setClasses(classArray84);
        boolean boolean90 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        java.lang.ClassLoader classLoader93 = generator0.getClassLoader();
        boolean boolean94 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        boolean boolean7 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator29.getStrategy();
        generator22.setStrategy(generatorStrategy44);
        generator10.setStrategy(generatorStrategy44);
        generator10.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        generator49.setDelegates(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator61.setClassLoader(classLoader63);
        boolean boolean65 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator61.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin mixin68 = generator49.create();
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator77.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray84);
        generator49.setDelegates((java.lang.Object[]) classArray76);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator49.getNamingPolicy();
        java.lang.ClassLoader classLoader89 = generator49.getClassLoader();
        generator10.setClassLoader(classLoader89);
        generator0.setClassLoader(classLoader89);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        java.lang.Object obj23 = null;
        boolean boolean24 = generatorStrategy22.equals(obj23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator25.setClasses(classArray34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator25.setStrategy(generatorStrategy38);
        generator25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator25.getNamingPolicy();
        boolean boolean43 = generatorStrategy22.equals((java.lang.Object) namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader45 = null;
        generator44.setClassLoader(classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        java.lang.ClassLoader classLoader49 = null;
        generator47.setClassLoader(classLoader49);
        boolean boolean51 = generator47.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        generator53.setDelegates(objArray62);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray73);
        generator53.setClasses(classArray73);
        boolean boolean76 = namingPolicy52.equals((java.lang.Object) classArray73);
        generator44.setNamingPolicy(namingPolicy52);
        boolean boolean78 = generator44.getAttemptLoad();
        generator44.setStyle((int) (short) 1);
        generator44.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = null;
        generator83.setStrategy(generatorStrategy85);
        generator83.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator83.getStrategy();
        generator44.setStrategy(generatorStrategy89);
        boolean boolean91 = generatorStrategy22.equals((java.lang.Object) generator44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator44.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator8.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator8.getNamingPolicy();
        generator8.setAttemptLoad(false);
        generator8.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator21.setStrategy(generatorStrategy23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        generator21.setClasses(classArray30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator21.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator21.getStrategy();
        generator8.setStrategy(generatorStrategy36);
        boolean boolean38 = namingPolicy7.equals((java.lang.Object) generator8);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        boolean boolean62 = generator39.getUseCache();
        generator39.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator39.setStrategy(generatorStrategy65);
        boolean boolean67 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator39.getStrategy();
        boolean boolean69 = namingPolicy7.equals((java.lang.Object) generator39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator39.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator39.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        generator16.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setUseCache(true);
        java.lang.Object[] objArray32 = new java.lang.Object[] { generator16, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator0.setClasses(classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray36);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin42.newInstance((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        generator0.setStyle(1);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy60);
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        generator18.setUseCache(true);
        generator18.setUseCache(false);
        java.lang.ClassLoader classLoader45 = generator18.getClassLoader();
        boolean boolean46 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin47 = generator18.create();
        java.lang.ClassLoader classLoader48 = generator18.getClassLoader();
        generator16.setClassLoader(classLoader48);
        generator0.setClassLoader(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classLoader48);
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        boolean boolean12 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator8.setNamingPolicy(namingPolicy13);
        generator8.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin mixin40 = generator21.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator21.getStrategy();
        generator21.setUseCache(false);
        java.lang.ClassLoader classLoader44 = generator21.getClassLoader();
        generator0.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin48 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        boolean boolean27 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        generator14.setDelegates(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        generator41.setNamingPolicy(namingPolicy58);
        generator14.setNamingPolicy(namingPolicy58);
        generator14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin63 = generator14.create();
        boolean boolean64 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader65);
        java.lang.ClassLoader classLoader67 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader70);
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean7 = generator0.getUseCache();
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        generator10.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray48);
        generator28.setClasses(classArray48);
        boolean boolean51 = namingPolicy27.equals((java.lang.Object) classArray48);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        boolean boolean62 = namingPolicy27.equals((java.lang.Object) classArray58);
        generator10.setNamingPolicy(namingPolicy27);
        generator0.setNamingPolicy(namingPolicy27);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator0.getNamingPolicy();
        generator0.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray44);
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, (java.lang.Object[]) classArray11);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray11);
        generator0.setClasses(classArray11);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classLoader20);
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = generator25.create();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        boolean boolean46 = generator44.getUseCache();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator44, true };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin68.newInstance((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray77);
        generator25.setClasses(classArray61);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray61);
        java.lang.Class<?> wildcardClass82 = mixin81.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator7.getStrategy();
        generator7.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator7.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray39);
        generator18.setDelegates((java.lang.Object[]) classArray39);
        generator18.setAttemptLoad(true);
        generator18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator18.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        boolean boolean51 = generator49.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        generator7.setClasses(classArray58);
        boolean boolean65 = generator7.getUseCache();
        boolean boolean66 = namingPolicy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator7.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator13.getNamingPolicy();
        generator1.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin mixin20 = generator1.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator1.getStrategy();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray28);
        generator1.setClasses(classArray28);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        boolean boolean13 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        boolean boolean18 = generator0.getUseCache();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        boolean boolean20 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        boolean boolean46 = generator23.getUseCache();
        generator23.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray69);
        generator23.setClasses(classArray58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator23.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator23.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator11.getStrategy();
        generator9.setStrategy(generatorStrategy13);
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        generator11.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy39);
        generator11.setNamingPolicy(namingPolicy39);
        boolean boolean42 = generator11.getAttemptLoad();
        generator11.setAttemptLoad(true);
        generator11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy47);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator9.setDelegates((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray8, (java.lang.Object[]) classArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray8);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray8);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = mixin26.newInstance((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator38.setStrategy(generatorStrategy40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator38.setClasses(classArray47);
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin20.newInstance((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray64);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        boolean boolean14 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        boolean boolean16 = generator0.getUseCache();
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator13.setNamingPolicy(namingPolicy20);
        boolean boolean22 = generator13.getAttemptLoad();
        java.lang.Object[] objArray23 = null;
        generator13.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator25.getStrategy();
        generator25.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator35.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator35.getStrategy();
        generator25.setStrategy(generatorStrategy50);
        generator13.setStrategy(generatorStrategy50);
        java.lang.Object obj53 = null;
        boolean boolean54 = generatorStrategy50.equals(obj53);
        generator0.setStrategy(generatorStrategy50);
        boolean boolean56 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator61.getStrategy();
        generator59.setStrategy(generatorStrategy68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator59.getStrategy();
        generator0.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        boolean boolean75 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass76 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin15.newInstance((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin25.newInstance((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin76.newInstance((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray62);
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.Class<?> wildcardClass83 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin12.newInstance((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator26.getStrategy();
        generator24.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = namingPolicy41.equals((java.lang.Object) classArray62);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray72);
        boolean boolean76 = namingPolicy41.equals((java.lang.Object) classArray72);
        generator24.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray78 = null;
        generator24.setClasses(classArray78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator24.setClasses(classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin31 = generator0.create();
        boolean boolean32 = generator0.getUseCache();
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader34 = null;
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray40);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray54);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin51.newInstance((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray60);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator0.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator0.getNamingPolicy();
        boolean boolean68 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        generator76.setUseCache(true);
        generator76.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator76.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy82);
        boolean boolean84 = generator25.getAttemptLoad();
        generator25.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator25.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass13 = mixin12.getClass();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator21, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray37);
        java.lang.Class<?> wildcardClass40 = mixin39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass13, wildcardClass40 };
        generator0.setClasses(classArray41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = mixin49.newInstance((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        generator0.setStyle(0);
        java.lang.ClassLoader classLoader94 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader3, (java.lang.Object[]) classArray9);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        java.lang.Object[] objArray31 = new java.lang.Object[] { generator15, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator0.setDelegates((java.lang.Object[]) classArray34);
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        boolean boolean62 = generator39.getUseCache();
        generator39.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        generator39.setClasses(classArray74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator39.getStrategy();
        java.lang.ClassLoader classLoader90 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader90, objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(objArray92);
        generator39.setDelegates(objArray92);
        java.lang.ClassLoader classLoader96 = generator39.getClassLoader();
        generator0.setClassLoader(classLoader96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        java.lang.Object obj30 = null;
        boolean boolean31 = namingPolicy29.equals(obj30);
        java.lang.Object obj34 = null;
        org.mockito.cglib.core.Predicate predicate35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = namingPolicy29.getClassName("", "hi!", obj34, predicate35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        generator5.setDelegates(objArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray25);
        generator5.setClasses(classArray25);
        generator5.setUseCache(true);
        generator5.setUseCache(false);
        java.lang.ClassLoader classLoader32 = generator5.getClassLoader();
        boolean boolean33 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin34 = generator5.create();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator35.setNamingPolicy(namingPolicy42);
        boolean boolean44 = generator35.getAttemptLoad();
        java.lang.Object[] objArray45 = null;
        generator35.setDelegates(objArray45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator35.getStrategy();
        generator35.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator35.getStrategy();
        generator5.setStrategy(generatorStrategy50);
        generator0.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        boolean boolean66 = generator53.getUseCache();
        generator53.setAttemptLoad(false);
        generator53.setUseCache(true);
        java.lang.ClassLoader classLoader71 = generator53.getClassLoader();
        generator0.setClassLoader(classLoader71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin78.newInstance((java.lang.Object[]) classArray86);
        java.lang.ClassLoader classLoader89 = null;
        java.lang.Object[] objArray91 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader89, objArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(objArray91);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = mixin78.newInstance((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray94);
        generator0.setClasses(classArray94);
        org.mockito.cglib.proxy.Mixin mixin99 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[10]");
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        generator6.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        generator6.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator14.setNamingPolicy(namingPolicy19);
        generator14.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator14.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy23);
        java.lang.Object obj25 = null;
        boolean boolean26 = namingPolicy23.equals(obj25);
        generator0.setNamingPolicy(namingPolicy23);
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        boolean boolean82 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setUseCache(true);
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator14, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        java.lang.Class<?> wildcardClass42 = classArray37.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        boolean boolean24 = generator0.getAttemptLoad();
        java.lang.Object[] objArray25 = null;
        generator0.setDelegates(objArray25);
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        java.lang.ClassLoader classLoader33 = null;
        generator28.setClassLoader(classLoader33);
        generator28.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator28.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(false);
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator0.getStrategy();
        boolean boolean34 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin19.newInstance((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        boolean boolean61 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator57.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setUseCache(true);
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator57, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin56.newInstance(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator0.setClasses(classArray76);
        boolean boolean78 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin82 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(mixin82);
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
        boolean boolean33 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator34.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator34.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator34.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        java.lang.ClassLoader classLoader46 = null;
        generator44.setClassLoader(classLoader46);
        boolean boolean48 = generator44.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = null;
        generator44.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator44.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator44.getAttemptLoad();
        java.lang.Object[] objArray54 = null;
        generator44.setDelegates(objArray54);
        boolean boolean56 = generator44.getAttemptLoad();
        boolean boolean57 = namingPolicy43.equals((java.lang.Object) boolean56);
        generator0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin mixin59 = generator0.create();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator6.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator6.getNamingPolicy();
        boolean boolean18 = generator6.getAttemptLoad();
        generator6.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator6.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        generator23.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generatorStrategy29.equals((java.lang.Object) generator30);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setAttemptLoad(true);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        generator50.setDelegates(objArray59);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray70);
        generator50.setClasses(classArray70);
        boolean boolean73 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator75.setDelegates((java.lang.Object[]) classArray82);
        boolean boolean84 = generatorStrategy74.equals((java.lang.Object) classArray82);
        generator30.setClasses(classArray82);
        generator30.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator30.getStrategy();
        generator6.setStrategy(generatorStrategy88);
        generator6.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = generatorStrategy5.generate((org.mockito.cglib.core.ClassGenerator) generator6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        boolean boolean44 = generator21.getUseCache();
        generator21.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator47.setClasses(classArray56);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray67);
        generator21.setClasses(classArray56);
        boolean boolean71 = generator21.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = generator21.getClassLoader();
        java.lang.ClassLoader classLoader73 = null;
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        boolean boolean86 = generator0.getUseCache();
        boolean boolean87 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray13);
        generator0.setClasses(classArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        generator0.setUseCache(true);
        boolean boolean20 = generator0.getUseCache();
        java.lang.ClassLoader classLoader21 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setUseCache(true);
        java.lang.Object[] objArray40 = new java.lang.Object[] { generator24, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(objArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        boolean boolean6 = generator1.getAttemptLoad();
        boolean boolean7 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader8 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = namingPolicy14.equals((java.lang.Object) classArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator1.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray35);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin43);
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin53 = generator0.create();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin53.newInstance((java.lang.Object[]) classArray59);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        generator0.setClasses(classArray84);
        boolean boolean90 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader92 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        generator0.setAttemptLoad(true);
        generator0.setStyle(0);
        generator0.setStyle(1);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean20 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray39 = null;
        generator0.setClasses(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy29);
        generator17.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator17.getStrategy();
        generator0.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        generator35.setAttemptLoad(false);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator35.setDelegates(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator46.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator46.setNamingPolicy(namingPolicy53);
        boolean boolean55 = generator46.getAttemptLoad();
        java.lang.Object[] objArray56 = null;
        generator46.setDelegates(objArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        generator58.setDelegates(objArray67);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray78);
        generator58.setClasses(classArray78);
        generator46.setClasses(classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        generator35.setClasses(classArray78);
        java.lang.ClassLoader classLoader84 = generator35.getClassLoader();
        generator0.setClassLoader(classLoader84);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        boolean boolean88 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        boolean boolean14 = generator10.getAttemptLoad();
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator10.setClasses(classArray22);
        java.lang.ClassLoader classLoader24 = null;
        generator10.setClassLoader(classLoader24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator10.setStrategy(generatorStrategy26);
        boolean boolean28 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator44.setNamingPolicy(namingPolicy61);
        generator29.setNamingPolicy(namingPolicy61);
        java.lang.ClassLoader classLoader64 = generator29.getClassLoader();
        generator10.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator10.getStrategy();
        boolean boolean67 = generatorStrategy9.equals((java.lang.Object) generator10);
        boolean boolean68 = generator10.getUseCache();
        java.lang.ClassLoader classLoader69 = generator10.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator70.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator70.getStrategy();
        generator70.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator76.getStrategy();
        generator70.setStrategy(generatorStrategy78);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator70.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator70.getNamingPolicy();
        boolean boolean82 = generator70.getAttemptLoad();
        boolean boolean83 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader84 = null;
        java.lang.ClassLoader classLoader85 = null;
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray91);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, (java.lang.Object[]) classArray95);
        generator70.setDelegates((java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray95);
        java.lang.Class<?> wildcardClass99 = classArray95.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy23);
        boolean boolean25 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray33, objArray39);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator46.getStrategy();
        generator44.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator44.setDelegates(objArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray57);
        generator0.setDelegates(objArray57);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator11.getNamingPolicy();
        boolean boolean35 = generator11.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy36);
        java.lang.Class<?> wildcardClass38 = namingPolicy36.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean34 = generator0.getAttemptLoad();
        generator0.setStyle((int) (short) 1);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass39 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin51.newInstance((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator0.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        boolean boolean88 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin93 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator39.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator39.getNamingPolicy();
        generator39.setAttemptLoad(false);
        generator39.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator52.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator52.getStrategy();
        generator39.setStrategy(generatorStrategy67);
        generator0.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin15.newInstance((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin25.newInstance((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = mixin42.newInstance((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray51);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator0.getNamingPolicy();
        generator0.setStyle(1);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        java.lang.ClassLoader classLoader71 = null;
        generator69.setClassLoader(classLoader71);
        boolean boolean73 = generator69.getAttemptLoad();
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator69.setClasses(classArray81);
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin.Generator generator89 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean90 = generator89.getUseCache();
        boolean boolean91 = generator89.getUseCache();
        java.lang.Object[] objArray93 = new java.lang.Object[] { generator89, true };
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(objArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray88, objArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray81, objArray93);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray93);
        generator0.setDelegates(objArray93);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.create(objArray93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator25.getNamingPolicy();
        generator25.setUseCache(true);
        java.lang.ClassLoader classLoader51 = generator25.getClassLoader();
        generator0.setClassLoader(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader51);
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(2);
        generator0.setAttemptLoad(true);
        boolean boolean31 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        generator0.setDelegates(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        generator27.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator27.setStrategy(generatorStrategy53);
        generator27.setUseCache(true);
        java.lang.ClassLoader classLoader57 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader57);
        java.lang.Object[] objArray59 = null;
        generator0.setDelegates(objArray59);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader64 = generator0.getClassLoader();
        boolean boolean65 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin67 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator60.setStrategy(generatorStrategy62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator60.setClasses(classArray69);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader88 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy26);
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        generator0.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        boolean boolean46 = generator44.getUseCache();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator44, true };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin36.newInstance((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator36.getStrategy();
        generator36.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        generator36.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator36.setNamingPolicy(namingPolicy47);
        boolean boolean49 = generator36.getAttemptLoad();
        generator36.setStyle((int) (byte) 0);
        generator36.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator36.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        java.lang.Class<?> wildcardClass57 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass13 = mixin12.getClass();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator21, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray37);
        java.lang.Class<?> wildcardClass40 = mixin39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass13, wildcardClass40 };
        generator0.setClasses(classArray41);
        boolean boolean43 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator30, true };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = mixin23.newInstance((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader30 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        generator38.setClasses(classArray58);
        boolean boolean61 = namingPolicy37.equals((java.lang.Object) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        java.lang.Object[] objArray65 = null;
        generator0.setDelegates(objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        boolean boolean71 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = null;
        generator67.setStrategy(generatorStrategy73);
        generator67.setAttemptLoad(true);
        generator67.setUseCache(true);
        boolean boolean79 = generator67.getUseCache();
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        generator67.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean10 = generator0.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        boolean boolean37 = generator0.getAttemptLoad();
        boolean boolean38 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        boolean boolean51 = generator49.getUseCache();
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator49, true };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        generator63.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setUseCache(true);
        java.lang.Object[] objArray79 = new java.lang.Object[] { generator63, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin62.newInstance(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray79);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator21, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        generator0.setDelegates((java.lang.Object[]) classArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        java.lang.Object obj45 = null;
        boolean boolean46 = generatorStrategy44.equals(obj45);
        org.mockito.cglib.core.ClassGenerator classGenerator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray48 = generatorStrategy44.generate(classGenerator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        generator14.setAttemptLoad(true);
        boolean boolean19 = generator14.getUseCache();
        generator14.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator22.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator22.getStrategy();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        boolean boolean42 = generatorStrategy30.equals((java.lang.Object) classArray41);
        generator14.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        generator0.setClasses(classArray41);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(namingPolicy46);
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator12.getNamingPolicy();
        generator12.setAttemptLoad(false);
        generator12.setUseCache(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator36.setClasses(classArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin55.newInstance((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator67.setClasses(classArray76);
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray32);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        java.lang.ClassLoader classLoader57 = generator0.getClassLoader();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classLoader57);
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        generator20.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator20.getNamingPolicy();
        boolean boolean27 = generator20.getAttemptLoad();
        generator20.setUseCache(false);
        boolean boolean30 = generator20.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray41);
        generator20.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        generator13.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator13.getNamingPolicy();
        boolean boolean20 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        java.lang.ClassLoader classLoader23 = null;
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator30, true };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        boolean boolean51 = generatorStrategy22.equals((java.lang.Object) mixin50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin57.newInstance((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator69.setStrategy(generatorStrategy71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator69.setClasses(classArray78);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin98 = mixin50.newInstance((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator0.getStrategy();
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        boolean boolean26 = generator24.getUseCache();
        java.lang.Object[] objArray28 = new java.lang.Object[] { generator24, true };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator31.setDelegates((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin48.newInstance((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray57);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin mixin63 = generator0.create();
        boolean boolean64 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        boolean boolean18 = generator16.getUseCache();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator16, true };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator23.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin40.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray49);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin53 = generator0.create();
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor60 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator23.setClassLoader(classLoader28);
        generator23.setStyle(2);
        generator23.setUseCache(true);
        boolean boolean34 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        java.lang.Object obj40 = null;
        boolean boolean41 = generatorStrategy39.equals(obj40);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean34 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor36 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        generator82.setUseCache(true);
        boolean boolean86 = generator82.getUseCache();
        generator82.setUseCache(true);
        generator82.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader91 = null;
        generator82.setClassLoader(classLoader91);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator82.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy93);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator12.getStrategy();
        generator12.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        generator12.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator12.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray44);
        generator24.setClasses(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator24.getNamingPolicy();
        generator24.setUseCache(true);
        java.lang.ClassLoader classLoader50 = generator24.getClassLoader();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator59.setDelegates((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray74);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin75.newInstance((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray84);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator24.setDelegates((java.lang.Object[]) classArray69);
        boolean boolean91 = namingPolicy23.equals((java.lang.Object) classArray69);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        boolean boolean95 = namingPolicy11.equals((java.lang.Object) classArray69);
        boolean boolean96 = generatorStrategy6.equals((java.lang.Object) classArray69);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        boolean boolean24 = generator22.getUseCache();
        java.lang.Object[] objArray26 = new java.lang.Object[] { generator22, true };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator29.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.ClassLoader classLoader40 = null;
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        generator52.setDelegates(objArray61);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray72);
        generator52.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin51.newInstance(objArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin38.newInstance(objArray84);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray84);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
        generator0.setStyle((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(mixin28);
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        boolean boolean39 = generator0.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin46.newInstance((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        generator62.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator62.getStrategy();
        generator60.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator60.setDelegates(objArray73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator60.getStrategy();
        generator60.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator60.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin82 = generator60.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator60.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator60.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy84);
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator1.setStrategy(generatorStrategy14);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator1.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        generator17.setClasses(classArray37);
        generator17.setUseCache(true);
        generator17.setUseCache(false);
        java.lang.ClassLoader classLoader44 = generator17.getClassLoader();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator51, true };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator1.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator7, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin6.newInstance(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator36.setClasses(classArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        boolean boolean58 = generator56.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator56, true };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = mixin26.newInstance(objArray60);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        java.lang.Class<?> wildcardClass67 = classArray66.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        boolean boolean18 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy51);
        generator19.setNamingPolicy(namingPolicy51);
        java.lang.ClassLoader classLoader54 = generator19.getClassLoader();
        generator0.setClassLoader(classLoader54);
        generator0.setUseCache(true);
        boolean boolean58 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        generator0.setDelegates((java.lang.Object[]) classArray65);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray44);
        generator24.setClasses(classArray44);
        boolean boolean47 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator49.setDelegates((java.lang.Object[]) classArray56);
        boolean boolean58 = generatorStrategy48.equals((java.lang.Object) classArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        generator0.setClasses(classArray59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator0.getStrategy();
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        boolean boolean85 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        boolean boolean88 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray14);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader12 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator13.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        generator29.setUseCache(true);
        generator29.setUseCache(false);
        java.lang.ClassLoader classLoader56 = generator29.getClassLoader();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        boolean boolean65 = generator63.getUseCache();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator63, true };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        generator13.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray80);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.core.Predicate predicate88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = namingPolicy9.getClassName("hi!", "", (java.lang.Object) classArray80, predicate88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator8.getStrategy();
        generator8.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator16.setStrategy(generatorStrategy22);
        generator16.setAttemptLoad(true);
        generator16.setUseCache(true);
        boolean boolean28 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator29.setClasses(classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        boolean boolean51 = generator49.getUseCache();
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator49, true };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray53);
        generator16.setDelegates(objArray53);
        generator0.setDelegates(objArray53);
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray35);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray50);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        boolean boolean56 = generatorStrategy28.equals((java.lang.Object) classArray55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin65.newInstance((java.lang.Object[]) classArray71);
        java.lang.Object[] objArray74 = null;
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        generator0.setDelegates(objArray41);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        boolean boolean61 = generator48.getUseCache();
        generator48.setAttemptLoad(false);
        generator48.setAttemptLoad(false);
        boolean boolean66 = generator48.getUseCache();
        java.lang.ClassLoader classLoader67 = generator48.getClassLoader();
        generator0.setClassLoader(classLoader67);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(classLoader67);
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass14 = classLoader13.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        java.lang.Class[] classArray52 = null;
        generator27.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator54.getStrategy();
        generator27.setStrategy(generatorStrategy79);
        generator0.setStrategy(generatorStrategy79);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        java.lang.ClassLoader classLoader84 = null;
        generator82.setClassLoader(classLoader84);
        boolean boolean86 = generator82.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator82.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = null;
        generator82.setStrategy(generatorStrategy88);
        generator82.setAttemptLoad(true);
        generator82.setUseCache(true);
        boolean boolean94 = generator82.getUseCache();
        boolean boolean95 = generator82.getUseCache();
        boolean boolean96 = generator82.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray97 = generatorStrategy79.generate((org.mockito.cglib.core.ClassGenerator) generator82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        generator0.setStyle(0);
        generator0.setUseCache(true);
        boolean boolean38 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin40 = generator0.create();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generatorStrategy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        boolean boolean61 = generatorStrategy51.equals((java.lang.Object) classArray59);
        generator7.setClasses(classArray59);
        generator7.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin65 = generator7.create();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        boolean boolean75 = generator73.getUseCache();
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator73, true };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator80.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = mixin65.newInstance((java.lang.Object[]) classArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray36);
        generator16.setClasses(classArray36);
        boolean boolean39 = generator16.getUseCache();
        generator16.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray62);
        generator16.setClasses(classArray51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator16.getStrategy();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        generator16.setDelegates(objArray69);
        generator16.setAttemptLoad(false);
        boolean boolean75 = generator16.getAttemptLoad();
        boolean boolean76 = generator16.getUseCache();
        java.lang.ClassLoader classLoader77 = generator16.getClassLoader();
        generator0.setClassLoader(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(classLoader77);
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        boolean boolean33 = generator10.getUseCache();
        generator10.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator36.setClasses(classArray45);
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray56);
        generator10.setClasses(classArray45);
        boolean boolean60 = generator10.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray81);
        generator61.setClasses(classArray81);
        generator61.setUseCache(true);
        generator61.setUseCache(false);
        java.lang.ClassLoader classLoader88 = generator61.getClassLoader();
        generator10.setClassLoader(classLoader88);
        generator10.setStyle(0);
        boolean boolean92 = generator10.getAttemptLoad();
        boolean boolean93 = generator10.getUseCache();
        boolean boolean94 = generatorStrategy9.equals((java.lang.Object) boolean93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        boolean boolean27 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        generator14.setDelegates(objArray37);
        generator14.setStyle(2);
        boolean boolean43 = generator14.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator14.getStrategy();
        java.lang.ClassLoader classLoader46 = generator14.getClassLoader();
        java.lang.ClassLoader classLoader47 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader47);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        java.lang.ClassLoader classLoader40 = generator13.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator48.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator48.getStrategy();
        generator41.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        generator41.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray72);
        generator0.setClasses(classArray72);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin79 = generator0.create();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin79);
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        generator32.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        generator32.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator32.getStrategy();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        generator32.setDelegates(objArray85);
        generator0.setDelegates(objArray85);
        java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        boolean boolean92 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin93 = generator0.create();
        boolean boolean94 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator7.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator7.getAttemptLoad();
        java.lang.Object[] objArray17 = null;
        generator7.setDelegates(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        generator19.setClasses(classArray39);
        generator7.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator51, true };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin43.newInstance((java.lang.Object[]) classArray50);
        generator0.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray80, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        java.lang.Class<?> wildcardClass96 = classArray95.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray39 = null;
        generator0.setClasses(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        generator0.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray27);
        generator0.setDelegates(objArray27);
        boolean boolean32 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        generator12.setUseCache(false);
        generator12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = generator20.getUseCache();
        generator20.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray66);
        generator20.setClasses(classArray55);
        boolean boolean70 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader71 = generator20.getClassLoader();
        generator12.setClassLoader(classLoader71);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator12.setDelegates((java.lang.Object[]) classArray80);
        generator12.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader84 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader84);
        boolean boolean86 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        generator10.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator10.setStrategy(generatorStrategy18);
        generator10.setUseCache(true);
        boolean boolean22 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator10.getNamingPolicy();
        boolean boolean24 = namingPolicy9.equals((java.lang.Object) generator10);
        generator10.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator0.getStrategy();
        generator0.setStyle(1);
        java.lang.ClassLoader classLoader88 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator22.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        boolean boolean36 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray27);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator0.setClasses(classArray31);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean13 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        boolean boolean23 = generator21.getUseCache();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator21, true };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray35);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator46.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setUseCache(true);
        java.lang.Object[] objArray62 = new java.lang.Object[] { generator46, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin45.newInstance(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray62);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean16 = generator0.getAttemptLoad();
        generator0.setStyle(1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator20.getStrategy();
        boolean boolean25 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator20.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator20.getNamingPolicy();
        boolean boolean29 = generator20.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray30 = generatorStrategy19.generate((org.mockito.cglib.core.ClassGenerator) generator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator25.getStrategy();
        boolean boolean77 = generator25.getUseCache();
        boolean boolean78 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        generator25.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin83 = generator25.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator27.setClassLoader(classLoader32);
        generator27.setStyle(2);
        generator27.setAttemptLoad(false);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        boolean boolean46 = generator44.getUseCache();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator44, true };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator27.setDelegates((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray63);
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setAttemptLoad(false);
        boolean boolean29 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean32 = generator0.getUseCache();
        boolean boolean33 = generator0.getAttemptLoad();
        boolean boolean34 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        generator0.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        generator38.setClassLoader(classLoader40);
        boolean boolean42 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator38.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        generator44.setClasses(classArray64);
        boolean boolean67 = namingPolicy43.equals((java.lang.Object) classArray64);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray74);
        boolean boolean78 = namingPolicy43.equals((java.lang.Object) classArray74);
        generator0.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        generator13.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator13.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray48);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin mixin74 = generator0.create();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        boolean boolean78 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator27.setDelegates((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        generator0.setDelegates((java.lang.Object[]) classArray40);
        boolean boolean42 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        generator0.setNamingPolicy(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        boolean boolean6 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader7 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        boolean boolean12 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = namingPolicy13.equals((java.lang.Object) classArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator0.setDelegates((java.lang.Object[]) classArray34);
        generator0.setAttemptLoad(false);
        boolean boolean44 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin45 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mixin45);
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        java.lang.Object obj36 = null;
        org.mockito.cglib.core.Predicate predicate37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = namingPolicy33.getClassName("", "hi!", obj36, predicate37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setStyle(1);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator20.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = mixin36.newInstance((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray45);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator58.setStrategy(generatorStrategy71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator58.getStrategy();
        generator51.setStrategy(generatorStrategy73);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        generator51.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin50.newInstance((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        generator0.setDelegates((java.lang.Object[]) classArray88);
        java.lang.Class<?> wildcardClass90 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator64.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        generator71.setUseCache(true);
        boolean boolean75 = generator71.getUseCache();
        generator71.setUseCache(true);
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator64, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator33.setDelegates(objArray80);
        boolean boolean84 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator33.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator33.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        boolean boolean88 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin92 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        boolean boolean14 = generator1.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        generator1.setDelegates(objArray24);
        generator1.setStyle(2);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray33);
        generator1.setDelegates(objArray33);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray33);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getUseCache();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        generator8.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        generator8.setStrategy(generatorStrategy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator8.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator8.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator23.setClasses(classArray35);
        java.lang.ClassLoader classLoader37 = null;
        generator23.setClassLoader(classLoader37);
        boolean boolean39 = generator23.getUseCache();
        generator23.setAttemptLoad(false);
        generator23.setStyle((int) (byte) 0);
        generator23.setUseCache(true);
        boolean boolean46 = generatorStrategy22.equals((java.lang.Object) generator23);
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator48.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator48.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator52.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator52.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator52.getNamingPolicy();
        generator48.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator48.setNamingPolicy(namingPolicy58);
        boolean boolean60 = generator48.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator62.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator62.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator62.getStrategy();
        boolean boolean67 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator62.getStrategy();
        generator48.setStrategy(generatorStrategy68);
        boolean boolean70 = generatorStrategy22.equals((java.lang.Object) generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator7.setClasses(classArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator7.setClassLoader(classLoader21);
        boolean boolean23 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getAttemptLoad();
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator40.setClassLoader(classLoader42);
        boolean boolean44 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin mixin47 = generator28.create();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setAttemptLoad(true);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        generator48.setDelegates(objArray57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray68);
        generator48.setClasses(classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        generator71.setUseCache(true);
        boolean boolean75 = generator71.getUseCache();
        generator71.setAttemptLoad(true);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        generator71.setDelegates(objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray80);
        generator28.setDelegates(objArray80);
        generator28.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator28.getStrategy();
        java.lang.ClassLoader classLoader88 = generator28.getClassLoader();
        generator0.setClassLoader(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray32);
        generator11.setDelegates((java.lang.Object[]) classArray32);
        generator11.setAttemptLoad(true);
        generator11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        boolean boolean44 = generator42.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray51);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        generator0.setClasses(classArray51);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = null;
        generator64.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        generator71.setUseCache(true);
        boolean boolean75 = generator71.getUseCache();
        generator71.setUseCache(true);
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator64, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray86);
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator24.setClasses(classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray57);
        generator37.setClasses(classArray57);
        boolean boolean60 = generator37.getUseCache();
        generator37.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray83);
        generator37.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray72);
        generator19.setDelegates((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        java.lang.Class<?> wildcardClass93 = mixin92.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator7.setClasses(classArray19);
        java.lang.ClassLoader classLoader21 = null;
        generator7.setClassLoader(classLoader21);
        boolean boolean23 = generator7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generator0.getAttemptLoad();
        boolean boolean27 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator28.getStrategy();
        java.lang.ClassLoader classLoader33 = null;
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = mixin41.newInstance((java.lang.Object[]) classArray47);
        boolean boolean50 = generatorStrategy32.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        generator60.setClasses(classArray72);
        generator51.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = generator51.create();
        org.mockito.cglib.proxy.Mixin mixin76 = generator51.create();
        generator51.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin79 = generator51.create();
        org.mockito.cglib.proxy.Mixin mixin80 = generator51.create();
        generator51.setUseCache(true);
        org.mockito.cglib.proxy.Mixin mixin83 = generator51.create();
        generator51.setAttemptLoad(false);
        boolean boolean86 = generatorStrategy32.equals((java.lang.Object) false);
        generator0.setStrategy(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass19 = classLoader18.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator52.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator52.getStrategy();
        java.lang.ClassLoader classLoader68 = null;
        generator52.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator52.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin mixin72 = generator0.create();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator0.getNamingPolicy();
        boolean boolean76 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        java.lang.ClassLoader classLoader79 = null;
        generator77.setClassLoader(classLoader79);
        generator77.setUseCache(false);
        generator77.setAttemptLoad(false);
        generator77.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator77.getStrategy();
        generator0.setStrategy(generatorStrategy87);
        org.mockito.cglib.proxy.Mixin mixin89 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        boolean boolean28 = generator0.getUseCache();
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        boolean boolean34 = generator30.getAttemptLoad();
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator30.setClasses(classArray42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        boolean boolean52 = generator50.getUseCache();
        java.lang.Object[] objArray54 = new java.lang.Object[] { generator50, true };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray54);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        generator0.setClasses(classArray42);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        generator0.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin mixin34 = generator15.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator15.getStrategy();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray42);
        generator15.setClasses(classArray42);
        java.lang.ClassLoader classLoader47 = generator15.getClassLoader();
        generator0.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator0.setStrategy(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator9.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator18.setClassLoader(classLoader20);
        generator18.setUseCache(false);
        generator18.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray46);
        generator26.setClasses(classArray46);
        boolean boolean49 = generator26.getUseCache();
        generator26.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray72);
        generator26.setClasses(classArray61);
        boolean boolean76 = generator26.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = generator26.getClassLoader();
        generator18.setClassLoader(classLoader77);
        generator9.setClassLoader(classLoader77);
        generator0.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader81 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader81);
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        boolean boolean20 = generator0.getUseCache();
        boolean boolean21 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader22 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        boolean boolean16 = generator0.getUseCache();
        boolean boolean17 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        boolean boolean41 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin42 = generator0.create();
        generator0.setAttemptLoad(true);
        boolean boolean45 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader48 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(classLoader48);
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader3, (java.lang.Object[]) classArray9);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        generator27.setStrategy(generatorStrategy49);
        generator15.setStrategy(generatorStrategy49);
        generator15.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Object[] objArray64 = null;
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        boolean boolean70 = generator66.getAttemptLoad();
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator66.setClasses(classArray78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getUseCache();
        boolean boolean88 = generator86.getUseCache();
        java.lang.Object[] objArray90 = new java.lang.Object[] { generator86, true };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray78, objArray90);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray90);
        generator0.setDelegates(objArray90);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(classArray98);
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator11.setStrategy(generatorStrategy13);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator11.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator26.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        generator26.setStrategy(generatorStrategy30);
        generator11.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        boolean boolean45 = generatorStrategy30.equals((java.lang.Object) mixin44);
        generator0.setStrategy(generatorStrategy30);
        boolean boolean47 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean50 = generator0.getAttemptLoad();
        boolean boolean51 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator25.setStrategy(generatorStrategy51);
        boolean boolean53 = generator25.getUseCache();
        boolean boolean54 = generator25.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator55.setClasses(classArray67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        boolean boolean77 = generator75.getUseCache();
        java.lang.Object[] objArray79 = new java.lang.Object[] { generator75, true };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray90);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        generator25.setClasses(classArray67);
        org.mockito.cglib.proxy.Mixin mixin99 = mixin24.newInstance((java.lang.Object[]) classArray67);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray74);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin19.newInstance((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        boolean boolean61 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator57.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setUseCache(true);
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator57, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin56.newInstance(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator0.setClasses(classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        boolean boolean12 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = null;
        generator8.setNamingPolicy(namingPolicy13);
        generator8.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator8.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator27.setDelegates((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin43.newInstance((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        generator0.setClasses(classArray56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass60 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setUseCache(false);
        boolean boolean74 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator0.setStrategy(generatorStrategy75);
        boolean boolean77 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        java.lang.ClassLoader classLoader40 = generator13.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator48.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator48.getStrategy();
        generator41.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        generator41.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray72);
        generator0.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        generator77.setUseCache(true);
        boolean boolean81 = generator77.getUseCache();
        generator77.setAttemptLoad(true);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        generator77.setDelegates(objArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray86);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator19, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator0.setClasses(classArray38);
        org.mockito.asm.ClassVisitor classVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator18.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        generator18.setStrategy(generatorStrategy22);
        generator18.setUseCache(false);
        boolean boolean26 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        generator27.setUseCache(true);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader54 = generator27.getClassLoader();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        boolean boolean63 = generator61.getUseCache();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator61, true };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator68.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        generator18.setDelegates((java.lang.Object[]) classArray80);
        generator0.setDelegates((java.lang.Object[]) classArray80);
        boolean boolean83 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator33.setStrategy(generatorStrategy39);
        generator33.setAttemptLoad(true);
        generator33.setUseCache(true);
        boolean boolean45 = generator33.getUseCache();
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator33.setDelegates((java.lang.Object[]) classArray53);
        boolean boolean56 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setStyle(0);
        generator33.setUseCache(false);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator33.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setAttemptLoad(false);
        java.lang.ClassLoader classLoader40 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader40);
        java.lang.Object[] objArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader40);
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setUseCache(true);
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator32, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin31.newInstance(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray48);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin40 = generator0.create();
        java.lang.ClassLoader classLoader41 = generator0.getClassLoader();
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader44 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.ClassLoader classLoader9 = null;
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, (java.lang.Object[]) classArray15);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray27);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin20.newInstance((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator0.setStrategy(generatorStrategy37);
        generator0.setStyle((int) (short) 0);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        generator0.setClasses(classArray48);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(namingPolicy52);
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader33 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = generator34.getNamingPolicy();
        java.lang.ClassLoader classLoader50 = generator34.getClassLoader();
        generator0.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray59);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin61);
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setStyle(1);
        boolean boolean12 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        generator18.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator18.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator25.getStrategy();
        generator18.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator18.setNamingPolicy(namingPolicy30);
        generator18.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.Predicate predicate41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = namingPolicy15.getClassName("", "", (java.lang.Object) generator18, predicate41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader19 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator20.setClasses(classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator20.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator20.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        generator36.setUseCache(true);
        generator36.setUseCache(false);
        java.lang.ClassLoader classLoader63 = generator36.getClassLoader();
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        boolean boolean72 = generator70.getUseCache();
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator70, true };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator77.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator20.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray87);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin12.newInstance((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator26.getStrategy();
        generator24.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = namingPolicy41.equals((java.lang.Object) classArray62);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray72);
        boolean boolean76 = namingPolicy41.equals((java.lang.Object) classArray72);
        generator24.setNamingPolicy(namingPolicy41);
        java.lang.Class[] classArray78 = null;
        generator24.setClasses(classArray78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator24.setClasses(classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        boolean boolean61 = generator0.getUseCache();
        java.lang.ClassLoader classLoader62 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray23);
        generator0.setClasses(classArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator46.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader56 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        boolean boolean61 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        boolean boolean86 = namingPolicy62.equals((java.lang.Object) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray53);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray91);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        generator17.setUseCache(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        java.lang.Class<?> wildcardClass30 = mixin29.getClass();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        generator38.setClassLoader(classLoader40);
        boolean boolean42 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        generator38.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setUseCache(true);
        java.lang.Object[] objArray54 = new java.lang.Object[] { generator38, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin37.newInstance(objArray54);
        java.lang.Class<?> wildcardClass57 = mixin56.getClass();
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass30, wildcardClass57 };
        generator17.setClasses(classArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator17.setDelegates((java.lang.Object[]) classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        boolean boolean10 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean13 = generator0.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        generator0.setDelegates(objArray16);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        generator14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setUseCache(true);
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator14, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator0.setClasses(classArray34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        boolean boolean31 = generator29.getUseCache();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator29, true };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin mixin70 = generator0.create();
        java.lang.ClassLoader classLoader71 = generator0.getClassLoader();
        boolean boolean72 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(namingPolicy73);
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator24.getStrategy();
        boolean boolean44 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator46.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        java.lang.ClassLoader classLoader75 = null;
        generator73.setClassLoader(classLoader75);
        boolean boolean77 = generator73.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy78);
        generator46.setNamingPolicy(namingPolicy78);
        java.lang.ClassLoader classLoader81 = generator46.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator46.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin83 = generator46.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator46.getStrategy();
        boolean boolean85 = generatorStrategy45.equals((java.lang.Object) generator46);
        boolean boolean86 = generator46.getAttemptLoad();
        boolean boolean87 = generator46.getAttemptLoad();
        boolean boolean88 = namingPolicy23.equals((java.lang.Object) generator46);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = mixin16.newInstance((java.lang.Object[]) classArray25);
        boolean boolean27 = generatorStrategy8.equals((java.lang.Object) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin29.newInstance((java.lang.Object[]) classArray45);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator18.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator24.getStrategy();
        generator18.setStrategy(generatorStrategy26);
        boolean boolean28 = namingPolicy17.equals((java.lang.Object) generator18);
        generator18.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator18.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator41.setDelegates((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin57.newInstance((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray66);
        generator0.setDelegates((java.lang.Object[]) classArray51);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        boolean boolean12 = generator10.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        generator10.setClasses(classArray19);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = mixin30.newInstance((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        generator42.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass16 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setUseCache(true);
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator28, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        generator0.setClasses(classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator50.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator54.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator54.getNamingPolicy();
        generator50.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator50.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        generator66.setUseCache(false);
        generator66.setUseCache(false);
        boolean boolean74 = generator66.getUseCache();
        boolean boolean75 = generator66.getAttemptLoad();
        generator66.setUseCache(true);
        java.lang.Class[] classArray78 = null;
        generator66.setClasses(classArray78);
        org.mockito.cglib.core.Predicate predicate80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = namingPolicy62.getClassName("hi!", "", (java.lang.Object) generator66, predicate80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setAttemptLoad(true);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        generator50.setDelegates(objArray59);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray70);
        generator50.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        generator73.setDelegates(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin49.newInstance((java.lang.Object[]) classArray86);
        java.lang.Class<?> wildcardClass88 = mixin49.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        generator10.setUseCache(true);
        boolean boolean24 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator10.getNamingPolicy();
        boolean boolean26 = generator10.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        generator27.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator27.getStrategy();
        generator27.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        java.lang.ClassLoader classLoader44 = null;
        generator35.setClassLoader(classLoader44);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator35.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin47 = generator35.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator35.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator49.getStrategy();
        generator49.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator55.getStrategy();
        generator49.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator49.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator49.getAttemptLoad();
        boolean boolean63 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator49.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        boolean boolean67 = generator65.getAttemptLoad();
        boolean boolean68 = generator65.getAttemptLoad();
        boolean boolean69 = namingPolicy64.equals((java.lang.Object) boolean68);
        boolean boolean70 = generatorStrategy48.equals((java.lang.Object) namingPolicy64);
        generator27.setStrategy(generatorStrategy48);
        generator10.setStrategy(generatorStrategy48);
        generator0.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray25);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin38);
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator14.setStrategy(generatorStrategy40);
        generator14.setUseCache(true);
        java.lang.ClassLoader classLoader44 = generator14.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator45.setClasses(classArray54);
        boolean boolean58 = generator45.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        generator45.setDelegates(objArray68);
        generator45.setStyle(2);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        generator45.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray77);
        generator0.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray91);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generatorStrategy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator27.getStrategy();
        generator27.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        generator27.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator27.getNamingPolicy();
        boolean boolean38 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator39.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator56.getStrategy();
        generator54.setStrategy(generatorStrategy58);
        generator39.setStrategy(generatorStrategy58);
        generator39.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader63 = generator39.getClassLoader();
        java.lang.ClassLoader classLoader64 = generator39.getClassLoader();
        generator27.setClassLoader(classLoader64);
        java.lang.ClassLoader classLoader66 = generator27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator27.getStrategy();
        generator7.setStrategy(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray58);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        boolean boolean73 = generator71.getUseCache();
        java.lang.Object[] objArray75 = new java.lang.Object[] { generator71, true };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin64.newInstance(objArray75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        generator27.setAttemptLoad(false);
        java.lang.ClassLoader classLoader53 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray75);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray90);
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        generator14.setUseCache(false);
        generator14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        boolean boolean72 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = generator22.getClassLoader();
        generator14.setClassLoader(classLoader73);
        generator5.setClassLoader(classLoader73);
        generator0.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator0.getStrategy();
        boolean boolean79 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        boolean boolean81 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setAttemptLoad(false);
        boolean boolean29 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        generator33.setUseCache(false);
        generator33.setUseCache(false);
        boolean boolean41 = generator33.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator42.setClassLoader(classLoader47);
        generator42.setStyle(2);
        generator42.setAttemptLoad(false);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        boolean boolean61 = generator59.getUseCache();
        java.lang.Object[] objArray63 = new java.lang.Object[] { generator59, true };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator66.setDelegates((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        generator42.setDelegates((java.lang.Object[]) classArray73);
        boolean boolean78 = generator42.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator42.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy79);
        generator0.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        boolean boolean9 = generator5.getAttemptLoad();
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator5.setClasses(classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        generator19.setClasses(classArray39);
        generator19.setUseCache(true);
        generator19.setUseCache(false);
        java.lang.ClassLoader classLoader46 = generator19.getClassLoader();
        generator5.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray52);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin53.newInstance((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray91);
        generator0.setClassLoader(classLoader46);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setClasses(classArray68);
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        boolean boolean30 = generator0.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray45);
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        boolean boolean26 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        generator31.setStrategy(generatorStrategy35);
        generator31.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setUseCache(true);
        generator39.setStyle((int) (byte) 0);
        generator39.setStyle((int) (byte) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator39.getStrategy();
        generator31.setStrategy(generatorStrategy50);
        boolean boolean52 = namingPolicy30.equals((java.lang.Object) generator31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator31.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator31.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(true);
        boolean boolean5 = generator0.getUseCache();
        generator0.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator8.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator8.getStrategy();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        boolean boolean28 = generatorStrategy16.equals((java.lang.Object) classArray27);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        boolean boolean30 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        boolean boolean9 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = namingPolicy10.equals((java.lang.Object) classArray31);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray41);
        boolean boolean45 = namingPolicy10.equals((java.lang.Object) classArray41);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        boolean boolean47 = namingPolicy4.equals((java.lang.Object) classArray41);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        boolean boolean43 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        boolean boolean18 = generator16.getUseCache();
        java.lang.Object[] objArray20 = new java.lang.Object[] { generator16, true };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray15, objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator23.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin40.newInstance((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray49);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin53 = generator0.create();
        generator0.setStyle(0);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        boolean boolean59 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        boolean boolean68 = generator66.getUseCache();
        java.lang.Object[] objArray70 = new java.lang.Object[] { generator66, true };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getAttemptLoad();
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator73.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        generator0.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.asm.ClassVisitor classVisitor87 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator0.setClassLoader(classLoader16);
        boolean boolean18 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        generator21.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin mixin40 = generator21.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator21.getStrategy();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        generator21.setClasses(classArray48);
        java.lang.ClassLoader classLoader53 = generator21.getClassLoader();
        java.lang.ClassLoader classLoader54 = generator21.getClassLoader();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        boolean boolean63 = generator61.getUseCache();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator61, true };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator68.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray75);
        generator0.setClassLoader(classLoader54);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        generator0.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        generator0.setStyle(0);
        boolean boolean73 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator0.getNamingPolicy();
        boolean boolean75 = generator0.getUseCache();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader76);
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator11.getStrategy();
        generator9.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator9.setDelegates(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader28 = null;
        generator27.setClassLoader(classLoader28);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        boolean boolean34 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator30.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        boolean boolean59 = namingPolicy35.equals((java.lang.Object) classArray56);
        generator27.setNamingPolicy(namingPolicy35);
        generator9.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        generator62.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator62.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator69.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator69.getStrategy();
        generator62.setStrategy(generatorStrategy72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator62.setStrategy(generatorStrategy74);
        boolean boolean76 = namingPolicy35.equals((java.lang.Object) generator62);
        generator0.setNamingPolicy(namingPolicy35);
        java.lang.Class<?> wildcardClass78 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(mixin21);
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        boolean boolean24 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        java.lang.ClassLoader classLoader27 = null;
        generator25.setClassLoader(classLoader27);
        boolean boolean29 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator25.setStrategy(generatorStrategy31);
        generator25.setAttemptLoad(true);
        generator25.setUseCache(true);
        boolean boolean37 = generator25.getUseCache();
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray45);
        generator25.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        java.lang.ClassLoader classLoader50 = null;
        generator48.setClassLoader(classLoader50);
        boolean boolean52 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = null;
        generator48.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader55 = null;
        generator48.setClassLoader(classLoader55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator48.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator25.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        generator60.setDelegates(objArray69);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray80);
        generator60.setClasses(classArray80);
        generator60.setUseCache(true);
        generator60.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin87 = generator60.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator60.getNamingPolicy();
        boolean boolean89 = generatorStrategy59.equals((java.lang.Object) generator60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator60.getStrategy();
        generator0.setStrategy(generatorStrategy90);
        boolean boolean92 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        generator10.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator10.setDelegates(objArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = generator10.create();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator22.getStrategy();
        generator10.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator50.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator50.getStrategy();
        generator50.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator56.getStrategy();
        generator50.setStrategy(generatorStrategy58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator50.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        generator50.setNamingPolicy(namingPolicy61);
        boolean boolean63 = generator50.getAttemptLoad();
        generator50.setStyle((int) (byte) 0);
        generator50.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator50.getStrategy();
        boolean boolean69 = generatorStrategy48.equals((java.lang.Object) generatorStrategy68);
        generator0.setStrategy(generatorStrategy48);
        boolean boolean71 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        boolean boolean20 = generator18.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator18.getStrategy();
        generator18.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator32.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray39);
        generator18.setClasses(classArray39);
        java.lang.ClassLoader classLoader43 = generator18.getClassLoader();
        generator0.setClassLoader(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classLoader43);
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator9.setStrategy(generatorStrategy15);
        generator9.setAttemptLoad(true);
        generator9.setUseCache(false);
        boolean boolean21 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator22.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        boolean boolean44 = generator42.getUseCache();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator42, true };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray46);
        generator9.setDelegates((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray34);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        generator55.setDelegates(objArray64);
        generator55.setUseCache(true);
        boolean boolean69 = generator55.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator55.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        java.lang.ClassLoader classLoader73 = null;
        generator71.setClassLoader(classLoader73);
        boolean boolean75 = generator71.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = null;
        generator71.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        generator78.setUseCache(true);
        boolean boolean82 = generator78.getUseCache();
        generator78.setUseCache(true);
        java.lang.Object[] objArray87 = new java.lang.Object[] { generator71, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray87);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator55.setClasses(classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        java.lang.Class[] classArray52 = null;
        generator27.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator54.getStrategy();
        generator27.setStrategy(generatorStrategy79);
        generator0.setStrategy(generatorStrategy79);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader84 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        boolean boolean28 = generator0.getUseCache();
        boolean boolean29 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator30.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator30.setClasses(classArray39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator30.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator30.getStrategy();
        java.lang.ClassLoader classLoader46 = null;
        generator30.setClassLoader(classLoader46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setAttemptLoad(true);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        generator56.setDelegates(objArray65);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray76);
        generator56.setClasses(classArray76);
        boolean boolean79 = namingPolicy55.equals((java.lang.Object) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator0.setDelegates((java.lang.Object[]) classArray76);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        boolean boolean12 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator17.getNamingPolicy();
        generator17.setAttemptLoad(false);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator17.setClasses(classArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        boolean boolean41 = generator39.getUseCache();
        java.lang.Object[] objArray43 = new java.lang.Object[] { generator39, true };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        generator46.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        boolean boolean71 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = null;
        generator67.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        generator74.setUseCache(true);
        boolean boolean78 = generator74.getUseCache();
        generator74.setUseCache(true);
        java.lang.Object[] objArray83 = new java.lang.Object[] { generator67, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin60.newInstance((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray85);
        generator0.setClasses(classArray28);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        boolean boolean18 = generator0.getUseCache();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator20.setClasses(classArray29);
        boolean boolean33 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        generator20.setDelegates(objArray43);
        generator20.setStyle(2);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        generator20.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = mixin57.newInstance((java.lang.Object[]) classArray63);
        generator0.setDelegates((java.lang.Object[]) classArray63);
        boolean boolean69 = generator0.getUseCache();
        java.lang.Class[] classArray70 = null;
        generator0.setClasses(classArray70);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        boolean boolean14 = generator12.getUseCache();
        java.lang.Object[] objArray16 = new java.lang.Object[] { generator12, true };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator19.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, (java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator37.setClassLoader(classLoader39);
        boolean boolean41 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator37.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setUseCache(true);
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator37, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = mixin36.newInstance(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        generator0.setStyle(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        java.lang.Object[] objArray21 = null;
        generator0.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator23.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator23.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator23.getStrategy();
        boolean boolean33 = generator23.getAttemptLoad();
        boolean boolean34 = generator23.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        java.lang.ClassLoader classLoader49 = null;
        generator47.setClassLoader(classLoader49);
        boolean boolean51 = generator47.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin mixin54 = generator35.create();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator63.setDelegates((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray70);
        generator35.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator35.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator35.getClassLoader();
        generator23.setClassLoader(classLoader75);
        generator0.setClassLoader(classLoader75);
        generator0.setStyle(0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        boolean boolean7 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray29);
        generator8.setDelegates((java.lang.Object[]) classArray29);
        generator8.setAttemptLoad(true);
        generator8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        generator38.setClassLoader(classLoader40);
        boolean boolean42 = generator38.getAttemptLoad();
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        generator38.setClasses(classArray50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        boolean boolean60 = generator58.getUseCache();
        java.lang.Object[] objArray62 = new java.lang.Object[] { generator58, true };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        boolean boolean75 = generator73.getUseCache();
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator73, true };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator80.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        boolean boolean93 = namingPolicy37.equals((java.lang.Object) classArray50);
        generator5.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin mixin95 = mixin4.newInstance((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator71.setDelegates((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = mixin83.newInstance((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray62);
        generator0.setClassLoader(classLoader52);
        boolean boolean78 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator9.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        generator24.setNamingPolicy(namingPolicy41);
        generator9.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader44 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator51, true };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray65);
        generator0.setClassLoader(classLoader44);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classLoader70);
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator1.setStrategy(generatorStrategy14);
        generator1.setUseCache(false);
        boolean boolean18 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = generator1.getClassLoader();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = mixin25.newInstance((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        generator0.setStyle(0);
        boolean boolean73 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator0.getNamingPolicy();
        java.lang.Object obj77 = null;
        boolean boolean78 = namingPolicy76.equals(obj77);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator0.setClasses(classArray63);
        boolean boolean65 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator11.setNamingPolicy(namingPolicy18);
        boolean boolean20 = generator11.getAttemptLoad();
        java.lang.Object[] objArray21 = null;
        generator11.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        generator11.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setClasses(classArray43);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator59.setDelegates((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin50.newInstance((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        java.lang.ClassLoader classLoader77 = null;
        generator75.setClassLoader(classLoader77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator79.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator79.getNamingPolicy();
        generator75.setNamingPolicy(namingPolicy83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator75.getStrategy();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader88 = null;
        java.lang.ClassLoader classLoader89 = null;
        java.lang.Object[] objArray91 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader89, objArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(objArray91);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, (java.lang.Object[]) classArray94);
        generator75.setDelegates((java.lang.Object[]) classArray94);
        org.mockito.cglib.proxy.Mixin mixin98 = mixin74.newInstance((java.lang.Object[]) classArray94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[10]");
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray6);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = mixin7.newInstance((java.lang.Object[]) classArray16);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        boolean boolean27 = generator25.getUseCache();
        java.lang.Object[] objArray29 = new java.lang.Object[] { generator25, true };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator32.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray16, (java.lang.Object[]) classArray24);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        boolean boolean45 = namingPolicy1.equals((java.lang.Object) mixin44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator48.getStrategy();
        generator46.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator46.setDelegates(objArray59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator46.getStrategy();
        generator46.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator46.getNamingPolicy();
        generator46.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin70 = generator46.create();
        boolean boolean71 = namingPolicy1.equals((java.lang.Object) generator46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator46.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator46.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        boolean boolean64 = generator33.getUseCache();
        boolean boolean65 = generator33.getUseCache();
        boolean boolean66 = generator33.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        generator6.setUseCache(false);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        boolean boolean64 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = generator14.getClassLoader();
        generator6.setClassLoader(classLoader65);
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator6.setDelegates((java.lang.Object[]) classArray74);
        java.lang.ClassLoader classLoader76 = generator6.getClassLoader();
        generator0.setClassLoader(classLoader76);
        generator0.setAttemptLoad(false);
        generator0.setStyle(1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classLoader76);
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class<?> wildcardClass13 = mixin12.getClass();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator21, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray37);
        java.lang.Class<?> wildcardClass40 = mixin39.getClass();
        java.lang.Class[] classArray41 = new java.lang.Class[] { wildcardClass13, wildcardClass40 };
        generator0.setClasses(classArray41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator0.getNamingPolicy();
        boolean boolean44 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        generator27.setUseCache(true);
        generator27.setUseCache(false);
        java.lang.ClassLoader classLoader54 = generator27.getClassLoader();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        boolean boolean63 = generator61.getUseCache();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator61, true };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getAttemptLoad();
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        generator68.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray78);
        generator0.setClassLoader(classLoader54);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator82.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator82.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator82.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator82.getNamingPolicy();
        boolean boolean88 = generator82.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator82.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy89);
        boolean boolean91 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin93 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator5.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator19.getStrategy();
        generator5.setStrategy(generatorStrategy31);
        generator0.setStrategy(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin12.newInstance((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        generator0.setStyle((int) (byte) 0);
        boolean boolean26 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator13.setClasses(classArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        boolean boolean35 = generator33.getUseCache();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator33, true };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray37);
        generator0.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray25);
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator17.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator17.getStrategy();
        generator10.setStrategy(generatorStrategy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator34.setDelegates((java.lang.Object[]) classArray41);
        generator10.setDelegates((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = generator10.create();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        java.lang.ClassLoader classLoader56 = null;
        generator54.setClassLoader(classLoader56);
        boolean boolean58 = generator54.getAttemptLoad();
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator54.setClasses(classArray66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        boolean boolean76 = generator74.getUseCache();
        java.lang.Object[] objArray78 = new java.lang.Object[] { generator74, true };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray52, objArray78);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        generator83.setAttemptLoad(true);
        java.lang.ClassLoader classLoader90 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader90, objArray92);
        generator83.setDelegates(objArray92);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray95);
        org.mockito.cglib.proxy.Mixin mixin97 = mixin44.newInstance((java.lang.Object[]) classArray52);
        boolean boolean98 = generatorStrategy9.equals((java.lang.Object) mixin44);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin25.newInstance((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator34.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator34, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        generator56.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator63.setClasses(classArray75);
        java.lang.ClassLoader classLoader77 = null;
        generator63.setClassLoader(classLoader77);
        boolean boolean79 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator63.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy80);
        generator0.setNamingPolicy(namingPolicy80);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader86 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(classLoader86);
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setAttemptLoad(false);
        boolean boolean41 = generator15.getAttemptLoad();
        boolean boolean42 = generator15.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator15.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy43);
        boolean boolean45 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        boolean boolean24 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator43.setClasses(classArray52);
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        generator66.setStrategy(generatorStrategy68);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        generator66.setClasses(classArray75);
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin42.newInstance((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        boolean boolean15 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator16.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator26.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator26.getStrategy();
        generator16.setStrategy(generatorStrategy41);
        generator0.setStrategy(generatorStrategy41);
        generator0.setUseCache(true);
        generator0.setStyle(2);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        boolean boolean35 = namingPolicy11.equals((java.lang.Object) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { 1L, '4', classArray32, generator36, classArray68 };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator0.getNamingPolicy();
        boolean boolean86 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator12.setStrategy(generatorStrategy25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator12.getStrategy();
        generator12.setAttemptLoad(true);
        generator12.setUseCache(true);
        generator12.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator12.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        generator35.setAttemptLoad(false);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator35.setDelegates(objArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = generator35.create();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        java.lang.ClassLoader classLoader49 = null;
        generator47.setClassLoader(classLoader49);
        boolean boolean51 = generator47.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator47.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setUseCache(true);
        java.lang.Object[] objArray63 = new java.lang.Object[] { generator47, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = mixin46.newInstance(objArray63);
        generator12.setDelegates(objArray63);
        java.lang.ClassLoader classLoader67 = generator12.getClassLoader();
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray77);
        generator0.setClassLoader(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean11 = generatorStrategy9.equals((java.lang.Object) 0L);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator12.getNamingPolicy();
        generator12.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator12.getClassLoader();
        boolean boolean39 = generator12.getAttemptLoad();
        generator12.setAttemptLoad(true);
        boolean boolean42 = generator12.getAttemptLoad();
        boolean boolean43 = generatorStrategy9.equals((java.lang.Object) generator12);
        java.lang.ClassLoader classLoader44 = generator12.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator12.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader44);
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray42);
        generator0.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        java.lang.ClassLoader classLoader50 = null;
        generator48.setClassLoader(classLoader50);
        boolean boolean52 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = namingPolicy53.equals((java.lang.Object) classArray74);
        generator46.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        boolean boolean80 = generator0.getUseCache();
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        generator0.setDelegates((java.lang.Object[]) classArray88);
        java.lang.ClassLoader classLoader93 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader94 = generator0.getClassLoader();
        boolean boolean95 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass96 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator6.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setUseCache(true);
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator6, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(objArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = mixin30.newInstance((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = mixin25.newInstance((java.lang.Object[]) classArray38);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator19, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator0.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator40.getStrategy();
        generator40.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        generator40.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator40.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        java.lang.ClassLoader classLoader64 = null;
        generator62.setClassLoader(classLoader64);
        boolean boolean66 = generator62.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        generator62.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        generator69.setUseCache(true);
        boolean boolean73 = generator69.getUseCache();
        generator69.setUseCache(true);
        java.lang.Object[] objArray78 = new java.lang.Object[] { generator62, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        generator0.setDelegates((java.lang.Object[]) classArray61);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        generator72.setUseCache(true);
        boolean boolean76 = generator72.getUseCache();
        generator72.setUseCache(true);
        generator72.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator81.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator83.getStrategy();
        generator81.setStrategy(generatorStrategy85);
        generator72.setStrategy(generatorStrategy85);
        generator0.setStrategy(generatorStrategy85);
        generator0.setUseCache(false);
        boolean boolean91 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        boolean boolean94 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator18.setClassLoader(classLoader20);
        boolean boolean22 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        generator18.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setUseCache(true);
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator18, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray34);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        generator1.setClassLoader(classLoader3);
        boolean boolean5 = generator1.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator1.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, (java.lang.Object[]) classArray27);
        generator7.setClasses(classArray27);
        boolean boolean30 = namingPolicy6.equals((java.lang.Object) classArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray27);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        boolean boolean36 = generator34.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator34.getStrategy();
        generator34.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator48.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray55);
        generator34.setClasses(classArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        boolean boolean20 = generator7.getUseCache();
        generator7.setAttemptLoad(false);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator31.setDelegates((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray30, (java.lang.Object[]) classArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        generator7.setClasses(classArray41);
        java.lang.ClassLoader classLoader43 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator45.setClasses(classArray57);
        java.lang.ClassLoader classLoader59 = null;
        generator45.setClassLoader(classLoader59);
        boolean boolean61 = generator45.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray83);
        generator45.setDelegates((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray91);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator52.setClasses(classArray64);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        boolean boolean74 = generator72.getUseCache();
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator72, true };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray71, objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray87);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray87);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray96);
        java.lang.Class<?> wildcardClass98 = classArray96.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin6.newInstance((java.lang.Object[]) classArray15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator36.setClasses(classArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        boolean boolean58 = generator56.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator56, true };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray71);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.ClassLoader classLoader87 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator85.setDelegates((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray84, (java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray71, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray84);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, (java.lang.Object[]) classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = mixin12.newInstance((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        java.lang.Class<?> wildcardClass28 = classArray23.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        boolean boolean16 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator17.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator17.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy26);
        boolean boolean28 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass29 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        boolean boolean28 = generator0.getUseCache();
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        java.lang.Object[] objArray72 = null;
        generator0.setDelegates(objArray72);
        generator0.setAttemptLoad(false);
        generator0.setStyle(1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        generator0.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        generator23.setClasses(classArray32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator23.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        boolean boolean40 = generator38.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator38.getStrategy();
        generator38.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray59);
        generator38.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        boolean boolean72 = generator70.getUseCache();
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator70, true };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        generator77.setDelegates((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray84);
        generator23.setClasses(classArray59);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        generator0.setClasses(classArray59);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray91);
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator19.getStrategy();
        generator19.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        generator19.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator19.setNamingPolicy(namingPolicy30);
        boolean boolean32 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator34.getStrategy();
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        boolean boolean70 = generator66.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        generator66.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setUseCache(true);
        java.lang.Object[] objArray82 = new java.lang.Object[] { generator66, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = mixin65.newInstance(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        boolean boolean86 = generatorStrategy58.equals((java.lang.Object) objArray82);
        boolean boolean87 = generatorStrategy33.equals((java.lang.Object) generatorStrategy58);
        generator0.setStrategy(generatorStrategy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy89);
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        java.lang.Class[] classArray54 = null;
        generator0.setClasses(classArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = generator56.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy61);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin63 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setUseCache(true);
        generator10.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader19 = null;
        generator10.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator21.setClassLoader(classLoader26);
        generator21.setAttemptLoad(false);
        generator21.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        boolean boolean56 = generator32.getAttemptLoad();
        java.lang.Object[] objArray57 = null;
        generator32.setDelegates(objArray57);
        java.lang.ClassLoader classLoader59 = generator32.getClassLoader();
        generator21.setClassLoader(classLoader59);
        generator10.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        java.lang.ClassLoader classLoader64 = null;
        generator62.setClassLoader(classLoader64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator66.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator66.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator66.getNamingPolicy();
        generator62.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator62.getNamingPolicy();
        boolean boolean73 = generator62.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        generator74.setUseCache(true);
        boolean boolean78 = generator74.getUseCache();
        generator74.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator74.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator74.getStrategy();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, (java.lang.Object[]) classArray89);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        boolean boolean94 = generatorStrategy82.equals((java.lang.Object) classArray93);
        generator62.setClasses(classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray93);
        generator0.setClasses(classArray93);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator6.setClasses(classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator26, true };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray30);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin35 = mixin5.newInstance((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        boolean boolean32 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        generator0.setDelegates(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        generator27.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator27.setStrategy(generatorStrategy53);
        generator27.setUseCache(true);
        java.lang.ClassLoader classLoader57 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader57);
        java.lang.Object[] objArray59 = null;
        generator0.setDelegates(objArray59);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader63 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader64 = generator0.getClassLoader();
        boolean boolean65 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator14.getStrategy();
        boolean boolean19 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator14.getStrategy();
        generator0.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator22.getStrategy();
        generator22.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin40 = generator22.create();
        boolean boolean41 = generatorStrategy20.equals((java.lang.Object) generator22);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        java.lang.ClassLoader classLoader56 = null;
        generator54.setClassLoader(classLoader56);
        boolean boolean58 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator54.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator42.getStrategy();
        boolean boolean62 = generator42.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator63.setClasses(classArray75);
        java.lang.ClassLoader classLoader77 = null;
        generator63.setClassLoader(classLoader77);
        java.lang.ClassLoader classLoader79 = generator63.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator63.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy80);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray82 = generatorStrategy20.generate((org.mockito.cglib.core.ClassGenerator) generator42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        boolean boolean23 = generator21.getUseCache();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator21, true };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray35);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        generator0.setClasses(classArray35);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray13, (java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.beans.IntrospectionException-->java.lang.Object not superclass of java.io.Serializable");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classLoader25);
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray48);
        generator28.setClasses(classArray48);
        generator28.setUseCache(true);
        generator28.setUseCache(false);
        java.lang.ClassLoader classLoader55 = generator28.getClassLoader();
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        boolean boolean64 = generator62.getUseCache();
        java.lang.Object[] objArray66 = new java.lang.Object[] { generator62, true };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray61, objArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator69.setDelegates((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        generator0.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray32);
        generator0.setDelegates(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setUseCache(true);
        generator37.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader46 = null;
        generator37.setClassLoader(classLoader46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator37.getNamingPolicy();
        generator37.setStyle(0);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray58);
        generator37.setClasses(classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray32);
        generator11.setDelegates((java.lang.Object[]) classArray32);
        generator11.setAttemptLoad(true);
        generator11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator11.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        boolean boolean44 = generator42.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray51);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        generator42.setClasses(classArray51);
        generator0.setClasses(classArray51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(generatorStrategy58);
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator14.getNamingPolicy();
        generator14.setAttemptLoad(false);
        generator14.setUseCache(true);
        generator14.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator29.getStrategy();
        generator29.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator35.getStrategy();
        generator29.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator29.setNamingPolicy(namingPolicy40);
        boolean boolean42 = generator29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator29.getStrategy();
        generator14.setStrategy(generatorStrategy43);
        boolean boolean45 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        generator14.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator14.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray51 = generatorStrategy13.generate((org.mockito.cglib.core.ClassGenerator) generator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin40 = generator0.create();
        java.lang.ClassLoader classLoader41 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Mixin mixin30 = generator11.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator11.getStrategy();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray38);
        generator11.setClasses(classArray38);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray38, objArray46);
        generator0.setDelegates(objArray46);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader78 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin81 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray35);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator12.getStrategy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray27);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        boolean boolean32 = generatorStrategy20.equals((java.lang.Object) classArray31);
        generator0.setClasses(classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = generator0.create();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin39 = generator0.create();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(mixin39);
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getAttemptLoad();
        boolean boolean29 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        generator0.setAttemptLoad(true);
        java.lang.Object[] objArray15 = null;
        generator0.setDelegates(objArray15);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        boolean boolean44 = generator21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator21.getStrategy();
        java.lang.Class[] classArray46 = null;
        generator21.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setAttemptLoad(true);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        generator48.setDelegates(objArray57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray68);
        generator48.setClasses(classArray68);
        boolean boolean71 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator48.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = generator48.getStrategy();
        generator21.setStrategy(generatorStrategy73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator21.getStrategy();
        generator0.setStrategy(generatorStrategy75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator14.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray48);
        generator28.setClasses(classArray48);
        boolean boolean51 = generator28.getUseCache();
        generator28.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator54.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        generator54.setClasses(classArray63);
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray74);
        generator28.setClasses(classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        java.lang.ClassLoader classLoader80 = null;
        generator78.setClassLoader(classLoader80);
        boolean boolean82 = generator78.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator78.getNamingPolicy();
        generator28.setNamingPolicy(namingPolicy83);
        generator14.setNamingPolicy(namingPolicy83);
        generator14.setUseCache(false);
        java.lang.ClassLoader classLoader88 = null;
        java.lang.ClassLoader classLoader89 = null;
        java.lang.Object[] objArray91 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader89, objArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, objArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(objArray91);
        generator14.setDelegates(objArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = generator14.create();
        boolean boolean97 = generator14.getUseCache();
        byte[] byteArray98 = generatorStrategy13.generate((org.mockito.cglib.core.ClassGenerator) generator14);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[10]");
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(byteArray98);
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        boolean boolean10 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        java.lang.Class[] classArray12 = null;
        generator0.setClasses(classArray12);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        boolean boolean29 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        generator16.setDelegates(objArray39);
        generator16.setAttemptLoad(false);
        boolean boolean45 = generator16.getAttemptLoad();
        generator16.setUseCache(false);
        boolean boolean48 = generator16.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        generator49.setUseCache(false);
        generator49.setUseCache(false);
        boolean boolean57 = generator49.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        java.lang.ClassLoader classLoader63 = null;
        generator58.setClassLoader(classLoader63);
        generator58.setStyle(2);
        generator58.setAttemptLoad(false);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        boolean boolean77 = generator75.getUseCache();
        java.lang.Object[] objArray79 = new java.lang.Object[] { generator75, true };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray79);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getAttemptLoad();
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        generator82.setDelegates((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        generator58.setDelegates((java.lang.Object[]) classArray89);
        boolean boolean94 = generator58.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator58.getNamingPolicy();
        generator49.setNamingPolicy(namingPolicy95);
        generator16.setNamingPolicy(namingPolicy95);
        generator0.setNamingPolicy(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        boolean boolean14 = generator10.getAttemptLoad();
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator10.setClasses(classArray22);
        java.lang.ClassLoader classLoader24 = null;
        generator10.setClassLoader(classLoader24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator10.setStrategy(generatorStrategy26);
        boolean boolean28 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = generator29.getUseCache();
        generator29.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        generator29.setClasses(classArray64);
        boolean boolean79 = generator29.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = generator29.getClassLoader();
        java.lang.ClassLoader classLoader81 = null;
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, (java.lang.Object[]) classArray87);
        generator10.setClasses(classArray87);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, (java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray95);
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        java.lang.Object[] objArray21 = null;
        generator0.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator23.setNamingPolicy(namingPolicy28);
        boolean boolean30 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator23.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator23.getStrategy();
        boolean boolean33 = generator23.getAttemptLoad();
        boolean boolean34 = generator23.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        java.lang.ClassLoader classLoader49 = null;
        generator47.setClassLoader(classLoader49);
        boolean boolean51 = generator47.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = generator47.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Mixin mixin54 = generator35.create();
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getAttemptLoad();
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator63.setDelegates((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray70);
        generator35.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator35.getNamingPolicy();
        java.lang.ClassLoader classLoader75 = generator35.getClassLoader();
        generator23.setClassLoader(classLoader75);
        generator0.setClassLoader(classLoader75);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = null;
        generator0.setNamingPolicy(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getAttemptLoad();
        boolean boolean13 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader15 = null;
        generator14.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        java.lang.ClassLoader classLoader19 = null;
        generator17.setClassLoader(classLoader19);
        boolean boolean21 = generator17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator17.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        boolean boolean46 = namingPolicy22.equals((java.lang.Object) classArray43);
        generator14.setNamingPolicy(namingPolicy22);
        generator0.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader49 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor50 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader49);
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        boolean boolean33 = generator31.getUseCache();
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator31, true };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray35);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader40 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator51.setClasses(classArray63);
        generator42.setClasses(classArray63);
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator41, generator42, (short) -1 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray30, objArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(classArray73);
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray24);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = mixin27.newInstance((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator37.setClassLoader(classLoader39);
        boolean boolean41 = generator37.getAttemptLoad();
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator37.setClasses(classArray49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        boolean boolean59 = generator57.getUseCache();
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator57, true };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray61);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin27.newInstance(objArray61);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin74 = mixin66.newInstance(objArray69);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator23.setClassLoader(classLoader28);
        generator23.setStyle(2);
        generator23.setUseCache(true);
        boolean boolean34 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        boolean boolean38 = generator0.getUseCache();
        java.lang.ClassLoader classLoader39 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin40 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy4);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        generator8.setUseCache(true);
        boolean boolean22 = generator8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator8.getStrategy();
        generator0.setStrategy(generatorStrategy23);
        generator0.setUseCache(false);
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator9.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator18.setClassLoader(classLoader20);
        generator18.setUseCache(false);
        generator18.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray46);
        generator26.setClasses(classArray46);
        boolean boolean49 = generator26.getUseCache();
        generator26.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray72);
        generator26.setClasses(classArray61);
        boolean boolean76 = generator26.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = generator26.getClassLoader();
        generator18.setClassLoader(classLoader77);
        generator9.setClassLoader(classLoader77);
        generator0.setClassLoader(classLoader77);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(classLoader77);
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        generator23.setClasses(classArray32);
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin6.newInstance((java.lang.Object[]) classArray15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator36.setClasses(classArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        boolean boolean58 = generator56.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator56, true };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray71);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.ClassLoader classLoader87 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator85.setDelegates((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray84, (java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray71, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray8);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        generator20.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray8, (java.lang.Object[]) classArray31);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = generator18.getUseCache();
        generator18.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray64);
        generator18.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray53);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        boolean boolean70 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin72 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        boolean boolean33 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        generator35.setClasses(classArray55);
        boolean boolean58 = generator35.getUseCache();
        generator35.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray81);
        generator35.setClasses(classArray70);
        boolean boolean85 = generatorStrategy34.equals((java.lang.Object) generator35);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getUseCache();
        generator86.setUseCache(true);
        generator86.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator86.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy92);
        boolean boolean94 = namingPolicy9.equals((java.lang.Object) generator35);
        generator35.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator35.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator35.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean9 = generator0.getAttemptLoad();
        boolean boolean10 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean13 = generator0.getUseCache();
        boolean boolean14 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass17 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classLoader13);
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = mixin17.newInstance((java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        boolean boolean37 = generator35.getUseCache();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator35, true };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin52.newInstance((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        generator0.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin66 = generator0.create();
        boolean boolean67 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator30.getStrategy();
        generator28.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator28.setDelegates(objArray41);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray41);
        generator0.setClasses(classArray27);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        generator50.setClasses(classArray62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        boolean boolean72 = generator70.getUseCache();
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator70, true };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        java.lang.ClassLoader classLoader79 = null;
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray85);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator12.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator29.getStrategy();
        generator27.setStrategy(generatorStrategy31);
        generator12.setStrategy(generatorStrategy31);
        generator12.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader36 = generator12.getClassLoader();
        java.lang.ClassLoader classLoader37 = generator12.getClassLoader();
        generator0.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator40.getStrategy();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        java.lang.ClassLoader classLoader56 = null;
        generator54.setClassLoader(classLoader56);
        boolean boolean58 = generator54.getAttemptLoad();
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator54.setClasses(classArray66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        boolean boolean76 = generator74.getUseCache();
        java.lang.Object[] objArray78 = new java.lang.Object[] { generator74, true };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray73, objArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray78);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = mixin53.newInstance((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        generator40.setDelegates((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator30.getStrategy();
        generator28.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator28.setDelegates(objArray41);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray41);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray41);
        generator0.setClasses(classArray27);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        boolean boolean50 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean12 = generator0.getAttemptLoad();
        boolean boolean13 = generator0.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin58.newInstance((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator0.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        generator17.setUseCache(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        java.lang.Class<?> wildcardClass30 = mixin29.getClass();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        generator38.setClassLoader(classLoader40);
        boolean boolean42 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        generator38.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setUseCache(true);
        java.lang.Object[] objArray54 = new java.lang.Object[] { generator38, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin37.newInstance(objArray54);
        java.lang.Class<?> wildcardClass57 = mixin56.getClass();
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass30, wildcardClass57 };
        generator17.setClasses(classArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator17.getNamingPolicy();
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator17.setDelegates((java.lang.Object[]) classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator17.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        generator0.setUseCache(true);
        boolean boolean74 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator27.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator27.getStrategy();
        generator20.setStrategy(generatorStrategy42);
        generator8.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator45.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator49.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy53);
        boolean boolean55 = generatorStrategy42.equals((java.lang.Object) namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator60.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator60.getNamingPolicy();
        generator60.setAttemptLoad(false);
        generator60.setUseCache(true);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        generator60.setClasses(classArray80);
        generator0.setClasses(classArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        boolean boolean25 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        boolean boolean27 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean31 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        generator19.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        boolean boolean41 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator28.getStrategy();
        generator19.setStrategy(generatorStrategy43);
        generator0.setStrategy(generatorStrategy43);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator47.setClasses(classArray56);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator70.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        generator70.setClasses(classArray79);
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray79, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        boolean boolean95 = namingPolicy46.equals((java.lang.Object) mixin94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator13.getStrategy();
        boolean boolean19 = generatorStrategy12.equals((java.lang.Object) generator13);
        // The following exception was thrown during execution in test generation
        try {
            generator13.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator6.setStrategy(generatorStrategy8);
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        generator6.setClasses(classArray15);
        boolean boolean19 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        generator6.setDelegates(objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator33.setClasses(classArray42);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray53);
        generator6.setDelegates((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = generator6.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin59 = generator6.create();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        generator60.setDelegates(objArray69);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray80);
        generator60.setClasses(classArray80);
        boolean boolean83 = generator60.getUseCache();
        generator60.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = null;
        generator60.setStrategy(generatorStrategy86);
        generator60.setUseCache(true);
        generator60.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator60.getStrategy();
        generator6.setStrategy(generatorStrategy92);
        java.lang.ClassLoader classLoader94 = generator6.getClassLoader();
        generator0.setClassLoader(classLoader94);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator8.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        java.lang.Class<?> wildcardClass21 = mixin20.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean10 = generator0.getAttemptLoad();
        boolean boolean11 = generator0.getUseCache();
        generator0.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator0.setStrategy(generatorStrategy14);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = generator34.getUseCache();
        generator34.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator60.setStrategy(generatorStrategy62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator60.setClasses(classArray69);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray80);
        generator34.setClasses(classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator34.getStrategy();
        java.lang.Object obj85 = null;
        boolean boolean86 = generatorStrategy84.equals(obj85);
        generator0.setStrategy(generatorStrategy84);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        generator0.setAttemptLoad(true);
        boolean boolean78 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        java.lang.Object[] objArray80 = null;
        generator0.setDelegates(objArray80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        generator11.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator11.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = namingPolicy28.equals((java.lang.Object) classArray49);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray59);
        boolean boolean63 = namingPolicy28.equals((java.lang.Object) classArray59);
        generator11.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray65 = null;
        generator11.setClasses(classArray65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        generator11.setClasses(classArray74);
        boolean boolean76 = generatorStrategy9.equals((java.lang.Object) classArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        java.lang.Class<?> wildcardClass79 = mixin78.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        boolean boolean23 = generator21.getUseCache();
        java.lang.Object[] objArray25 = new java.lang.Object[] { generator21, true };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray25);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        generator0.setClasses(classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator33.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator33.setNamingPolicy(namingPolicy40);
        boolean boolean42 = generator33.getAttemptLoad();
        java.lang.Object[] objArray43 = null;
        generator33.setDelegates(objArray43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator51, true };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray65);
        generator33.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator33.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = null;
        generator77.setStrategy(generatorStrategy79);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        generator77.setClasses(classArray86);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = null;
        generator77.setStrategy(generatorStrategy90);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator77.getStrategy();
        generator70.setStrategy(generatorStrategy92);
        generator33.setStrategy(generatorStrategy92);
        boolean boolean95 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator33.getStrategy();
        generator0.setStrategy(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(generatorStrategy96);
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        generator13.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator13.setStrategy(generatorStrategy39);
        generator13.setUseCache(true);
        boolean boolean43 = generator13.getUseCache();
        generator13.setStyle((int) (short) 0);
        org.mockito.cglib.proxy.Mixin mixin46 = generator13.create();
        org.mockito.cglib.core.Predicate predicate47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = namingPolicy10.getClassName("", "", (java.lang.Object) generator13, predicate47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(mixin46);
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader3, (java.lang.Object[]) classArray9);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin20.newInstance((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
        boolean boolean25 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        generator19.setClasses(classArray39);
        generator19.setUseCache(true);
        generator19.setUseCache(false);
        java.lang.ClassLoader classLoader46 = generator19.getClassLoader();
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray49);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin18.newInstance(objArray49);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        boolean boolean63 = generator61.getUseCache();
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator61, true };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin70 = mixin18.newInstance(objArray65);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        boolean boolean26 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator31.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator33.getStrategy();
        generator31.setStrategy(generatorStrategy35);
        generator31.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setUseCache(true);
        generator39.setStyle((int) (byte) 0);
        generator39.setStyle((int) (byte) 1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator39.getStrategy();
        generator31.setStrategy(generatorStrategy50);
        boolean boolean52 = namingPolicy30.equals((java.lang.Object) generator31);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray58, objArray64);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        generator71.setUseCache(true);
        boolean boolean75 = generator71.getUseCache();
        generator71.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator71.getStrategy();
        generator69.setStrategy(generatorStrategy78);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator69.setDelegates(objArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray82);
        boolean boolean89 = namingPolicy30.equals((java.lang.Object) mixin88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin26 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        java.lang.Object obj33 = null;
        org.mockito.cglib.core.Predicate predicate34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = namingPolicy30.getClassName("hi!", "hi!", obj33, predicate34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        boolean boolean13 = generator11.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray20);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = mixin31.newInstance((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator43.setClasses(classArray52);
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray69);
        generator0.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = mixin4.newInstance((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator19.getStrategy();
        generator19.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        generator19.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator19.getStrategy();
        boolean boolean30 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray42);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator49.getStrategy();
        generator47.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        generator47.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(objArray60);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray60);
        generator19.setClasses(classArray46);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray46);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        java.lang.Class<?> wildcardClass71 = classArray70.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader17 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator18.setClassLoader(classLoader20);
        boolean boolean22 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = null;
        generator18.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setUseCache(true);
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator18, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = generator39.create();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        boolean boolean60 = generator58.getUseCache();
        java.lang.Object[] objArray62 = new java.lang.Object[] { generator58, true };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray57, objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray81);
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin82.newInstance((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray91);
        generator39.setClasses(classArray75);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray75);
        java.lang.Class<?> wildcardClass96 = classArray75.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        boolean boolean14 = generator10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator10.setStrategy(generatorStrategy16);
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        boolean boolean22 = generator10.getUseCache();
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray30);
        generator10.setDelegates((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator33.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = null;
        generator33.setClassLoader(classLoader40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator33.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy42);
        generator0.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        generator68.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray77);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        generator0.setClasses(classArray65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        generator14.setUseCache(false);
        generator14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        boolean boolean72 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = generator22.getClassLoader();
        generator14.setClassLoader(classLoader73);
        generator5.setClassLoader(classLoader73);
        generator0.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader78 = generator0.getClassLoader();
        boolean boolean79 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator10.getStrategy();
        generator10.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator16.getStrategy();
        generator10.setStrategy(generatorStrategy18);
        generator10.setUseCache(true);
        boolean boolean22 = generator10.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator10.getNamingPolicy();
        boolean boolean24 = namingPolicy9.equals((java.lang.Object) generator10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin25 = generator10.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator9.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator9.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator18.setClassLoader(classLoader20);
        generator18.setUseCache(false);
        generator18.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray46);
        generator26.setClasses(classArray46);
        boolean boolean49 = generator26.getUseCache();
        generator26.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray72);
        generator26.setClasses(classArray61);
        boolean boolean76 = generator26.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = generator26.getClassLoader();
        generator18.setClassLoader(classLoader77);
        generator9.setClassLoader(classLoader77);
        generator0.setClassLoader(classLoader77);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        generator81.setDelegates((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = generator9.getUseCache();
        generator9.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray55);
        generator9.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator66.setDelegates((java.lang.Object[]) classArray73);
        boolean boolean75 = namingPolicy64.equals((java.lang.Object) classArray73);
        generator0.setNamingPolicy(namingPolicy64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader77 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator41.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setUseCache(true);
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator41, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin40.newInstance(objArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = mixin33.newInstance(objArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        generator0.setDelegates(objArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin65 = generator0.create();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setAttemptLoad(true);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        generator5.setDelegates(objArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray25);
        generator5.setClasses(classArray25);
        boolean boolean28 = generator5.getUseCache();
        generator5.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        generator31.setStrategy(generatorStrategy33);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        generator31.setClasses(classArray40);
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray51);
        generator5.setClasses(classArray40);
        boolean boolean55 = generator5.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = generator5.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator57.setClasses(classArray66);
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray66);
        generator4.setClassLoader(classLoader56);
        generator0.setClassLoader(classLoader56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(generatorStrategy83);
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.ClassLoader classLoader27 = null;
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray37);
        generator0.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getAttemptLoad();
        boolean boolean45 = generator43.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator43.getStrategy();
        generator43.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator43.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator43.getStrategy();
        org.mockito.cglib.core.Predicate predicate51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = namingPolicy40.getClassName("", "hi!", (java.lang.Object) generatorStrategy50, predicate51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator55.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        generator62.setUseCache(true);
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator55, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        boolean boolean78 = namingPolicy54.equals((java.lang.Object) classArray74);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass7 = generator0.getClass();
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        generator6.setDelegates(objArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator18.setClassLoader(classLoader20);
        boolean boolean22 = generator18.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator18.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Mixin mixin25 = generator6.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator6.getStrategy();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray33);
        generator6.setClasses(classArray33);
        java.lang.ClassLoader classLoader38 = generator6.getClassLoader();
        java.lang.ClassLoader classLoader39 = generator6.getClassLoader();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader43 = generator6.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin44 = generator6.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(namingPolicy45);
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        boolean boolean32 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        generator19.setDelegates(objArray42);
        generator19.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader48 = generator19.getClassLoader();
        boolean boolean49 = generator19.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator50.setClassLoader(classLoader55);
        generator50.setStyle(2);
        generator50.setAttemptLoad(false);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        boolean boolean69 = generator67.getUseCache();
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator67, true };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray66, objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray78);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        generator74.setDelegates((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        generator50.setDelegates((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        generator19.setClasses(classArray88);
        generator0.setDelegates((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(2);
        generator0.setAttemptLoad(true);
        boolean boolean31 = generator0.getUseCache();
        boolean boolean32 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        boolean boolean35 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(generatorStrategy36);
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        generator11.setStrategy(generatorStrategy20);
        boolean boolean22 = generator11.getUseCache();
        boolean boolean23 = generator11.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = mixin30.newInstance((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        generator49.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray48);
        generator11.setClasses(classArray48);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        java.lang.ClassLoader classLoader70 = null;
        generator68.setClassLoader(classLoader70);
        boolean boolean72 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = null;
        generator68.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setUseCache(true);
        java.lang.Object[] objArray84 = new java.lang.Object[] { generator68, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin67.newInstance(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator11.setClasses(classArray87);
        java.lang.Object[] objArray89 = null;
        generator11.setDelegates(objArray89);
        generator11.setStyle(0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator11.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator35.setNamingPolicy(namingPolicy42);
        boolean boolean44 = generator35.getAttemptLoad();
        java.lang.Object[] objArray45 = null;
        generator35.setDelegates(objArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        generator47.setUseCache(true);
        boolean boolean51 = generator47.getUseCache();
        generator47.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator47.getStrategy();
        generator47.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator57.setClasses(classArray66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator57.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator57.getStrategy();
        generator47.setStrategy(generatorStrategy72);
        generator35.setStrategy(generatorStrategy72);
        boolean boolean75 = namingPolicy32.equals((java.lang.Object) generator35);
        generator35.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator35.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        java.lang.ClassLoader classLoader3 = null;
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader3, (java.lang.Object[]) classArray9);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        generator27.setStrategy(generatorStrategy49);
        generator15.setStrategy(generatorStrategy49);
        generator15.setStyle((int) (short) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        boolean boolean69 = generator56.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setAttemptLoad(true);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        generator70.setDelegates(objArray79);
        generator56.setDelegates(objArray79);
        generator56.setAttemptLoad(false);
        boolean boolean85 = generator56.getAttemptLoad();
        generator56.setUseCache(false);
        boolean boolean88 = generator56.getUseCache();
        boolean boolean89 = generator56.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator56.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray91 = generatorStrategy54.generate((org.mockito.cglib.core.ClassGenerator) generator56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        boolean boolean37 = generator35.getUseCache();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator35, true };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray49);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin59.newInstance(objArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray49, objArray76);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        generator0.setDelegates(objArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        java.lang.ClassLoader classLoader85 = null;
        generator83.setClassLoader(classLoader85);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator83.getNamingPolicy();
        generator83.setUseCache(true);
        boolean boolean90 = generator83.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator83.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator83.getStrategy();
        generator0.setStrategy(generatorStrategy92);
        org.mockito.cglib.proxy.Mixin mixin94 = generator0.create();
        generator0.setStyle((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator21.getStrategy();
        java.lang.ClassLoader classLoader29 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        boolean boolean34 = generator30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        generator30.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setUseCache(true);
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator30, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(objArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray46);
        boolean boolean50 = generatorStrategy28.equals((java.lang.Object) objArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray14, objArray46);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator13.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray72);
        generator13.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator77.getStrategy();
        generator77.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator83.getStrategy();
        generator77.setStrategy(generatorStrategy85);
        generator13.setStrategy(generatorStrategy85);
        generator0.setStrategy(generatorStrategy85);
        boolean boolean89 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        generator4.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator12.getStrategy();
        boolean boolean16 = namingPolicy10.equals((java.lang.Object) generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator17.getNamingPolicy();
        generator17.setAttemptLoad(false);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator17.setClasses(classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        java.lang.ClassLoader classLoader33 = null;
        generator31.setClassLoader(classLoader33);
        boolean boolean35 = generator31.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator31.setStrategy(generatorStrategy37);
        generator31.setAttemptLoad(true);
        generator31.setUseCache(true);
        boolean boolean43 = generator31.getUseCache();
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        generator31.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        java.lang.ClassLoader classLoader56 = null;
        generator54.setClassLoader(classLoader56);
        boolean boolean58 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator54.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = null;
        generator54.setClassLoader(classLoader61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator54.getNamingPolicy();
        generator31.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray78);
        boolean boolean84 = namingPolicy63.equals((java.lang.Object) classArray78);
        generator17.setNamingPolicy(namingPolicy63);
        boolean boolean86 = generatorStrategy15.equals((java.lang.Object) generator17);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setUseCache(true);
        java.lang.Object[] objArray45 = new java.lang.Object[] { generator29, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(objArray45);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        generator0.setClasses(classArray48);
        boolean boolean50 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        generator0.setStyle(2);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        boolean boolean42 = generator29.getUseCache();
        generator29.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator29.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator47.setClasses(classArray56);
        boolean boolean60 = generator47.getUseCache();
        generator47.setAttemptLoad(false);
        generator47.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin65 = generator47.create();
        java.lang.ClassLoader classLoader66 = generator47.getClassLoader();
        java.lang.ClassLoader classLoader67 = generator47.getClassLoader();
        generator47.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator47.getNamingPolicy();
        boolean boolean71 = generatorStrategy46.equals((java.lang.Object) namingPolicy70);
        generator0.setNamingPolicy(namingPolicy70);
        boolean boolean73 = generator0.getAttemptLoad();
        boolean boolean74 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        generator0.setAttemptLoad(false);
        boolean boolean59 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        boolean boolean64 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        boolean boolean62 = generator39.getUseCache();
        generator39.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        generator39.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray74);
        boolean boolean90 = namingPolicy24.equals((java.lang.Object) mixin89);
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean92 = generator0.getAttemptLoad();
        boolean boolean93 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(namingPolicy94);
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator25.getStrategy();
        generator25.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator25.getNamingPolicy();
        java.lang.ClassLoader classLoader80 = generator25.getClassLoader();
        boolean boolean81 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator25.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator25.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        boolean boolean18 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        generator19.setClasses(classArray39);
        boolean boolean42 = generator19.getUseCache();
        generator19.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator45.setClasses(classArray54);
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray65);
        generator19.setClasses(classArray54);
        boolean boolean69 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader70 = generator19.getClassLoader();
        java.lang.ClassLoader classLoader71 = null;
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray77);
        generator0.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getUseCache();
        java.lang.ClassLoader classLoader87 = null;
        generator85.setClassLoader(classLoader87);
        boolean boolean89 = generator85.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = null;
        generator85.setNamingPolicy(namingPolicy90);
        boolean boolean92 = generator85.getAttemptLoad();
        generator85.setUseCache(false);
        boolean boolean95 = generatorStrategy84.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = generator8.getNamingPolicy();
        generator8.setUseCache(true);
        java.lang.ClassLoader classLoader34 = generator8.getClassLoader();
        boolean boolean35 = generator8.getAttemptLoad();
        boolean boolean36 = generator8.getAttemptLoad();
        generator8.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator39.setStrategy(generatorStrategy45);
        generator39.setAttemptLoad(true);
        generator39.setUseCache(false);
        java.lang.Object[] objArray51 = null;
        generator39.setDelegates(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        generator39.setNamingPolicy(namingPolicy58);
        generator8.setNamingPolicy(namingPolicy58);
        java.lang.Object obj85 = null;
        boolean boolean86 = namingPolicy58.equals(obj85);
        generator0.setNamingPolicy(namingPolicy58);
        boolean boolean88 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        boolean boolean8 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = namingPolicy14.equals((java.lang.Object) classArray35);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator42.getStrategy();
        java.lang.Class[] classArray67 = null;
        generator42.setClasses(classArray67);
        boolean boolean69 = generator42.getUseCache();
        boolean boolean70 = generator42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator42.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator42.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy72);
        generator0.setStyle((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(namingPolicy72);
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        boolean boolean31 = generator29.getUseCache();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator29, true };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = mixin22.newInstance((java.lang.Object[]) classArray43);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator55.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        generator62.setUseCache(true);
        java.lang.Object[] objArray71 = new java.lang.Object[] { generator55, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin54.newInstance(objArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setClasses(classArray68);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setUseCache(true);
        java.lang.Object[] objArray16 = new java.lang.Object[] { generator0, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator13.setClassLoader(classLoader18);
        generator13.setStyle(2);
        boolean boolean22 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator24.setNamingPolicy(namingPolicy31);
        boolean boolean33 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator24.getStrategy();
        boolean boolean35 = namingPolicy23.equals((java.lang.Object) generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        boolean boolean47 = generator45.getUseCache();
        java.lang.Object[] objArray49 = new java.lang.Object[] { generator45, true };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray44, objArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray59);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        boolean boolean70 = generator68.getUseCache();
        java.lang.Object[] objArray72 = new java.lang.Object[] { generator68, true };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator75.setDelegates((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = mixin61.newInstance((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray82);
        generator0.setDelegates((java.lang.Object[]) classArray89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        boolean boolean31 = generator29.getUseCache();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator29, true };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray44);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(classArray72);
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin89 = generator0.create();
        java.lang.ClassLoader classLoader90 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        boolean boolean25 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        generator12.setDelegates(objArray35);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator47.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = mixin63.newInstance((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator12.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        generator0.setDelegates((java.lang.Object[]) classArray57);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        boolean boolean9 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator5.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        generator13.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator13.setClasses(classArray48);
        boolean boolean63 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = generator13.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray74);
        generator5.setClasses(classArray74);
        java.lang.ClassLoader classLoader90 = generator5.getClassLoader();
        generator0.setClassLoader(classLoader90);
        boolean boolean92 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        java.lang.ClassLoader classLoader94 = generator0.getClassLoader();
        java.lang.Class[] classArray95 = null;
        generator0.setClasses(classArray95);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        generator27.setUseCache(true);
        generator27.setUseCache(false);
        generator27.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = generator27.getStrategy();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray72);
        boolean boolean75 = generatorStrategy56.equals((java.lang.Object) classArray64);
        generator0.setClasses(classArray64);
        generator0.setUseCache(true);
        boolean boolean79 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader82 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator19.getStrategy();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = mixin32.newInstance((java.lang.Object[]) classArray38);
        boolean boolean41 = generatorStrategy23.equals((java.lang.Object) classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator42.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = generator42.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator46.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator46.getNamingPolicy();
        generator42.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = null;
        generator42.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator42.getStrategy();
        boolean boolean55 = generatorStrategy23.equals((java.lang.Object) generatorStrategy54);
        boolean boolean56 = namingPolicy18.equals((java.lang.Object) boolean55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        generator57.setUseCache(true);
        boolean boolean61 = generator57.getUseCache();
        generator57.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        generator57.setDelegates(objArray66);
        boolean boolean69 = namingPolicy18.equals((java.lang.Object) generator57);
        generator57.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = generator72.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        java.lang.ClassLoader classLoader77 = null;
        generator75.setClassLoader(classLoader77);
        boolean boolean79 = generator75.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = null;
        generator75.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        generator82.setUseCache(true);
        boolean boolean86 = generator82.getUseCache();
        generator82.setUseCache(true);
        java.lang.Object[] objArray91 = new java.lang.Object[] { generator75, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(objArray91);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray91);
        generator72.setDelegates((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray93);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray93);
        generator57.setClasses(classArray93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator0.getStrategy();
        boolean boolean31 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator49.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setUseCache(true);
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator49, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray48);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classArray71);
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        java.lang.ClassLoader classLoader15 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        boolean boolean31 = generator29.getUseCache();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator29, true };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray43);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        java.lang.ClassLoader classLoader56 = null;
        generator54.setClassLoader(classLoader56);
        boolean boolean58 = generator54.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = null;
        generator54.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setUseCache(true);
        java.lang.Object[] objArray70 = new java.lang.Object[] { generator54, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = mixin53.newInstance(objArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray70);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator17.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator0.setClasses(classArray43);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        boolean boolean24 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator28.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setAttemptLoad(true);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        generator43.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy60);
        generator28.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator28.setStrategy(generatorStrategy63);
        boolean boolean65 = generatorStrategy27.equals((java.lang.Object) generator28);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator28.getNamingPolicy();
        boolean boolean67 = generator28.getAttemptLoad();
        generator28.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator33.setClasses(classArray42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator33.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator33.getStrategy();
        generator26.setStrategy(generatorStrategy48);
        generator14.setStrategy(generatorStrategy48);
        generator14.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator14.getStrategy();
        boolean boolean55 = namingPolicy13.equals((java.lang.Object) generator14);
        generator14.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator0.getStrategy();
        java.lang.ClassLoader classLoader79 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray13, (java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator28.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator28.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        boolean boolean34 = generator28.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator28.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy35);
        java.lang.ClassLoader classLoader37 = generator0.getClassLoader();
        boolean boolean38 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator0.setClasses(classArray32);
        boolean boolean35 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator7.getNamingPolicy();
        generator7.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator7.getNamingPolicy();
        boolean boolean19 = generator7.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator20.setClassLoader(classLoader22);
        boolean boolean24 = generator20.getAttemptLoad();
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator20.setClasses(classArray32);
        java.lang.ClassLoader classLoader34 = null;
        generator20.setClassLoader(classLoader34);
        boolean boolean36 = generator20.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        generator38.setClasses(classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray58);
        generator20.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator7.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = generator7.getNamingPolicy();
        generator7.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray68 = generatorStrategy6.generate((org.mockito.cglib.core.ClassGenerator) generator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(namingPolicy65);
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator15.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator15.getStrategy();
        generator15.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator21.getStrategy();
        generator15.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator15.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = null;
        generator15.setNamingPolicy(namingPolicy26);
        boolean boolean28 = generator15.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator15.getStrategy();
        generator0.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator50.setStrategy(generatorStrategy52);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        generator50.setClasses(classArray59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator50.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = generator50.getStrategy();
        generator43.setStrategy(generatorStrategy65);
        generator31.setStrategy(generatorStrategy65);
        generator31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator31.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray71 = generatorStrategy29.generate((org.mockito.cglib.core.ClassGenerator) generator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy70);
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        generator11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator11.setNamingPolicy(namingPolicy18);
        boolean boolean20 = generator11.getAttemptLoad();
        java.lang.Object[] objArray21 = null;
        generator11.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        generator23.setClasses(classArray43);
        generator11.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        generator0.setClasses(classArray43);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator1.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator1.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator1.getStrategy();
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray10);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = mixin11.newInstance((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        boolean boolean31 = generator29.getUseCache();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator29, true };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray28);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        boolean boolean48 = generatorStrategy5.equals((java.lang.Object) classArray28);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray28);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray18);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        java.lang.ClassLoader classLoader32 = null;
        generator30.setClassLoader(classLoader32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator43.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setUseCache(true);
        java.lang.Object[] objArray59 = new java.lang.Object[] { generator43, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = mixin42.newInstance(objArray59);
        boolean boolean62 = namingPolicy34.equals((java.lang.Object) objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        boolean boolean86 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        java.lang.Class[] classArray88 = null;
        generator63.setClasses(classArray88);
        boolean boolean90 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator63.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator63.getNamingPolicy();
        boolean boolean93 = generator63.getUseCache();
        boolean boolean94 = namingPolicy34.equals((java.lang.Object) generator63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator63.getStrategy();
        generator63.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(generatorStrategy95);
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generatorStrategy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        boolean boolean61 = generatorStrategy51.equals((java.lang.Object) classArray59);
        generator7.setClasses(classArray59);
        generator7.setUseCache(false);
        generator7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = generator7.getNamingPolicy();
        java.lang.Class<?> wildcardClass68 = namingPolicy67.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator54.getStrategy();
        generator54.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator54.getStrategy();
        boolean boolean65 = namingPolicy17.equals((java.lang.Object) generatorStrategy64);
        java.lang.ClassLoader classLoader66 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        boolean boolean71 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        generator73.setDelegates(objArray82);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray93);
        generator73.setClasses(classArray93);
        boolean boolean96 = namingPolicy72.equals((java.lang.Object) classArray93);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        boolean boolean99 = generatorStrategy64.equals((java.lang.Object) classArray93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        generator0.setStyle(1);
        boolean boolean17 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        generator22.setDelegates((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        generator0.setClasses(classArray21);
        boolean boolean34 = generator0.getUseCache();
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(classLoader35);
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator29.getStrategy();
        generator22.setStrategy(generatorStrategy44);
        generator10.setStrategy(generatorStrategy44);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray54, (java.lang.Object[]) classArray62);
        boolean boolean64 = generatorStrategy44.equals((java.lang.Object) mixin63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin63.newInstance((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray8, (java.lang.Object[]) classArray70);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(classArray77);
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin18);
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        generator0.setAttemptLoad(false);
        boolean boolean59 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator61.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator61.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator61.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(namingPolicy70);
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        java.lang.ClassLoader classLoader40 = generator13.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator48.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator48.getStrategy();
        generator41.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        generator41.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray72);
        generator0.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin mixin77 = generator0.create();
        generator0.setUseCache(false);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin77);
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator12.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator73.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator73.getNamingPolicy();
        generator73.setUseCache(false);
        generator73.setUseCache(true);
        boolean boolean86 = namingPolicy69.equals((java.lang.Object) generator73);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = generator73.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator73.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        java.lang.ClassLoader classLoader23 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = mixin29.newInstance((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray73);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = mixin19.newInstance((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        boolean boolean39 = generator37.getUseCache();
        java.lang.Object[] objArray41 = new java.lang.Object[] { generator37, true };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray36, objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator44.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator19.getStrategy();
        generator19.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        generator19.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator19.getNamingPolicy();
        boolean boolean30 = generator19.getUseCache();
        generator19.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator33.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setUseCache(true);
        java.lang.Object[] objArray49 = new java.lang.Object[] { generator33, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        generator19.setDelegates((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray59, objArray62);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(objArray62);
        generator0.setDelegates(objArray62);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin69);
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        boolean boolean88 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        boolean boolean92 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        boolean boolean32 = generator27.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray61);
        generator41.setClasses(classArray61);
        boolean boolean64 = namingPolicy40.equals((java.lang.Object) classArray61);
        generator33.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator33.getNamingPolicy();
        boolean boolean68 = namingPolicy66.equals((java.lang.Object) 2);
        generator27.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        java.lang.ClassLoader classLoader81 = null;
        generator79.setClassLoader(classLoader81);
        boolean boolean83 = generator79.getAttemptLoad();
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator79.setClasses(classArray91);
        generator70.setClasses(classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        generator27.setClasses(classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass98 = namingPolicy97.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(namingPolicy97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        boolean boolean13 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator33.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator33.setStrategy(generatorStrategy39);
        generator33.setAttemptLoad(true);
        generator33.setUseCache(true);
        boolean boolean45 = generator33.getUseCache();
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator33.setDelegates((java.lang.Object[]) classArray53);
        boolean boolean56 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setStyle(0);
        generator33.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray81);
        generator61.setClasses(classArray81);
        boolean boolean84 = generator61.getUseCache();
        boolean boolean85 = generator61.getAttemptLoad();
        java.lang.Object[] objArray86 = null;
        generator61.setDelegates(objArray86);
        java.lang.ClassLoader classLoader88 = generator61.getClassLoader();
        generator33.setClassLoader(classLoader88);
        // The following exception was thrown during execution in test generation
        try {
            generator33.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin19.newInstance((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        generator38.setDelegates((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray37);
        generator0.setClasses(classArray37);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        boolean boolean61 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        generator57.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setUseCache(true);
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator57, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = mixin56.newInstance(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator0.setClasses(classArray76);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        java.lang.ClassLoader classLoader83 = generator0.getClassLoader();
        boolean boolean84 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        boolean boolean9 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator5.setStrategy(generatorStrategy11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        generator13.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator13.setClasses(classArray48);
        boolean boolean63 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = generator13.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray74);
        generator5.setClasses(classArray74);
        java.lang.ClassLoader classLoader90 = generator5.getClassLoader();
        generator0.setClassLoader(classLoader90);
        boolean boolean92 = generator0.getAttemptLoad();
        boolean boolean93 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        java.lang.ClassLoader classLoader7 = null;
        generator5.setClassLoader(classLoader7);
        boolean boolean9 = generator5.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator5.setNamingPolicy(namingPolicy10);
        java.lang.ClassLoader classLoader12 = null;
        generator5.setClassLoader(classLoader12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        generator27.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        generator27.setClasses(classArray62);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray62);
        generator5.setClasses(classArray23);
        java.lang.ClassLoader classLoader79 = generator5.getClassLoader();
        generator0.setClassLoader(classLoader79);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getUseCache();
        java.lang.ClassLoader classLoader86 = null;
        generator84.setClassLoader(classLoader86);
        boolean boolean88 = generator84.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = null;
        generator84.setNamingPolicy(namingPolicy89);
        generator84.setUseCache(true);
        generator84.setUseCache(false);
        org.mockito.cglib.core.Predicate predicate95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = namingPolicy81.getClassName("", "", (java.lang.Object) false, predicate95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray50);
        generator30.setClasses(classArray50);
        boolean boolean53 = generator30.getUseCache();
        generator30.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray76);
        generator30.setClasses(classArray65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator30.getStrategy();
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        generator30.setDelegates(objArray83);
        boolean boolean87 = generator30.getAttemptLoad();
        boolean boolean88 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader89 = generator30.getClassLoader();
        generator0.setClassLoader(classLoader89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(classLoader89);
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray3);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin8);
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        boolean boolean20 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader28 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass22 = namingPolicy21.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean7 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        java.lang.Class[] classArray9 = null;
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.create(classArray9, objArray12);
        boolean boolean16 = namingPolicy8.equals((java.lang.Object) objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        generator17.setClasses(classArray37);
        boolean boolean40 = generator17.getUseCache();
        generator17.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin44 = generator17.create();
        boolean boolean45 = namingPolicy8.equals((java.lang.Object) generator17);
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator17.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator25.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        generator38.setClasses(classArray58);
        boolean boolean61 = generator38.getUseCache();
        generator38.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray84);
        generator38.setClasses(classArray73);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin24.newInstance((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        boolean boolean35 = generator12.getUseCache();
        generator12.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        java.lang.ClassLoader classLoader13 = null;
        generator0.setClassLoader(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(mixin12);
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = mixin18.newInstance((java.lang.Object[]) classArray27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = mixin35.newInstance((java.lang.Object[]) classArray44);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator54.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        boolean boolean73 = generator71.getUseCache();
        java.lang.Object[] objArray75 = new java.lang.Object[] { generator71, true };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator78.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin64.newInstance((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = mixin28.newInstance((java.lang.Object[]) classArray88);
        boolean boolean91 = namingPolicy11.equals((java.lang.Object) classArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        generator0.setStyle(1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator13.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator13.getStrategy();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        java.lang.ClassLoader classLoader50 = null;
        generator48.setClassLoader(classLoader50);
        boolean boolean52 = generator48.getAttemptLoad();
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator48.setClasses(classArray60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        boolean boolean70 = generator68.getUseCache();
        java.lang.Object[] objArray72 = new java.lang.Object[] { generator68, true };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray60, objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray72);
        boolean boolean77 = generatorStrategy38.equals((java.lang.Object) mixin76);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        generator78.setUseCache(true);
        boolean boolean82 = generator78.getUseCache();
        generator78.setAttemptLoad(true);
        generator78.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator78.getStrategy();
        boolean boolean88 = generatorStrategy38.equals((java.lang.Object) generatorStrategy87);
        generator0.setStrategy(generatorStrategy87);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin91 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = null;
        generator32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setUseCache(true);
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator32, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = mixin31.newInstance(objArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray48);
        boolean boolean52 = generatorStrategy24.equals((java.lang.Object) objArray48);
        java.lang.ClassLoader classLoader53 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator55.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator64.setClasses(classArray76);
        generator55.setClasses(classArray76);
        java.lang.Object[] objArray80 = new java.lang.Object[] { generator54, generator55, (short) -1 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray80);
        boolean boolean82 = generatorStrategy24.equals((java.lang.Object) classLoader53);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        java.lang.ClassLoader classLoader88 = null;
        generator83.setClassLoader(classLoader88);
        boolean boolean90 = generatorStrategy24.equals((java.lang.Object) generator83);
        org.mockito.cglib.core.ClassGenerator classGenerator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = generatorStrategy24.generate(classGenerator91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        generator0.setStyle(0);
        boolean boolean96 = generator0.getUseCache();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        generator0.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy52);
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        generator12.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy18);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = null;
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(objArray26);
        generator0.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray79);
        generator33.setClasses(classArray68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator33.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator33.getStrategy();
        generator0.setStrategy(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        generator0.setStyle((int) (short) 0);
        java.lang.ClassLoader classLoader24 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        boolean boolean18 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        generator5.setDelegates(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        generator5.setDelegates((java.lang.Object[]) classArray52);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator64.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray71);
        generator5.setClasses(classArray63);
        boolean boolean75 = namingPolicy4.equals((java.lang.Object) generator5);
        boolean boolean76 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin77 = generator5.create();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        generator78.setUseCache(true);
        boolean boolean82 = generator78.getUseCache();
        generator78.setAttemptLoad(true);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        generator78.setDelegates(objArray87);
        generator78.setUseCache(true);
        boolean boolean92 = generator78.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator78.getNamingPolicy();
        generator5.setNamingPolicy(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(namingPolicy93);
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        java.lang.ClassLoader classLoader74 = null;
        generator72.setClassLoader(classLoader74);
        boolean boolean76 = generator72.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator72.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy77);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator79.setDelegates((java.lang.Object[]) classArray86);
        boolean boolean88 = namingPolicy77.equals((java.lang.Object) classArray86);
        generator13.setNamingPolicy(namingPolicy77);
        generator0.setNamingPolicy(namingPolicy77);
        boolean boolean91 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        generator0.setStyle((int) (short) 1);
        generator0.setUseCache(false);
        boolean boolean53 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator0.getNamingPolicy();
        java.lang.Object[] objArray59 = null;
        generator0.setDelegates(objArray59);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        generator14.setUseCache(false);
        generator14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        boolean boolean72 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = generator22.getClassLoader();
        generator14.setClassLoader(classLoader73);
        generator5.setClassLoader(classLoader73);
        generator0.setClassLoader(classLoader73);
        generator0.setStyle(0);
        boolean boolean79 = generator0.getAttemptLoad();
        boolean boolean80 = generator0.getAttemptLoad();
        boolean boolean81 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        generator8.setDelegates((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        generator23.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator23.getNamingPolicy();
        boolean boolean30 = generator23.getAttemptLoad();
        generator23.setUseCache(false);
        boolean boolean33 = generator23.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setAttemptLoad(true);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        generator40.setDelegates(objArray49);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray60);
        generator40.setClasses(classArray60);
        boolean boolean63 = namingPolicy39.equals((java.lang.Object) classArray60);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray60);
        generator23.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray64);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator42.getNamingPolicy();
        generator30.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = null;
        generator49.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setUseCache(true);
        java.lang.Object[] objArray65 = new java.lang.Object[] { generator49, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(objArray65);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator30.setClasses(classArray68);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator79.setDelegates((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray78, (java.lang.Object[]) classArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setAttemptLoad(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        generator6.setDelegates(objArray15);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, (java.lang.Object[]) classArray26);
        generator6.setClasses(classArray26);
        boolean boolean29 = namingPolicy5.equals((java.lang.Object) classArray26);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        java.lang.Class<?> wildcardClass32 = classArray26.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        generator20.setStrategy(generatorStrategy22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        generator20.setClasses(classArray29);
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray40);
        generator19.setDelegates((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        generator0.setClasses(classArray40);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        boolean boolean58 = generator8.getAttemptLoad();
        java.lang.ClassLoader classLoader59 = generator8.getClassLoader();
        generator0.setClassLoader(classLoader59);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        generator0.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator77.getStrategy();
        generator70.setStrategy(generatorStrategy81);
        generator0.setStrategy(generatorStrategy81);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean88 = generator0.getUseCache();
        boolean boolean89 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        generator0.setClasses(classArray84);
        boolean boolean90 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(mixin21);
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        generator0.setAttemptLoad(true);
        java.lang.Object[] objArray15 = null;
        generator0.setDelegates(objArray15);
        generator0.setStyle((int) (byte) 0);
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator20.setClassLoader(classLoader22);
        boolean boolean24 = generator20.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator20.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader27 = null;
        generator20.setClassLoader(classLoader27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator20.setStrategy(generatorStrategy30);
        generator20.setAttemptLoad(true);
        generator20.setAttemptLoad(true);
        boolean boolean36 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator20.getStrategy();
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator0.setStrategy(generatorStrategy39);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setUseCache(true);
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator35, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin34.newInstance(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator0.setDelegates(objArray51);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin58 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean63 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = null;
        generator59.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        generator66.setUseCache(true);
        boolean boolean70 = generator66.getUseCache();
        generator66.setUseCache(true);
        java.lang.Object[] objArray75 = new java.lang.Object[] { generator59, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = mixin58.newInstance(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator0.setDelegates((java.lang.Object[]) classArray78);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        boolean boolean82 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
        boolean boolean84 = generator0.getAttemptLoad();
        boolean boolean85 = generator0.getAttemptLoad();
        boolean boolean86 = generator0.getAttemptLoad();
        boolean boolean87 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        boolean boolean37 = generator35.getUseCache();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator35, true };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        boolean boolean24 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = generator0.getNamingPolicy();
        boolean boolean26 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        boolean boolean82 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin84 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator8.getStrategy();
        generator6.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy34);
        generator6.setNamingPolicy(namingPolicy34);
        boolean boolean37 = generator6.getAttemptLoad();
        boolean boolean38 = namingPolicy5.equals((java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator6.getStrategy();
        generator6.setUseCache(true);
        java.lang.Class<?> wildcardClass43 = generator6.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        java.lang.ClassLoader classLoader13 = generator0.getClassLoader();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        boolean boolean24 = generator22.getUseCache();
        java.lang.Object[] objArray26 = new java.lang.Object[] { generator22, true };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray21, objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getAttemptLoad();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator29.setDelegates((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.ClassLoader classLoader40 = null;
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray46);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        generator52.setDelegates(objArray61);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray72);
        generator52.setClasses(classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = mixin51.newInstance(objArray84);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin38.newInstance(objArray84);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(objArray84);
        generator0.setDelegates(objArray84);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = namingPolicy26.equals((java.lang.Object) classArray47);
        generator18.setNamingPolicy(namingPolicy26);
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator53.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator53.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator53.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        boolean boolean86 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator63.getStrategy();
        generator53.setStrategy(generatorStrategy88);
        generator0.setStrategy(generatorStrategy88);
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = generator29.getUseCache();
        generator29.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader55 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        generator0.setDelegates((java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = mixin72.newInstance((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator7.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator7.getAttemptLoad();
        java.lang.Object[] objArray17 = null;
        generator7.setDelegates(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator19.getStrategy();
        generator19.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator29.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator29.getStrategy();
        generator19.setStrategy(generatorStrategy44);
        generator7.setStrategy(generatorStrategy44);
        java.lang.Object obj47 = null;
        boolean boolean48 = generatorStrategy44.equals(obj47);
        generator0.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator7, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin6.newInstance(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray48);
        generator28.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setAttemptLoad(true);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        generator51.setDelegates(objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray60);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = mixin27.newInstance((java.lang.Object[]) classArray64);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator19.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator19.getStrategy();
        generator19.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator25.getStrategy();
        generator19.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator19.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = null;
        generator19.setNamingPolicy(namingPolicy30);
        boolean boolean32 = generator19.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator34.getStrategy();
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        java.lang.ClassLoader classLoader68 = null;
        generator66.setClassLoader(classLoader68);
        boolean boolean70 = generator66.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = null;
        generator66.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setUseCache(true);
        java.lang.Object[] objArray82 = new java.lang.Object[] { generator66, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = mixin65.newInstance(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        boolean boolean86 = generatorStrategy58.equals((java.lang.Object) objArray82);
        boolean boolean87 = generatorStrategy33.equals((java.lang.Object) generatorStrategy58);
        generator0.setStrategy(generatorStrategy58);
        java.lang.Class<?> wildcardClass89 = generatorStrategy58.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        boolean boolean18 = generator5.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        generator5.setDelegates(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        generator5.setDelegates((java.lang.Object[]) classArray52);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator64.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray71);
        generator5.setClasses(classArray63);
        boolean boolean75 = namingPolicy4.equals((java.lang.Object) generator5);
        boolean boolean76 = generator5.getUseCache();
        boolean boolean77 = generator5.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        generator27.setAttemptLoad(false);
        java.lang.ClassLoader classLoader53 = generator27.getClassLoader();
        generator0.setClassLoader(classLoader53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        boolean boolean16 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader18 = null;
        generator17.setClassLoader(classLoader18);
        generator17.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator17.getStrategy();
        generator17.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader34 = null;
        generator25.setClassLoader(classLoader34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator25.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin37 = generator25.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator25.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator39.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator39.getStrategy();
        generator39.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        generator39.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator39.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator39.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generator39.getAttemptLoad();
        boolean boolean53 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        boolean boolean57 = generator55.getAttemptLoad();
        boolean boolean58 = generator55.getAttemptLoad();
        boolean boolean59 = namingPolicy54.equals((java.lang.Object) boolean58);
        boolean boolean60 = generatorStrategy38.equals((java.lang.Object) namingPolicy54);
        generator17.setStrategy(generatorStrategy38);
        generator0.setStrategy(generatorStrategy38);
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        generator0.setClasses(classArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        boolean boolean46 = generator44.getUseCache();
        java.lang.Object[] objArray48 = new java.lang.Object[] { generator44, true };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray43, objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getAttemptLoad();
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        generator51.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin62 = mixin36.newInstance((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class<?> wildcardClass64 = classArray63.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator25.getStrategy();
        boolean boolean77 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator25.getStrategy();
        boolean boolean79 = generator25.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator25.getStrategy();
        boolean boolean81 = generator25.getUseCache();
        boolean boolean82 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        generator83.setUseCache(true);
        boolean boolean87 = generator83.getUseCache();
        generator83.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = generator83.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy90);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator25.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator22.getStrategy();
        generator12.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        boolean boolean40 = generator0.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin49.newInstance((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        boolean boolean62 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator58.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setUseCache(true);
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator58, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray74);
        generator0.setClasses(classArray55);
        generator0.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray39 = null;
        generator0.setClasses(classArray39);
        boolean boolean41 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        generator44.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator44.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy58);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(namingPolicy58);
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray28);
        boolean boolean31 = generatorStrategy24.equals((java.lang.Object) classLoader25);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator34.getStrategy();
        generator32.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setAttemptLoad(true);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        generator43.setDelegates(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        generator43.setNamingPolicy(namingPolicy60);
        generator32.setNamingPolicy(namingPolicy60);
        boolean boolean63 = generatorStrategy24.equals((java.lang.Object) generator32);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin64 = generator32.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }
}


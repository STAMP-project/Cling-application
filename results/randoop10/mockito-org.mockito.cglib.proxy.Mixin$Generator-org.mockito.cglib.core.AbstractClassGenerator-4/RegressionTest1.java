import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        java.lang.ClassLoader classLoader23 = null;
        generator9.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator9.setStrategy(generatorStrategy25);
        boolean boolean27 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        generator28.setDelegates(objArray37);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray48);
        generator28.setClasses(classArray48);
        boolean boolean51 = generator28.getUseCache();
        generator28.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator54.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        generator54.setClasses(classArray63);
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray74);
        generator28.setClasses(classArray63);
        boolean boolean78 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = generator28.getClassLoader();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(objArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, (java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, (java.lang.Object[]) classArray86);
        generator9.setClasses(classArray86);
        generator0.setClasses(classArray86);
        java.lang.Object[] objArray93 = null;
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray86, objArray93);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        boolean boolean26 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        generator13.setDelegates(objArray36);
        generator13.setStyle(2);
        boolean boolean42 = generator13.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        generator44.setClasses(classArray64);
        boolean boolean67 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = generator44.getStrategy();
        boolean boolean69 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = generator44.getStrategy();
        boolean boolean71 = namingPolicy43.equals((java.lang.Object) generatorStrategy70);
        boolean boolean72 = generatorStrategy12.equals((java.lang.Object) namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = namingPolicy21.equals((java.lang.Object) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        generator46.setDelegates(objArray55);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray66);
        generator46.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator69.setStrategy(generatorStrategy71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator69.setClasses(classArray78);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, (java.lang.Object[]) classArray89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { 1L, '4', classArray42, generator46, classArray78 };
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        boolean boolean95 = namingPolicy13.equals((java.lang.Object) classArray94);
        generator0.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader97 = null;
        generator0.setClassLoader(classLoader97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        boolean boolean26 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        boolean boolean34 = generator32.getUseCache();
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator32, true };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        generator39.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray46);
        boolean boolean49 = generatorStrategy25.equals((java.lang.Object) mixin48);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        generator50.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator50.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator57.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator57.getStrategy();
        generator50.setStrategy(generatorStrategy60);
        boolean boolean62 = generatorStrategy25.equals((java.lang.Object) generatorStrategy60);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray69 = generatorStrategy25.generate((org.mockito.cglib.core.ClassGenerator) generator63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(namingPolicy68);
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        boolean boolean12 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = namingPolicy13.equals((java.lang.Object) classArray34);
        generator6.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator6.getNamingPolicy();
        boolean boolean41 = namingPolicy39.equals((java.lang.Object) 2);
        generator0.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setAttemptLoad(true);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        generator43.setDelegates(objArray52);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray63);
        generator43.setClasses(classArray63);
        boolean boolean66 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator43.getStrategy();
        boolean boolean68 = generator43.getUseCache();
        boolean boolean69 = namingPolicy39.equals((java.lang.Object) boolean68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        java.lang.ClassLoader classLoader72 = null;
        generator70.setClassLoader(classLoader72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = generator70.getNamingPolicy();
        generator70.setUseCache(true);
        generator70.setAttemptLoad(false);
        boolean boolean79 = namingPolicy39.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator12.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator73.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator73.getNamingPolicy();
        generator73.setUseCache(false);
        generator73.setUseCache(true);
        boolean boolean86 = namingPolicy69.equals((java.lang.Object) generator73);
        java.lang.Object obj87 = null;
        boolean boolean88 = namingPolicy69.equals(obj87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray5 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray5);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, (java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = mixin6.newInstance((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        java.lang.ClassLoader classLoader44 = null;
        generator42.setClassLoader(classLoader44);
        boolean boolean46 = generator42.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = null;
        generator42.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray72);
        java.lang.Class<?> wildcardClass74 = objArray72.getClass();
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.Object[] objArray82 = new java.lang.Object[] { classArray27, generator42, objArray52, classArray64, wildcardClass74, classArray80 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator0.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray73);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        generator0.setDelegates(objArray73);
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        generator10.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator10.getNamingPolicy();
        boolean boolean45 = namingPolicy43.equals((java.lang.Object) 2);
        generator0.setNamingPolicy(namingPolicy43);
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getAttemptLoad();
        boolean boolean13 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator11.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        boolean boolean59 = generator36.getUseCache();
        generator36.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = null;
        generator62.setStrategy(generatorStrategy64);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        generator62.setClasses(classArray71);
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray71, (java.lang.Object[]) classArray82);
        generator36.setClasses(classArray71);
        boolean boolean86 = generatorStrategy35.equals((java.lang.Object) generator36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator36.getStrategy();
        boolean boolean88 = generator36.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray89 = generatorStrategy10.generate((org.mockito.cglib.core.ClassGenerator) generator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator10.setClassLoader(classLoader15);
        generator10.setStyle(2);
        generator10.setUseCache(true);
        boolean boolean21 = generator10.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.Object[] objArray12 = null;
        generator0.setDelegates(objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = namingPolicy19.equals((java.lang.Object) classArray40);
        generator0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = generator45.getUseCache();
        generator45.setAttemptLoad(false);
        java.lang.ClassLoader classLoader71 = generator45.getClassLoader();
        generator0.setClassLoader(classLoader71);
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(2);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = mixin10.newInstance((java.lang.Object[]) classArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        boolean boolean30 = generator28.getUseCache();
        java.lang.Object[] objArray32 = new java.lang.Object[] { generator28, true };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray27, objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray19, (java.lang.Object[]) classArray27);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        boolean boolean47 = generatorStrategy4.equals((java.lang.Object) classArray27);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class<?> wildcardClass49 = classArray48.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        boolean boolean94 = generatorStrategy82.equals((java.lang.Object) classArray90);
        org.mockito.cglib.proxy.Mixin.Generator generator95 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader96 = null;
        generator95.setClassLoader(classLoader96);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray98 = generatorStrategy82.generate((org.mockito.cglib.core.ClassGenerator) generator95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        java.lang.Class<?> wildcardClass13 = mixin12.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = null;
        generator39.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator39.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray47 = generatorStrategy38.generate((org.mockito.cglib.core.ClassGenerator) generator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        boolean boolean19 = generator17.getUseCache();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator17, true };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray16, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Class<?> wildcardClass38 = classArray37.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        java.lang.Class[] classArray0 = null;
        java.lang.Class[] classArray1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.create(classArray1, objArray4);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = null;
        generator0.setClassLoader(classLoader26);
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin13 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        generator20.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator20.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        boolean boolean41 = generator28.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        generator28.setDelegates(objArray51);
        generator16.setDelegates(objArray51);
        org.mockito.cglib.core.Predicate predicate56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = namingPolicy12.getClassName("", "hi!", (java.lang.Object) objArray51, predicate56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator20.getStrategy();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = mixin30.newInstance((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        boolean boolean50 = generator48.getUseCache();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator48, true };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator55.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray47);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        boolean boolean67 = generatorStrategy24.equals((java.lang.Object) classArray47);
        generator0.setStrategy(generatorStrategy24);
        boolean boolean69 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator73.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator73.getStrategy();
        generator73.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        generator73.setStrategy(generatorStrategy81);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator73.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator73.getNamingPolicy();
        boolean boolean85 = generator73.getAttemptLoad();
        org.mockito.cglib.core.Predicate predicate86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = namingPolicy70.getClassName("hi!", "", (java.lang.Object) generator73, predicate86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator15.setClassLoader(classLoader20);
        generator15.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator24.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        generator33.setUseCache(false);
        generator33.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray61);
        generator41.setClasses(classArray61);
        boolean boolean64 = generator41.getUseCache();
        generator41.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator67.setClasses(classArray76);
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray87);
        generator41.setClasses(classArray76);
        boolean boolean91 = generator41.getAttemptLoad();
        java.lang.ClassLoader classLoader92 = generator41.getClassLoader();
        generator33.setClassLoader(classLoader92);
        generator24.setClassLoader(classLoader92);
        generator15.setClassLoader(classLoader92);
        generator0.setClassLoader(classLoader92);
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader92);
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        boolean boolean79 = generator77.getUseCache();
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator77, true };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator84.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray91);
        boolean boolean94 = namingPolicy69.equals((java.lang.Object) classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor97 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mixin96);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass14 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator0.setClassLoader(classLoader16);
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = mixin12.newInstance((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator24.setClasses(classArray33);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray21, (java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        boolean boolean54 = generatorStrategy6.equals((java.lang.Object) mixin53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        generator55.setDelegates(objArray64);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray75);
        generator55.setClasses(classArray75);
        boolean boolean78 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator55.getStrategy();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray83);
        boolean boolean86 = generatorStrategy79.equals((java.lang.Object) classLoader80);
        boolean boolean87 = generatorStrategy6.equals((java.lang.Object) classLoader80);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10]");
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        boolean boolean26 = generator24.getUseCache();
        java.lang.Object[] objArray28 = new java.lang.Object[] { generator24, true };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        generator38.setClassLoader(classLoader40);
        boolean boolean42 = generator38.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        generator38.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setUseCache(true);
        java.lang.Object[] objArray54 = new java.lang.Object[] { generator38, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin37.newInstance(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray23, objArray54);
        generator0.setClasses(classArray23);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        boolean boolean79 = generator77.getUseCache();
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator77, true };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator84.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray91);
        boolean boolean94 = namingPolicy69.equals((java.lang.Object) classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin97 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator27.setStrategy(generatorStrategy43);
        boolean boolean45 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator46.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        java.lang.ClassLoader classLoader75 = null;
        generator73.setClassLoader(classLoader75);
        boolean boolean77 = generator73.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy78);
        generator46.setNamingPolicy(namingPolicy78);
        java.lang.ClassLoader classLoader81 = generator46.getClassLoader();
        generator27.setClassLoader(classLoader81);
        generator0.setClassLoader(classLoader81);
        java.lang.Class[] classArray84 = null;
        generator0.setClasses(classArray84);
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader81);
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 1);
        boolean boolean6 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader5 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        java.lang.ClassLoader classLoader10 = null;
        generator8.setClassLoader(classLoader10);
        boolean boolean12 = generator8.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator8.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = namingPolicy13.equals((java.lang.Object) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getUseCache();
        generator38.setUseCache(true);
        boolean boolean42 = generator38.getUseCache();
        generator38.setAttemptLoad(true);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        generator38.setDelegates(objArray47);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, (java.lang.Object[]) classArray58);
        generator38.setClasses(classArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray81);
        java.lang.Object[] objArray84 = new java.lang.Object[] { 1L, '4', classArray34, generator38, classArray70 };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, (java.lang.Object[]) classArray34);
        boolean boolean88 = namingPolicy4.equals((java.lang.Object) classArray34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        boolean boolean24 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = namingPolicy32.equals((java.lang.Object) classArray53);
        generator25.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        generator58.setDelegates(objArray67);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray78);
        generator58.setClasses(classArray78);
        boolean boolean81 = generator58.getUseCache();
        generator58.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator58.getStrategy();
        boolean boolean85 = namingPolicy32.equals((java.lang.Object) generator58);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getAttemptLoad();
        java.lang.ClassLoader classLoader88 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator86.setDelegates((java.lang.Object[]) classArray93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator86.getNamingPolicy();
        boolean boolean96 = namingPolicy32.equals((java.lang.Object) namingPolicy95);
        generator0.setNamingPolicy(namingPolicy95);
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin25.newInstance((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator34.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator34, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        boolean boolean7 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        java.lang.ClassLoader classLoader20 = null;
        generator15.setClassLoader(classLoader20);
        generator15.setStyle(2);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator24.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator24.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        generator33.setUseCache(false);
        generator33.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray61);
        generator41.setClasses(classArray61);
        boolean boolean64 = generator41.getUseCache();
        generator41.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator67.setClasses(classArray76);
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray87);
        generator41.setClasses(classArray76);
        boolean boolean91 = generator41.getAttemptLoad();
        java.lang.ClassLoader classLoader92 = generator41.getClassLoader();
        generator33.setClassLoader(classLoader92);
        generator24.setClassLoader(classLoader92);
        generator15.setClassLoader(classLoader92);
        generator0.setClassLoader(classLoader92);
        generator0.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy99 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(namingPolicy99);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        java.lang.ClassLoader classLoader50 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass52 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setAttemptLoad(true);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        generator75.setDelegates(objArray84);
        generator0.setDelegates(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator40.setStrategy(generatorStrategy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator40.getNamingPolicy();
        boolean boolean56 = namingPolicy39.equals((java.lang.Object) generator40);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray65);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.Predicate predicate71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = namingPolicy39.getClassName("hi!", "", (java.lang.Object) mixin70, predicate71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        generator9.setUseCache(true);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader36 = generator9.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        boolean boolean45 = generator43.getUseCache();
        java.lang.Object[] objArray47 = new java.lang.Object[] { generator43, true };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray42, objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        generator50.setDelegates((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray60);
        java.lang.ClassLoader classLoader62 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray83);
        generator0.setClassLoader(classLoader36);
        generator0.setStyle((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin91 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader49 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        generator0.setNamingPolicy(namingPolicy28);
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        java.lang.Class<?> wildcardClass28 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        generator5.setStrategy(generatorStrategy7);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        generator5.setClasses(classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = generator18.getUseCache();
        generator18.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray64);
        generator18.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray53);
        generator0.setDelegates((java.lang.Object[]) classArray14);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        generator0.setUseCache(false);
        boolean boolean17 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        boolean boolean65 = generator63.getUseCache();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator63, true };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray77);
        boolean boolean80 = namingPolicy55.equals((java.lang.Object) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        java.lang.Class<?> wildcardClass83 = classArray77.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean51 = generator0.getUseCache();
        generator0.setUseCache(false);
        java.lang.Class<?> wildcardClass54 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        boolean boolean82 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin83 = generator0.create();
        boolean boolean84 = generator0.getAttemptLoad();
        boolean boolean85 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setUseCache(true);
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator35, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin34.newInstance(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator0.setDelegates(objArray51);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator59.getStrategy();
        generator57.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        generator68.setDelegates(objArray77);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, (java.lang.Object[]) classArray88);
        generator68.setClasses(classArray88);
        boolean boolean91 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator68.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator68.getStrategy();
        boolean boolean94 = generatorStrategy66.equals((java.lang.Object) generator68);
        generator0.setStrategy(generatorStrategy66);
        java.lang.Class<?> wildcardClass96 = generatorStrategy66.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator22.getStrategy();
        generator20.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator20.setDelegates(objArray33);
        boolean boolean38 = generatorStrategy18.equals((java.lang.Object) objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator39.getNamingPolicy();
        generator39.setUseCache(true);
        java.lang.ClassLoader classLoader65 = generator39.getClassLoader();
        boolean boolean66 = generator39.getAttemptLoad();
        generator39.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = generator69.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator69.getStrategy();
        generator69.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator75.getStrategy();
        generator69.setStrategy(generatorStrategy77);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator69.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator69.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy80);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray82 = generatorStrategy18.generate((org.mockito.cglib.core.ClassGenerator) generator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setStyle(1);
        boolean boolean7 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator55.setClasses(classArray67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        boolean boolean77 = generator75.getUseCache();
        java.lang.Object[] objArray79 = new java.lang.Object[] { generator75, true };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray74, objArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray67, objArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray67);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray90);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray67);
        java.lang.Class<?> wildcardClass97 = classArray96.getClass();
        boolean boolean98 = generatorStrategy54.equals((java.lang.Object) wildcardClass97);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        boolean boolean21 = generatorStrategy14.equals((java.lang.Object) generator15);
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator15.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(namingPolicy29);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin15.newInstance((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin25.newInstance((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader40 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor41 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader40);
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        boolean boolean50 = generator48.getUseCache();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator48, true };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray52);
        org.mockito.cglib.core.Predicate predicate55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = namingPolicy39.getClassName("", "", (java.lang.Object) objArray52, predicate55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        generator16.setClasses(classArray28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        boolean boolean38 = generator36.getUseCache();
        java.lang.Object[] objArray40 = new java.lang.Object[] { generator36, true };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray35, objArray40);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        org.mockito.cglib.core.Predicate predicate58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = namingPolicy13.getClassName("hi!", "hi!", (java.lang.Object) mixin57, predicate58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin19.newInstance((java.lang.Object[]) classArray28);
        generator0.setClasses(classArray28);
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle(2);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator0.getStrategy();
        java.lang.ClassLoader classLoader32 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin33 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader32);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        generator23.setClasses(classArray32);
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray43);
        generator22.setDelegates((java.lang.Object[]) classArray43);
        generator22.setAttemptLoad(true);
        generator22.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin51 = generator22.create();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator52.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator65.setClassLoader(classLoader67);
        boolean boolean69 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = null;
        generator65.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getUseCache();
        generator72.setUseCache(true);
        boolean boolean76 = generator72.getUseCache();
        generator72.setUseCache(true);
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator65, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = mixin64.newInstance(objArray81);
        boolean boolean84 = namingPolicy56.equals((java.lang.Object) objArray81);
        org.mockito.cglib.core.Predicate predicate85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = namingPolicy19.getClassName("", "hi!", (java.lang.Object) boolean84, predicate85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator0.setStrategy(generatorStrategy81);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        java.lang.Class[] classArray13 = org.mockito.cglib.proxy.Mixin.getClasses(objArray10);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        java.lang.Object[] objArray31 = new java.lang.Object[] { generator15, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin14.newInstance(objArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        org.mockito.cglib.core.Predicate predicate36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = namingPolicy5.getClassName("hi!", "", (java.lang.Object) mixin35, predicate36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        boolean boolean79 = generator77.getUseCache();
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator77, true };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator84.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray91);
        boolean boolean94 = namingPolicy69.equals((java.lang.Object) classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin97 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor98 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        java.lang.Class<?> wildcardClass10 = mixin9.getClass();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin25 = generator0.create();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        generator28.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        boolean boolean50 = generator37.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator37.getStrategy();
        generator28.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator28.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator56.setStrategy(generatorStrategy69);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        generator71.setUseCache(true);
        boolean boolean75 = generator71.getUseCache();
        generator71.setAttemptLoad(true);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        generator71.setDelegates(objArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getUseCache();
        java.lang.ClassLoader classLoader85 = null;
        generator83.setClassLoader(classLoader85);
        boolean boolean87 = generator83.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator83.getNamingPolicy();
        generator71.setNamingPolicy(namingPolicy88);
        generator56.setNamingPolicy(namingPolicy88);
        java.lang.ClassLoader classLoader91 = generator56.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator56.getStrategy();
        java.lang.Class<?> wildcardClass93 = generatorStrategy92.getClass();
        boolean boolean94 = generatorStrategy54.equals((java.lang.Object) generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator5 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean6 = generator5.getUseCache();
        generator5.setUseCache(true);
        boolean boolean9 = generator5.getUseCache();
        generator5.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator5.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator5.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        generator14.setUseCache(false);
        generator14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        boolean boolean72 = generator22.getAttemptLoad();
        java.lang.ClassLoader classLoader73 = generator22.getClassLoader();
        generator14.setClassLoader(classLoader73);
        generator5.setClassLoader(classLoader73);
        generator0.setClassLoader(classLoader73);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy77);
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin15.newInstance((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray58, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin25.newInstance((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin76.newInstance((java.lang.Object[]) classArray85);
        java.lang.Class<?> wildcardClass88 = classArray85.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin27 = generator0.create();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = null;
        generator35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setUseCache(true);
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator35, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin34.newInstance(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator0.setDelegates(objArray51);
        boolean boolean56 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator59.getStrategy();
        generator57.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        generator68.setDelegates(objArray77);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, (java.lang.Object[]) classArray88);
        generator68.setClasses(classArray88);
        boolean boolean91 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator68.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator68.getStrategy();
        boolean boolean94 = generatorStrategy66.equals((java.lang.Object) generator68);
        generator0.setStrategy(generatorStrategy66);
        java.lang.Object obj96 = null;
        boolean boolean97 = generatorStrategy66.equals(obj96);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        boolean boolean55 = generator53.getUseCache();
        boolean boolean56 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator53.getNamingPolicy();
        generator53.setStyle(1);
        boolean boolean60 = generator53.getUseCache();
        org.mockito.cglib.core.Predicate predicate61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = namingPolicy50.getClassName("hi!", "", (java.lang.Object) generator53, predicate61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle(2);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(objArray32);
        generator0.setDelegates(objArray32);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = mixin37.newInstance((java.lang.Object[]) classArray43);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray52);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = mixin53.newInstance((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        boolean boolean36 = generator0.getAttemptLoad();
        generator0.setStyle(0);
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        boolean boolean24 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator28.setStrategy(generatorStrategy34);
        generator28.setAttemptLoad(true);
        generator28.setUseCache(true);
        boolean boolean40 = generator28.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator41.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = null;
        generator41.setNamingPolicy(namingPolicy48);
        boolean boolean50 = generator41.getAttemptLoad();
        java.lang.Object[] objArray51 = null;
        generator41.setDelegates(objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator53.getStrategy();
        generator53.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator63.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator63.getStrategy();
        generator53.setStrategy(generatorStrategy78);
        generator41.setStrategy(generatorStrategy78);
        java.lang.Object obj81 = null;
        boolean boolean82 = generatorStrategy78.equals(obj81);
        generator28.setStrategy(generatorStrategy78);
        boolean boolean84 = generator28.getUseCache();
        java.lang.ClassLoader classLoader85 = null;
        generator28.setClassLoader(classLoader85);
        boolean boolean87 = generatorStrategy27.equals((java.lang.Object) classLoader85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray6);
        java.lang.Class<?> wildcardClass14 = mixin13.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean11 = generatorStrategy9.equals((java.lang.Object) 0L);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator12.getNamingPolicy();
        generator12.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator12.getClassLoader();
        boolean boolean39 = generator12.getAttemptLoad();
        generator12.setAttemptLoad(true);
        boolean boolean42 = generator12.getAttemptLoad();
        boolean boolean43 = generatorStrategy9.equals((java.lang.Object) generator12);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        boolean boolean55 = generatorStrategy9.equals((java.lang.Object) mixin54);
        org.mockito.cglib.core.ClassGenerator classGenerator56 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray57 = generatorStrategy9.generate(classGenerator56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = generator18.getUseCache();
        generator18.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray64);
        generator18.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        java.lang.ClassLoader classLoader70 = null;
        generator68.setClassLoader(classLoader70);
        boolean boolean72 = generator68.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator68.getNamingPolicy();
        generator18.setNamingPolicy(namingPolicy73);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        generator83.setDelegates((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray82, (java.lang.Object[]) classArray90);
        boolean boolean93 = namingPolicy73.equals((java.lang.Object) mixin92);
        generator0.setNamingPolicy(namingPolicy73);
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean7 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        boolean boolean19 = generator17.getUseCache();
        java.lang.Object[] objArray21 = new java.lang.Object[] { generator17, true };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray16, objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray16, (java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, (java.lang.Object[]) classArray31);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        org.mockito.cglib.core.Predicate predicate48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = namingPolicy7.getClassName("", "hi!", (java.lang.Object) mixin47, predicate48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray59);
        generator0.setClasses(classArray36);
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray62);
        boolean boolean66 = namingPolicy50.equals((java.lang.Object) objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator68.setStrategy(generatorStrategy70);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        generator68.setClasses(classArray77);
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray88);
        generator67.setDelegates((java.lang.Object[]) classArray88);
        generator67.setAttemptLoad(true);
        generator67.setUseCache(false);
        boolean boolean96 = namingPolicy50.equals((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator20.getStrategy();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = mixin30.newInstance((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        boolean boolean50 = generator48.getUseCache();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator48, true };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator55.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray47);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        boolean boolean67 = generatorStrategy24.equals((java.lang.Object) classArray47);
        generator0.setStrategy(generatorStrategy24);
        boolean boolean69 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        java.lang.ClassLoader classLoader75 = null;
        generator73.setClassLoader(classLoader75);
        boolean boolean77 = generator73.getAttemptLoad();
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator73.setClasses(classArray85);
        java.lang.ClassLoader classLoader87 = null;
        generator73.setClassLoader(classLoader87);
        boolean boolean89 = generator73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator73.getStrategy();
        org.mockito.cglib.core.Predicate predicate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = namingPolicy70.getClassName("", "", (java.lang.Object) generatorStrategy90, predicate91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        generator4.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        boolean boolean25 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        generator12.setDelegates(objArray35);
        generator0.setDelegates(objArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        boolean boolean45 = generator40.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        java.lang.ClassLoader classLoader50 = null;
        generator48.setClassLoader(classLoader50);
        boolean boolean52 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = namingPolicy53.equals((java.lang.Object) classArray74);
        generator46.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = generator46.getNamingPolicy();
        boolean boolean81 = namingPolicy79.equals((java.lang.Object) 2);
        generator40.setNamingPolicy(namingPolicy79);
        generator0.setNamingPolicy(namingPolicy79);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        boolean boolean62 = generator39.getUseCache();
        generator39.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = null;
        generator65.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(objArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray74);
        generator65.setClasses(classArray74);
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray85);
        generator39.setClasses(classArray74);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray74);
        boolean boolean90 = namingPolicy24.equals((java.lang.Object) mixin89);
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean92 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray24);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = mixin27.newInstance((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator37.setClassLoader(classLoader39);
        boolean boolean41 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator37.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setUseCache(true);
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator37, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = mixin36.newInstance(objArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        org.mockito.asm.ClassVisitor classVisitor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        generator0.setClasses(classArray84);
        org.mockito.asm.ClassVisitor classVisitor90 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        generator0.setClasses(classArray84);
        boolean boolean90 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = namingPolicy14.equals((java.lang.Object) classArray35);
        generator7.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator40.setClassLoader(classLoader42);
        boolean boolean44 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator40.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator40.setStrategy(generatorStrategy46);
        generator40.setAttemptLoad(true);
        generator40.setUseCache(true);
        boolean boolean52 = generator40.getUseCache();
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        generator40.setDelegates((java.lang.Object[]) classArray60);
        boolean boolean63 = namingPolicy14.equals((java.lang.Object) generator40);
        generator0.setNamingPolicy(namingPolicy14);
        boolean boolean65 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader66 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator6.getStrategy();
        generator6.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator6.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray38);
        generator17.setDelegates((java.lang.Object[]) classArray38);
        generator17.setAttemptLoad(true);
        generator17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator17.getNamingPolicy();
        generator6.setNamingPolicy(namingPolicy46);
        generator0.setNamingPolicy(namingPolicy46);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(namingPolicy46);
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean11 = generatorStrategy9.equals((java.lang.Object) 0L);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator12.getNamingPolicy();
        generator12.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator12.getClassLoader();
        boolean boolean39 = generator12.getAttemptLoad();
        generator12.setAttemptLoad(true);
        boolean boolean42 = generator12.getAttemptLoad();
        boolean boolean43 = generatorStrategy9.equals((java.lang.Object) generator12);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = generator46.getStrategy();
        generator44.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        generator55.setDelegates(objArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        boolean boolean71 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = generator67.getNamingPolicy();
        generator55.setNamingPolicy(namingPolicy72);
        generator44.setNamingPolicy(namingPolicy72);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray75 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(namingPolicy72);
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle(2);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getUseCache();
        generator31.setUseCache(true);
        boolean boolean35 = generator31.getUseCache();
        generator31.setAttemptLoad(true);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        generator31.setDelegates(objArray40);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        generator31.setClasses(classArray51);
        boolean boolean54 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = generator31.getStrategy();
        boolean boolean56 = generator31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = generator31.getStrategy();
        boolean boolean58 = namingPolicy30.equals((java.lang.Object) generatorStrategy57);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator61.setClassLoader(classLoader66);
        generator61.setStyle(2);
        boolean boolean70 = generator61.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator61.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator61.getStrategy();
        org.mockito.cglib.core.Predicate predicate73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = namingPolicy30.getClassName("", "", (java.lang.Object) generatorStrategy72, predicate73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin14);
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setAttemptLoad(true);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        generator7.setDelegates(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator7.setNamingPolicy(namingPolicy24);
        boolean boolean26 = generatorStrategy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        generator52.setDelegates((java.lang.Object[]) classArray59);
        boolean boolean61 = generatorStrategy51.equals((java.lang.Object) classArray59);
        generator7.setClasses(classArray59);
        generator7.setUseCache(false);
        java.lang.ClassLoader classLoader65 = generator7.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator7.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader65);
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.Class<?> wildcardClass14 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray33);
        java.lang.Class<?> wildcardClass41 = mixin40.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin37 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator0.getNamingPolicy();
        boolean boolean39 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator7, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin6.newInstance(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        java.lang.ClassLoader classLoader35 = null;
        generator33.setClassLoader(classLoader35);
        boolean boolean37 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        generator33.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setUseCache(true);
        java.lang.Object[] objArray49 = new java.lang.Object[] { generator33, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = mixin32.newInstance(objArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin25.newInstance(objArray49);
        java.lang.Class<?> wildcardClass54 = mixin53.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray76);
        java.lang.Object[] objArray79 = new java.lang.Object[] { 1L, '4', classArray29, generator33, classArray65 };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        java.lang.Object obj7 = null;
        org.mockito.cglib.core.Predicate predicate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = namingPolicy4.getClassName("", "", obj7, predicate8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        boolean boolean25 = generator12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        generator35.setClasses(classArray55);
        boolean boolean58 = namingPolicy34.equals((java.lang.Object) classArray55);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray65);
        boolean boolean69 = namingPolicy34.equals((java.lang.Object) classArray65);
        generator0.setClasses(classArray65);
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator7, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin6.newInstance(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        boolean boolean35 = generator33.getUseCache();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator33, true };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator40.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray47);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        boolean boolean62 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator58.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setUseCache(true);
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator58, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin57.newInstance(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray74);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin25.newInstance((java.lang.Object[]) classArray47);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin25.newInstance((java.lang.Object[]) classArray85);
        java.lang.Class<?> wildcardClass90 = mixin89.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass27 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray52);
        boolean boolean54 = generatorStrategy34.equals((java.lang.Object) mixin53);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        generator55.setUseCache(true);
        boolean boolean59 = generator55.getUseCache();
        generator55.setAttemptLoad(true);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        generator55.setDelegates(objArray64);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, (java.lang.Object[]) classArray75);
        generator55.setClasses(classArray75);
        boolean boolean78 = generator55.getUseCache();
        generator55.setStyle((int) (byte) 1);
        boolean boolean81 = generatorStrategy34.equals((java.lang.Object) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        boolean boolean84 = generator82.getUseCache();
        java.lang.ClassLoader classLoader85 = null;
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray91);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        generator82.setClasses(classArray91);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray97 = generatorStrategy34.generate((org.mockito.cglib.core.ClassGenerator) generator82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(classArray95);
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        boolean boolean61 = generator33.getAttemptLoad();
        java.lang.Class<?> wildcardClass62 = generator33.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        boolean boolean8 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        generator4.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin mixin23 = generator4.create();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator32.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray39);
        generator4.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        generator49.setDelegates(objArray58);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray69);
        generator49.setClasses(classArray69);
        boolean boolean72 = namingPolicy48.equals((java.lang.Object) classArray69);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray79);
        boolean boolean83 = namingPolicy48.equals((java.lang.Object) classArray79);
        generator4.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy85);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin87 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        boolean boolean11 = generatorStrategy9.equals((java.lang.Object) 0L);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator12.getNamingPolicy();
        generator12.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator12.getClassLoader();
        boolean boolean39 = generator12.getAttemptLoad();
        generator12.setAttemptLoad(true);
        boolean boolean42 = generator12.getAttemptLoad();
        boolean boolean43 = generatorStrategy9.equals((java.lang.Object) generator12);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        boolean boolean55 = generatorStrategy9.equals((java.lang.Object) mixin54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setUseCache(true);
        generator56.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator65.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator67.getStrategy();
        generator65.setStrategy(generatorStrategy69);
        generator56.setStrategy(generatorStrategy69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator56.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray73 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(generatorStrategy72);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator0.setDelegates((java.lang.Object[]) classArray47);
        boolean boolean51 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator52.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator52.getStrategy();
        java.lang.ClassLoader classLoader68 = null;
        generator52.setClassLoader(classLoader68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator52.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Mixin mixin72 = generator0.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator74.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator74.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator78.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator78.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator78.getNamingPolicy();
        generator74.setNamingPolicy(namingPolicy82);
        generator0.setNamingPolicy(namingPolicy82);
        boolean boolean85 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        generator0.setStyle(0);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator17.getStrategy();
        generator15.setStrategy(generatorStrategy19);
        generator0.setStrategy(generatorStrategy19);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        generator22.setUseCache(true);
        generator22.setUseCache(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator22.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator22.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy50);
        org.mockito.asm.ClassVisitor classVisitor52 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(namingPolicy50);
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator47.setDelegates((java.lang.Object[]) classArray68);
        generator47.setAttemptLoad(true);
        generator47.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = generator47.getNamingPolicy();
        boolean boolean77 = namingPolicy44.equals((java.lang.Object) namingPolicy76);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getUseCache();
        boolean boolean88 = generator86.getUseCache();
        java.lang.Object[] objArray90 = new java.lang.Object[] { generator86, true };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray85, objArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        org.mockito.cglib.core.Predicate predicate95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = namingPolicy76.getClassName("hi!", "hi!", (java.lang.Object) classArray85, predicate95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator25.setClasses(classArray34);
        boolean boolean38 = generator25.getUseCache();
        generator25.setAttemptLoad(false);
        generator25.setAttemptLoad(false);
        generator25.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = generatorStrategy24.generate((org.mockito.cglib.core.ClassGenerator) generator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.Object[] objArray12 = null;
        generator0.setDelegates(objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = namingPolicy19.equals((java.lang.Object) classArray40);
        generator0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = generator45.getUseCache();
        generator45.setAttemptLoad(false);
        java.lang.ClassLoader classLoader71 = generator45.getClassLoader();
        generator0.setClassLoader(classLoader71);
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator0.setNamingPolicy(namingPolicy44);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray87);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        java.lang.Class<?> wildcardClass93 = classArray87.getClass();
        boolean boolean94 = namingPolicy44.equals((java.lang.Object) classArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        boolean boolean5 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator7.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator7.getAttemptLoad();
        java.lang.Object[] objArray17 = null;
        generator7.setDelegates(objArray17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy19);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin21 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        generator27.setStrategy(generatorStrategy49);
        generator15.setStrategy(generatorStrategy49);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray67);
        boolean boolean69 = generatorStrategy49.equals((java.lang.Object) mixin68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setAttemptLoad(true);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        generator70.setDelegates(objArray79);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray90);
        generator70.setClasses(classArray90);
        boolean boolean93 = generator70.getUseCache();
        generator70.setStyle((int) (byte) 1);
        boolean boolean96 = generatorStrategy49.equals((java.lang.Object) (byte) 1);
        generator0.setStrategy(generatorStrategy49);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin42.newInstance((java.lang.Object[]) classArray51);
        java.lang.Class<?> wildcardClass55 = mixin54.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator0.setStrategy(generatorStrategy16);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = mixin30.newInstance((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.Class<?> wildcardClass43 = mixin42.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin23.newInstance((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        boolean boolean43 = generator41.getUseCache();
        java.lang.Object[] objArray45 = new java.lang.Object[] { generator41, true };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator48.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray40);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin58.newInstance((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        generator6.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray70);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        boolean boolean16 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader3 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        boolean boolean14 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        generator0.setStyle((int) (short) 0);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.Object[] objArray83 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray73, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray84);
        generator0.setClasses(classArray84);
        boolean boolean90 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader91 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass92 = classLoader91.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        generator35.setClasses(classArray55);
        boolean boolean58 = namingPolicy34.equals((java.lang.Object) classArray55);
        generator27.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        generator60.setUseCache(true);
        boolean boolean64 = generator60.getUseCache();
        generator60.setAttemptLoad(true);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        generator60.setDelegates(objArray69);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray80);
        generator60.setClasses(classArray80);
        boolean boolean83 = generator60.getUseCache();
        generator60.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator60.getStrategy();
        boolean boolean87 = namingPolicy34.equals((java.lang.Object) generator60);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = generatorStrategy26.generate((org.mockito.cglib.core.ClassGenerator) generator60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        boolean boolean8 = generator4.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator4.setClassLoader(classLoader9);
        generator4.setStyle(2);
        generator4.setUseCache(false);
        generator4.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator17.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator17.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator33.setClasses(classArray42);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray76);
        generator17.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator81.getStrategy();
        generator81.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator87 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean88 = generator87.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator87.getStrategy();
        generator81.setStrategy(generatorStrategy89);
        generator17.setStrategy(generatorStrategy89);
        generator4.setStrategy(generatorStrategy89);
        boolean boolean93 = generatorStrategy3.equals((java.lang.Object) generatorStrategy89);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle((int) (short) 1);
        java.lang.ClassLoader classLoader29 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 1);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        generator63.setUseCache(true);
        generator63.setStyle(0);
        boolean boolean90 = generator63.getAttemptLoad();
        boolean boolean91 = generator63.getAttemptLoad();
        org.mockito.cglib.core.Predicate predicate92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = namingPolicy7.getClassName("", "", (java.lang.Object) generator63, predicate92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = null;
        generator7.setNamingPolicy(namingPolicy14);
        boolean boolean16 = generator7.getAttemptLoad();
        java.lang.Object[] objArray17 = null;
        generator7.setDelegates(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        generator19.setClasses(classArray39);
        generator7.setClasses(classArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        boolean boolean53 = generator51.getUseCache();
        java.lang.Object[] objArray55 = new java.lang.Object[] { generator51, true };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray50, objArray55);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator58.setDelegates((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin69 = mixin43.newInstance((java.lang.Object[]) classArray50);
        generator0.setDelegates((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray50);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray80, (java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray80);
        java.lang.Class<?> wildcardClass93 = classArray80.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.ClassLoader classLoader12 = null;
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, (java.lang.Object[]) classArray22);
        generator0.setDelegates((java.lang.Object[]) classArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader25 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        java.lang.ClassLoader classLoader22 = null;
        generator20.setClassLoader(classLoader22);
        boolean boolean24 = generator20.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = null;
        generator20.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        java.lang.Object[] objArray36 = new java.lang.Object[] { generator20, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = mixin19.newInstance(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray36);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        java.lang.ClassLoader classLoader27 = null;
        generator25.setClassLoader(classLoader27);
        boolean boolean29 = generator25.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator25.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator31 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean32 = generator31.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator31.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator31.getStrategy();
        generator31.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        generator31.setStrategy(generatorStrategy39);
        boolean boolean41 = namingPolicy30.equals((java.lang.Object) generator31);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator31.getNamingPolicy();
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin48.newInstance((java.lang.Object[]) classArray57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        boolean boolean68 = generator66.getUseCache();
        java.lang.Object[] objArray70 = new java.lang.Object[] { generator66, true };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray65, objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getAttemptLoad();
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        generator73.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray65);
        java.lang.ClassLoader classLoader84 = null;
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray87);
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = mixin83.newInstance((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        java.lang.Class[] classArray95 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray90);
        generator31.setClasses(classArray95);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray95);
        generator0.setClasses(classArray95);
        java.lang.ClassLoader classLoader99 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(classLoader99);
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setUseCache(true);
        java.lang.Object[] objArray16 = new java.lang.Object[] { generator0, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator23.getStrategy();
        generator21.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator21.setDelegates(objArray34);
        org.mockito.cglib.proxy.Mixin mixin39 = mixin20.newInstance(objArray34);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(objArray34);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        boolean boolean77 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = null;
        generator0.setStrategy(generatorStrategy90);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classArray88);
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        boolean boolean79 = generator77.getUseCache();
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator77, true };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator84.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray91);
        boolean boolean94 = namingPolicy69.equals((java.lang.Object) classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        boolean boolean96 = generator0.getAttemptLoad();
        generator0.setStyle(1);
        java.lang.ClassLoader classLoader99 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(classLoader99);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator27.setClasses(classArray39);
        java.lang.ClassLoader classLoader41 = null;
        generator27.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator27.setStrategy(generatorStrategy43);
        boolean boolean45 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator46.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        java.lang.ClassLoader classLoader75 = null;
        generator73.setClassLoader(classLoader75);
        boolean boolean77 = generator73.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator73.getNamingPolicy();
        generator61.setNamingPolicy(namingPolicy78);
        generator46.setNamingPolicy(namingPolicy78);
        java.lang.ClassLoader classLoader81 = generator46.getClassLoader();
        generator27.setClassLoader(classLoader81);
        generator0.setClassLoader(classLoader81);
        java.lang.Class[] classArray84 = null;
        generator0.setClasses(classArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = generator0.create();
        java.lang.Class<?> wildcardClass87 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        boolean boolean37 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        generator15.setStrategy(generatorStrategy17);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        generator15.setClasses(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator15.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = generator15.getStrategy();
        generator15.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray33 = generatorStrategy14.generate((org.mockito.cglib.core.ClassGenerator) generator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        boolean boolean7 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        generator15.setNamingPolicy(namingPolicy22);
        boolean boolean24 = generator15.getAttemptLoad();
        java.lang.Object[] objArray25 = null;
        generator15.setDelegates(objArray25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        boolean boolean35 = generator33.getUseCache();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator33, true };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator40.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray47);
        generator15.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator15.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray52 = generatorStrategy14.generate((org.mockito.cglib.core.ClassGenerator) generator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(namingPolicy51);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setUseCache(false);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        generator0.setStyle((int) (short) 1);
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class<?> wildcardClass58 = mixin57.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        boolean boolean32 = generator30.getUseCache();
        java.lang.Object[] objArray34 = new java.lang.Object[] { generator30, true };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray29, objArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray29, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = mixin23.newInstance((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray44);
        java.lang.Class<?> wildcardClass50 = classArray44.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader94 = generator0.getClassLoader();
        boolean boolean95 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = generator0.getNamingPolicy();
        java.lang.Class[] classArray98 = null;
        generator0.setClasses(classArray98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(namingPolicy97);
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        boolean boolean19 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator20.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator20.getStrategy();
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = mixin30.newInstance((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        boolean boolean50 = generator48.getUseCache();
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator48, true };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        generator55.setDelegates((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray47, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray47);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        boolean boolean67 = generatorStrategy24.equals((java.lang.Object) classArray47);
        generator0.setStrategy(generatorStrategy24);
        boolean boolean69 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        generator73.setDelegates(objArray82);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray93);
        generator73.setClasses(classArray93);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator73.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = namingPolicy70.getClassName("", "", (java.lang.Object) generator73, predicate97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        java.lang.Object[] objArray12 = null;
        generator0.setDelegates(objArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        java.lang.ClassLoader classLoader16 = null;
        generator14.setClassLoader(classLoader16);
        boolean boolean18 = generator14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator14.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = namingPolicy19.equals((java.lang.Object) classArray40);
        generator0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = generator45.getUseCache();
        generator45.setAttemptLoad(false);
        java.lang.ClassLoader classLoader71 = generator45.getClassLoader();
        generator0.setClassLoader(classLoader71);
        java.lang.Class<?> wildcardClass73 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        generator7.setUseCache(false);
        generator7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        boolean boolean65 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = generator15.getClassLoader();
        generator7.setClassLoader(classLoader66);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator7.setDelegates((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader77);
        java.lang.Object[] objArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classLoader77);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        java.lang.ClassLoader classLoader40 = generator13.getClassLoader();
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        boolean boolean49 = generator47.getUseCache();
        java.lang.Object[] objArray51 = new java.lang.Object[] { generator47, true };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray46, objArray51);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getAttemptLoad();
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        generator54.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader66 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setAttemptLoad(true);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        generator67.setDelegates(objArray76);
        java.lang.ClassLoader classLoader79 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, (java.lang.Object[]) classArray87);
        generator67.setClasses(classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray87);
        generator0.setClasses(classArray87);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = namingPolicy26.equals((java.lang.Object) classArray47);
        generator18.setNamingPolicy(namingPolicy26);
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator53.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator53.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator53.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        boolean boolean86 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator63.getStrategy();
        generator53.setStrategy(generatorStrategy88);
        generator0.setStrategy(generatorStrategy88);
        java.lang.ClassLoader classLoader91 = null;
        java.lang.ClassLoader classLoader92 = null;
        java.lang.Object[] objArray94 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader92, objArray94);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader91, objArray94);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(objArray94);
        generator0.setDelegates(objArray94);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[10]");
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Class[] classArray1 = org.mockito.cglib.proxy.Mixin.getClasses(objArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.proxy.Mixin.getClasses(objArray0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(objArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(classArray2);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator25.setStrategy(generatorStrategy27);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        generator25.setClasses(classArray34);
        boolean boolean38 = generator25.getUseCache();
        generator25.setAttemptLoad(false);
        generator25.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin43 = generator25.create();
        java.lang.ClassLoader classLoader44 = generator25.getClassLoader();
        java.lang.ClassLoader classLoader45 = generator25.getClassLoader();
        boolean boolean46 = generatorStrategy24.equals((java.lang.Object) classLoader45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        generator47.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        generator47.setClasses(classArray56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator47.setStrategy(generatorStrategy60);
        boolean boolean62 = generator47.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = generatorStrategy24.generate((org.mockito.cglib.core.ClassGenerator) generator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin13 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        boolean boolean71 = generator69.getUseCache();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator69, true };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator76.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray86);
        java.lang.ClassLoader classLoader89 = null;
        java.lang.ClassLoader classLoader90 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader90, objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader89, objArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(objArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = mixin88.newInstance(objArray92);
        java.lang.Class<?> wildcardClass97 = objArray92.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin25.newInstance((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator34.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator34, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator64.setDelegates((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray63, (java.lang.Object[]) classArray71);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray63);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator23.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator23.getStrategy();
        generator23.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator23.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray30 = generatorStrategy22.generate((org.mockito.cglib.core.ClassGenerator) generator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy29);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator13.setStrategy(generatorStrategy15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        generator13.setClasses(classArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator13.setStrategy(generatorStrategy26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator13.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray72);
        generator13.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator77.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator77.getStrategy();
        generator77.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator83 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean84 = generator83.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator83.getStrategy();
        generator77.setStrategy(generatorStrategy85);
        generator13.setStrategy(generatorStrategy85);
        generator0.setStrategy(generatorStrategy85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader89 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.core.ClassGenerator classGenerator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = generatorStrategy6.generate(classGenerator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        boolean boolean31 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        generator18.setDelegates(objArray41);
        generator18.setStyle(2);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray50);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        generator18.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin mixin55 = mixin17.newInstance(objArray50);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator13.setClassLoader(classLoader18);
        generator13.setStyle(2);
        boolean boolean22 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator13.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = null;
        generator24.setNamingPolicy(namingPolicy31);
        boolean boolean33 = generator24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator24.getStrategy();
        boolean boolean35 = namingPolicy23.equals((java.lang.Object) generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray57);
        generator37.setClasses(classArray57);
        boolean boolean60 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = generator37.getStrategy();
        boolean boolean62 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator37.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        boolean boolean77 = generator64.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        generator78.setUseCache(true);
        boolean boolean82 = generator78.getUseCache();
        generator78.setAttemptLoad(true);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, objArray87);
        generator78.setDelegates(objArray87);
        generator64.setDelegates(objArray87);
        boolean boolean91 = generatorStrategy63.equals((java.lang.Object) generator64);
        boolean boolean92 = generator64.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray93 = generatorStrategy34.generate((org.mockito.cglib.core.ClassGenerator) generator64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10]");
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator8.getStrategy();
        generator6.setStrategy(generatorStrategy15);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator29.getNamingPolicy();
        generator17.setNamingPolicy(namingPolicy34);
        generator6.setNamingPolicy(namingPolicy34);
        boolean boolean37 = generator6.getAttemptLoad();
        boolean boolean38 = namingPolicy5.equals((java.lang.Object) generator6);
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator6.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        boolean boolean20 = generator18.getUseCache();
        java.lang.Object[] objArray22 = new java.lang.Object[] { generator18, true };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(classArray17, objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray32);
        boolean boolean36 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        generator0.setDelegates(objArray77);
        org.mockito.cglib.proxy.Mixin mixin82 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin82);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        generator27.setStrategy(generatorStrategy49);
        generator15.setStrategy(generatorStrategy49);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray67);
        boolean boolean69 = generatorStrategy49.equals((java.lang.Object) mixin68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setAttemptLoad(true);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        generator70.setDelegates(objArray79);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray90);
        generator70.setClasses(classArray90);
        boolean boolean93 = generator70.getUseCache();
        generator70.setStyle((int) (byte) 1);
        boolean boolean96 = generatorStrategy49.equals((java.lang.Object) (byte) 1);
        generator0.setStrategy(generatorStrategy49);
        generator0.setStyle(2);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin76 = generator0.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        java.lang.Object[] objArray78 = new java.lang.Object[] { 1L, '4', classArray28, generator32, classArray64 };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        java.lang.Class<?> wildcardClass80 = classArray28.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setStyle((int) (byte) 0);
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        java.lang.ClassLoader classLoader16 = null;
        generator0.setClassLoader(classLoader16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator9.setClassLoader(classLoader14);
        generator9.setStyle(2);
        boolean boolean18 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator9.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = generatorStrategy8.generate((org.mockito.cglib.core.ClassGenerator) generator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        generator0.setNamingPolicy(namingPolicy28);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor33 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        generator74.setUseCache(true);
        generator74.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator74.getNamingPolicy();
        boolean boolean81 = generator74.getAttemptLoad();
        generator74.setUseCache(false);
        org.mockito.cglib.core.Predicate predicate84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = namingPolicy69.getClassName("", "", (java.lang.Object) false, predicate84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        java.lang.Object[] objArray78 = new java.lang.Object[] { 1L, '4', classArray28, generator32, classArray64 };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        boolean boolean24 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = namingPolicy32.equals((java.lang.Object) classArray53);
        generator25.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        generator58.setUseCache(true);
        boolean boolean62 = generator58.getUseCache();
        generator58.setAttemptLoad(true);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        generator58.setDelegates(objArray67);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, (java.lang.Object[]) classArray78);
        generator58.setClasses(classArray78);
        boolean boolean81 = generator58.getUseCache();
        generator58.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator58.getStrategy();
        boolean boolean85 = namingPolicy32.equals((java.lang.Object) generator58);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getAttemptLoad();
        java.lang.ClassLoader classLoader88 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator86.setDelegates((java.lang.Object[]) classArray93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator86.getNamingPolicy();
        boolean boolean96 = namingPolicy32.equals((java.lang.Object) namingPolicy95);
        generator0.setNamingPolicy(namingPolicy95);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = null;
        generator41.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setUseCache(true);
        java.lang.Object[] objArray57 = new java.lang.Object[] { generator41, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = mixin40.newInstance(objArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = mixin33.newInstance(objArray57);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        generator0.setDelegates(objArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader64 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean9 = generator0.getAttemptLoad();
        boolean boolean10 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        boolean boolean13 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = namingPolicy21.equals((java.lang.Object) classArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        generator46.setUseCache(true);
        boolean boolean50 = generator46.getUseCache();
        generator46.setAttemptLoad(true);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        generator46.setDelegates(objArray55);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray66);
        generator46.setClasses(classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator69.setStrategy(generatorStrategy71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator69.setClasses(classArray78);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, (java.lang.Object[]) classArray89);
        java.lang.Object[] objArray92 = new java.lang.Object[] { 1L, '4', classArray42, generator46, classArray78 };
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray42);
        boolean boolean95 = namingPolicy13.equals((java.lang.Object) classArray94);
        generator0.setNamingPolicy(namingPolicy13);
        boolean boolean97 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy39);
        generator7.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader42 = generator7.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator7.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin44 = generator7.create();
        generator7.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray47 = generatorStrategy6.generate((org.mockito.cglib.core.ClassGenerator) generator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(mixin44);
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator16.getStrategy();
        generator14.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator25.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator25.getStrategy();
        boolean boolean51 = generatorStrategy23.equals((java.lang.Object) generator25);
        generator0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, (java.lang.Object[]) classArray79);
        generator59.setClasses(classArray79);
        boolean boolean82 = namingPolicy58.equals((java.lang.Object) classArray79);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        generator0.setClasses(classArray79);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        generator10.setStrategy(generatorStrategy12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        generator10.setClasses(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        generator10.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator27.setDelegates((java.lang.Object[]) classArray48);
        generator27.setAttemptLoad(true);
        generator27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator27.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray57 = generatorStrategy25.generate((org.mockito.cglib.core.ClassGenerator) generator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(namingPolicy56);
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray32);
        boolean boolean35 = generatorStrategy25.equals((java.lang.Object) classLoader26);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator36.setClasses(classArray45);
        boolean boolean49 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setAttemptLoad(true);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        generator50.setDelegates(objArray59);
        generator36.setDelegates(objArray59);
        generator36.setStyle((int) (short) 1);
        boolean boolean65 = generatorStrategy25.equals((java.lang.Object) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        boolean boolean76 = generator25.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor77 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator25.generateClass(classVisitor77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass10 = generatorStrategy9.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        boolean boolean57 = generator0.getAttemptLoad();
        boolean boolean58 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        boolean boolean37 = generator35.getUseCache();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator35, true };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray12, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray12);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = mixin60.newInstance((java.lang.Object[]) classArray69);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        boolean boolean80 = generator78.getUseCache();
        java.lang.Object[] objArray82 = new java.lang.Object[] { generator78, true };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.ClassLoader classLoader87 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator85.setDelegates((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin97 = mixin54.newInstance((java.lang.Object[]) classArray77);
        java.lang.Class<?> wildcardClass98 = mixin97.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        generator0.setAttemptLoad(false);
        boolean boolean59 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = generator0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(true);
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setUseCache(false);
        boolean boolean74 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        generator0.setStrategy(generatorStrategy75);
        org.mockito.asm.ClassVisitor classVisitor77 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        generator7.setUseCache(false);
        generator7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        boolean boolean65 = generator15.getAttemptLoad();
        java.lang.ClassLoader classLoader66 = generator15.getClassLoader();
        generator7.setClassLoader(classLoader66);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator7.setDelegates((java.lang.Object[]) classArray75);
        java.lang.ClassLoader classLoader77 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        generator0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        generator4.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        boolean boolean25 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        generator12.setDelegates(objArray35);
        generator0.setDelegates(objArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        java.lang.Object obj41 = null;
        boolean boolean42 = generatorStrategy40.equals(obj41);
        java.lang.Class<?> wildcardClass43 = generatorStrategy40.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator54.getNamingPolicy();
        generator54.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray58 = generatorStrategy52.generate((org.mockito.cglib.core.ClassGenerator) generator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy55);
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        java.lang.Class<?> wildcardClass64 = classArray58.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = namingPolicy26.equals((java.lang.Object) classArray47);
        generator18.setNamingPolicy(namingPolicy26);
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator53.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator53.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator53.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        boolean boolean86 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator63.getStrategy();
        generator53.setStrategy(generatorStrategy88);
        generator0.setStrategy(generatorStrategy88);
        org.mockito.asm.ClassVisitor classVisitor91 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator12.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        generator16.setUseCache(true);
        boolean boolean20 = generator16.getUseCache();
        generator16.setAttemptLoad(true);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        generator16.setDelegates(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator28.getNamingPolicy();
        generator16.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin mixin35 = generator16.create();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        generator44.setDelegates((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray51);
        generator16.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        java.lang.ClassLoader classLoader57 = null;
        generator55.setClassLoader(classLoader57);
        boolean boolean59 = generator55.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator55.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        generator61.setUseCache(true);
        boolean boolean65 = generator61.getUseCache();
        generator61.setAttemptLoad(true);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        generator61.setDelegates(objArray70);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray81);
        generator61.setClasses(classArray81);
        boolean boolean84 = namingPolicy60.equals((java.lang.Object) classArray81);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray91);
        boolean boolean95 = namingPolicy60.equals((java.lang.Object) classArray91);
        generator16.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = generator16.getStrategy();
        generator12.setStrategy(generatorStrategy97);
        boolean boolean99 = namingPolicy11.equals((java.lang.Object) generator12);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(generatorStrategy97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin15 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy14);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        java.lang.ClassLoader classLoader0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator1.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin28 = generator1.create();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = null;
        generator36.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setUseCache(true);
        java.lang.Object[] objArray52 = new java.lang.Object[] { generator36, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin35.newInstance(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator1.setDelegates(objArray52);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray80);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin81.newInstance((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray75, (java.lang.Object[]) classArray90);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray75);
        java.lang.Object[] objArray95 = null;
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray75, objArray95);
        generator1.setClasses(classArray75);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray75);
        java.lang.Class<?> wildcardClass99 = classArray75.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader94 = generator0.getClassLoader();
        boolean boolean95 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = null;
        generator0.setNamingPolicy(namingPolicy97);
        org.mockito.cglib.core.NamingPolicy namingPolicy99 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(namingPolicy99);
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        generator0.setNamingPolicy(namingPolicy28);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = generator34.getUseCache();
        generator34.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator34.setStrategy(generatorStrategy60);
        generator34.setUseCache(true);
        generator34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator34.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        org.mockito.asm.ClassVisitor classVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        generator0.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator23.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator23.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator23.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        generator34.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Mixin mixin53 = generator34.create();
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getAttemptLoad();
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        generator62.setDelegates((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray61, (java.lang.Object[]) classArray69);
        generator34.setDelegates((java.lang.Object[]) classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = generator34.getNamingPolicy();
        java.lang.ClassLoader classLoader74 = generator34.getClassLoader();
        boolean boolean75 = namingPolicy32.equals((java.lang.Object) classLoader74);
        java.lang.Object obj78 = null;
        org.mockito.cglib.core.Predicate predicate79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = namingPolicy32.getClassName("hi!", "hi!", obj78, predicate79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray6);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = mixin7.newInstance((java.lang.Object[]) classArray16);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        boolean boolean27 = generator25.getUseCache();
        java.lang.Object[] objArray29 = new java.lang.Object[] { generator25, true };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.create(classArray24, objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator32.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray16, (java.lang.Object[]) classArray24);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        boolean boolean45 = namingPolicy1.equals((java.lang.Object) mixin44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator46.setNamingPolicy(namingPolicy51);
        generator46.setUseCache(true);
        generator46.setUseCache(false);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        generator46.setDelegates((java.lang.Object[]) classArray63);
        boolean boolean70 = namingPolicy1.equals((java.lang.Object) classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator73.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = generator73.getStrategy();
        generator73.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = generator79.getStrategy();
        generator73.setStrategy(generatorStrategy81);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = generator73.getNamingPolicy();
        generator73.setUseCache(true);
        boolean boolean86 = generator73.getAttemptLoad();
        org.mockito.cglib.core.Predicate predicate87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = namingPolicy1.getClassName("hi!", "hi!", (java.lang.Object) boolean86, predicate87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        generator0.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray43);
        generator0.setStyle((int) (short) 1);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        generator32.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        generator32.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator32.getStrategy();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        generator32.setDelegates(objArray85);
        generator0.setDelegates(objArray85);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader92 = generator0.getClassLoader();
        java.lang.Class<?> wildcardClass93 = classLoader92.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(objArray14);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray17);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = mixin18.newInstance((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        generator29.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        generator29.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = generator42.getUseCache();
        generator42.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = null;
        generator68.setStrategy(generatorStrategy70);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        generator68.setClasses(classArray77);
        java.lang.Object[] objArray87 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray88 = org.mockito.cglib.proxy.Mixin.getClasses(objArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray88);
        generator42.setClasses(classArray77);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray38, (java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin94 = mixin28.newInstance((java.lang.Object[]) classArray77);
        boolean boolean95 = namingPolicy11.equals((java.lang.Object) mixin94);
        java.lang.Class<?> wildcardClass96 = mixin94.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
        boolean boolean17 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setUseCache(true);
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator28, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = mixin27.newInstance(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.core.Predicate predicate48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = namingPolicy18.getClassName("hi!", "hi!", (java.lang.Object) objArray44, predicate48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = generator0.getStrategy();
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create(classArray33, (java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        generator0.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin45);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        generator0.setStyle((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader16 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, (java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = mixin13.newInstance((java.lang.Object[]) classArray19);
        boolean boolean22 = generatorStrategy4.equals((java.lang.Object) classArray19);
        java.lang.Class<?> wildcardClass23 = generatorStrategy4.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator9.getStrategy();
        generator0.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        generator0.setDelegates((java.lang.Object[]) classArray46);
        org.mockito.asm.ClassVisitor classVisitor48 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(false);
        boolean boolean12 = generator0.getUseCache();
        boolean boolean13 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        boolean boolean2 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        java.lang.Object obj4 = null;
        boolean boolean5 = generatorStrategy3.equals(obj4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        boolean boolean8 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray41);
        generator12.setDelegates((java.lang.Object[]) classArray41);
        generator6.setClasses(classArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        generator48.setUseCache(true);
        boolean boolean52 = generator48.getUseCache();
        generator48.setAttemptLoad(true);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        generator48.setDelegates(objArray57);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, (java.lang.Object[]) classArray68);
        generator48.setClasses(classArray68);
        boolean boolean71 = generator48.getUseCache();
        generator48.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator48.setStrategy(generatorStrategy74);
        generator48.setUseCache(true);
        generator48.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getUseCache();
        java.lang.ClassLoader classLoader82 = null;
        generator80.setClassLoader(classLoader82);
        boolean boolean84 = generator80.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator80.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator86.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator86.getStrategy();
        generator86.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator92 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean93 = generator92.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = generator92.getStrategy();
        generator86.setStrategy(generatorStrategy94);
        boolean boolean96 = namingPolicy85.equals((java.lang.Object) generator86);
        generator48.setNamingPolicy(namingPolicy85);
        generator6.setNamingPolicy(namingPolicy85);
        boolean boolean99 = generatorStrategy3.equals((java.lang.Object) namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        java.lang.ClassLoader classLoader34 = null;
        generator32.setClassLoader(classLoader34);
        boolean boolean36 = generator32.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator32.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator38 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean39 = generator38.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator38.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator38.getStrategy();
        generator38.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator44.getStrategy();
        generator38.setStrategy(generatorStrategy46);
        boolean boolean48 = namingPolicy37.equals((java.lang.Object) generator38);
        generator0.setNamingPolicy(namingPolicy37);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin13 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        boolean boolean33 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        generator35.setClasses(classArray55);
        boolean boolean58 = generator35.getUseCache();
        generator35.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray81);
        generator35.setClasses(classArray70);
        boolean boolean85 = generatorStrategy34.equals((java.lang.Object) generator35);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getUseCache();
        generator86.setUseCache(true);
        generator86.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator86.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy92);
        boolean boolean94 = namingPolicy9.equals((java.lang.Object) generator35);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = generator35.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator35.getStrategy();
        generator35.setAttemptLoad(true);
        boolean boolean99 = generator35.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = namingPolicy26.equals((java.lang.Object) classArray47);
        generator18.setNamingPolicy(namingPolicy26);
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        java.lang.ClassLoader classLoader55 = null;
        generator53.setClassLoader(classLoader55);
        boolean boolean57 = generator53.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = null;
        generator53.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        generator53.setNamingPolicy(namingPolicy60);
        boolean boolean62 = generator53.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        generator63.setUseCache(true);
        boolean boolean67 = generator63.getUseCache();
        generator63.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        generator63.setDelegates(objArray72);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, (java.lang.Object[]) classArray83);
        generator63.setClasses(classArray83);
        boolean boolean86 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator63.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator63.getStrategy();
        generator53.setStrategy(generatorStrategy88);
        generator0.setStrategy(generatorStrategy88);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy91);
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setAttemptLoad(true);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        generator51.setDelegates(objArray60);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) classArray71);
        generator51.setClasses(classArray71);
        generator51.setUseCache(true);
        generator51.setUseCache(false);
        java.lang.ClassLoader classLoader78 = generator51.getClassLoader();
        generator0.setClassLoader(classLoader78);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader78);
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = mixin36.newInstance((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        boolean boolean56 = generator54.getUseCache();
        java.lang.Object[] objArray58 = new java.lang.Object[] { generator54, true };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray53, objArray58);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator61.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray45, (java.lang.Object[]) classArray53);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, (java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin81 = mixin71.newInstance((java.lang.Object[]) classArray78);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray78);
        boolean boolean83 = namingPolicy30.equals((java.lang.Object) classArray78);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.core.Predicate predicate41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = namingPolicy27.getClassName("hi!", "hi!", (java.lang.Object) mixin40, predicate41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        generator0.setStrategy(generatorStrategy10);
        generator0.setAttemptLoad(true);
        java.lang.Class<?> wildcardClass14 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        generator11.setClassLoader(classLoader13);
        boolean boolean15 = generator11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = generator11.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        generator17.setUseCache(true);
        boolean boolean21 = generator17.getUseCache();
        generator17.setAttemptLoad(true);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        generator17.setDelegates(objArray26);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, (java.lang.Object[]) classArray37);
        generator17.setClasses(classArray37);
        boolean boolean40 = namingPolicy16.equals((java.lang.Object) classArray37);
        generator9.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = generator9.getNamingPolicy();
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, (java.lang.Object[]) classArray51);
        boolean boolean54 = namingPolicy42.equals((java.lang.Object) mixin53);
        generator0.setNamingPolicy(namingPolicy42);
        java.lang.Class<?> wildcardClass56 = namingPolicy42.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator36.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator63.setStrategy(generatorStrategy76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator63.getStrategy();
        generator56.setStrategy(generatorStrategy78);
        generator44.setStrategy(generatorStrategy78);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator81.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = generator85.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator85.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = generator85.getNamingPolicy();
        generator81.setNamingPolicy(namingPolicy89);
        boolean boolean91 = generatorStrategy78.equals((java.lang.Object) namingPolicy89);
        generator36.setNamingPolicy(namingPolicy89);
        generator0.setNamingPolicy(namingPolicy89);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        generator0.setNamingPolicy(namingPolicy28);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = generator34.getUseCache();
        generator34.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator34.setStrategy(generatorStrategy60);
        generator34.setUseCache(true);
        generator34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator34.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        org.mockito.asm.ClassVisitor classVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass29 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(mixin22);
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        generator14.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        java.lang.ClassLoader classLoader43 = null;
        generator41.setClassLoader(classLoader43);
        boolean boolean45 = generator41.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator41.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy46);
        generator14.setNamingPolicy(namingPolicy46);
        java.lang.ClassLoader classLoader49 = generator14.getClassLoader();
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin55.newInstance((java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        boolean boolean75 = generator73.getUseCache();
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator73, true };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator80.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        generator0.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator26.setClassLoader(classLoader28);
        generator26.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator26.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = generator45.getNamingPolicy();
        generator33.setNamingPolicy(namingPolicy50);
        boolean boolean52 = generatorStrategy32.equals((java.lang.Object) generator33);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setAttemptLoad(true);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        generator53.setDelegates(objArray62);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray73);
        generator53.setClasses(classArray73);
        boolean boolean76 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = generator53.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator78.setDelegates((java.lang.Object[]) classArray85);
        boolean boolean87 = generatorStrategy77.equals((java.lang.Object) classArray85);
        generator33.setClasses(classArray85);
        generator0.setDelegates((java.lang.Object[]) classArray85);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader92 = generator0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        generator14.setStrategy(generatorStrategy16);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        generator14.setClasses(classArray23);
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray23, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = generator63.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        generator69.setUseCache(true);
        boolean boolean73 = generator69.getUseCache();
        generator69.setAttemptLoad(true);
        java.lang.ClassLoader classLoader76 = null;
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader76, objArray78);
        generator69.setDelegates(objArray78);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray89);
        generator69.setClasses(classArray89);
        boolean boolean92 = namingPolicy68.equals((java.lang.Object) classArray89);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin94 = mixin62.newInstance((java.lang.Object[]) classArray89);
        org.mockito.cglib.core.Predicate predicate95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = namingPolicy11.getClassName("hi!", "", (java.lang.Object) classArray89, predicate95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10]");
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        boolean boolean14 = generator12.getUseCache();
        java.lang.Object[] objArray16 = new java.lang.Object[] { generator12, true };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator19.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, (java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator37.setClassLoader(classLoader39);
        boolean boolean41 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator37.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setUseCache(true);
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator37, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = mixin36.newInstance(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        boolean boolean74 = generator61.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = generator61.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy75);
        org.mockito.asm.ClassVisitor classVisitor77 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(namingPolicy75);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        generator0.setDelegates(objArray8);
        org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Mixin mixin31 = generator12.create();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator40.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray47);
        generator12.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        generator57.setUseCache(true);
        boolean boolean61 = generator57.getUseCache();
        generator57.setAttemptLoad(true);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        generator57.setDelegates(objArray66);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray77);
        generator57.setClasses(classArray77);
        boolean boolean80 = namingPolicy56.equals((java.lang.Object) classArray77);
        java.lang.ClassLoader classLoader81 = null;
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader81, (java.lang.Object[]) classArray87);
        boolean boolean91 = namingPolicy56.equals((java.lang.Object) classArray87);
        generator12.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator12.getStrategy();
        generator0.setStrategy(generatorStrategy93);
        org.mockito.asm.ClassVisitor classVisitor95 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(generatorStrategy93);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        boolean boolean11 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader12 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = generator39.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator39.getNamingPolicy();
        generator39.setAttemptLoad(false);
        generator39.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = null;
        generator52.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(objArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray61);
        generator52.setClasses(classArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator52.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator52.getStrategy();
        generator39.setStrategy(generatorStrategy67);
        generator0.setStrategy(generatorStrategy67);
        java.lang.ClassLoader classLoader70 = generator0.getClassLoader();
        java.lang.Object[] objArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(classLoader70);
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        org.mockito.asm.ClassVisitor classVisitor81 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getAttemptLoad();
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator9.setDelegates((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray8, (java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray16);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        generator0.setStyle(2);
        boolean boolean29 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin31 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy30);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        boolean boolean44 = namingPolicy20.equals((java.lang.Object) classArray41);
        generator13.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator46.setStrategy(generatorStrategy52);
        generator46.setAttemptLoad(true);
        generator46.setUseCache(true);
        boolean boolean58 = generator46.getUseCache();
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        generator46.setDelegates((java.lang.Object[]) classArray66);
        boolean boolean69 = namingPolicy20.equals((java.lang.Object) generator46);
        generator6.setNamingPolicy(namingPolicy20);
        generator0.setNamingPolicy(namingPolicy20);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        generator0.setStyle(1);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator13.setNamingPolicy(namingPolicy20);
        boolean boolean22 = generator13.getAttemptLoad();
        java.lang.Object[] objArray23 = null;
        generator13.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator25.getStrategy();
        generator25.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator35.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator35.getStrategy();
        generator25.setStrategy(generatorStrategy50);
        generator13.setStrategy(generatorStrategy50);
        java.lang.Object obj53 = null;
        boolean boolean54 = generatorStrategy50.equals(obj53);
        generator0.setStrategy(generatorStrategy50);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin56 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        generator0.setStyle((int) (byte) 1);
        org.mockito.asm.ClassVisitor classVisitor77 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy1 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy4);
        generator0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(generatorStrategy4);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        boolean boolean25 = generator23.getUseCache();
        java.lang.Object[] objArray27 = new java.lang.Object[] { generator23, true };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.create(classArray22, objArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        generator30.setDelegates((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray22);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin47.newInstance((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        boolean boolean67 = generator65.getUseCache();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator65, true };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator72.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray64);
        java.lang.ClassLoader classLoader83 = null;
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = mixin82.newInstance((java.lang.Object[]) classArray89);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray22, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray93);
        java.lang.Object[] objArray97 = null;
        org.mockito.cglib.proxy.Mixin mixin98 = mixin96.newInstance(objArray97);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin98);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator10.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator10.getStrategy();
        generator0.setStrategy(generatorStrategy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator22.getStrategy();
        generator20.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator20.setDelegates(objArray33);
        boolean boolean38 = generatorStrategy18.equals((java.lang.Object) objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = generator51.getNamingPolicy();
        generator39.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator39.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray59 = generatorStrategy18.generate((org.mockito.cglib.core.ClassGenerator) generator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        boolean boolean24 = generator0.getAttemptLoad();
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin28 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy27);
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        generator0.setUseCache(false);
        boolean boolean8 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        boolean boolean21 = generator19.getUseCache();
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator19, true };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.create(classArray18, objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getAttemptLoad();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        generator26.setDelegates((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = mixin43.newInstance((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray52);
        generator0.setClasses(classArray36);
        boolean boolean56 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = generator9.getUseCache();
        generator9.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray55);
        generator9.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy64);
        generator7.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        java.lang.ClassLoader classLoader69 = null;
        generator67.setClassLoader(classLoader69);
        boolean boolean71 = generator67.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = null;
        generator67.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        generator74.setUseCache(true);
        boolean boolean78 = generator74.getUseCache();
        generator74.setUseCache(true);
        java.lang.Object[] objArray83 = new java.lang.Object[] { generator67, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(objArray83);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray83);
        generator7.setClasses(classArray86);
        boolean boolean88 = generatorStrategy6.equals((java.lang.Object) generator7);
        org.mockito.cglib.proxy.Mixin mixin89 = generator7.create();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mixin89);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = generator0.getNamingPolicy();
        java.lang.Class[] classArray37 = null;
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        java.lang.ClassLoader classLoader47 = null;
        generator45.setClassLoader(classLoader47);
        boolean boolean49 = generator45.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = null;
        generator45.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setUseCache(true);
        java.lang.Object[] objArray61 = new java.lang.Object[] { generator45, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = mixin44.newInstance(objArray61);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray61);
        java.lang.Class<?> wildcardClass65 = mixin64.getClass();
        boolean boolean66 = namingPolicy36.equals((java.lang.Object) wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = mixin15.newInstance((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        java.lang.ClassLoader classLoader53 = null;
        generator51.setClassLoader(classLoader53);
        boolean boolean55 = generator51.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = null;
        generator51.setNamingPolicy(namingPolicy56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        generator64.setStrategy(generatorStrategy66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray73);
        generator64.setClasses(classArray73);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray81);
        java.lang.Class<?> wildcardClass83 = objArray81.getClass();
        java.lang.ClassLoader classLoader84 = null;
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader84, objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(objArray86);
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        java.lang.Object[] objArray91 = new java.lang.Object[] { classArray36, generator51, objArray61, classArray73, wildcardClass83, classArray89 };
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray89);
        org.mockito.cglib.core.Predicate predicate93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = namingPolicy7.getClassName("hi!", "", (java.lang.Object) classArray89, predicate93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10]");
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertNotNull(mixin92);
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        generator0.setStyle(2);
        java.lang.Class<?> wildcardClass10 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, (java.lang.Object[]) classArray42);
        generator22.setClasses(classArray42);
        boolean boolean45 = generator22.getUseCache();
        generator22.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray68);
        generator22.setClasses(classArray57);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray18, (java.lang.Object[]) classArray57);
        generator0.setClasses(classArray18);
        java.lang.ClassLoader classLoader74 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin mixin75 = generator0.create();
        java.lang.ClassLoader classLoader76 = generator0.getClassLoader();
        generator0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classLoader76);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        generator32.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        generator32.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator32.getStrategy();
        java.lang.ClassLoader classLoader83 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader83, objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(objArray85);
        generator32.setDelegates(objArray85);
        generator0.setDelegates(objArray85);
        java.lang.Class<?> wildcardClass90 = objArray85.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10]");
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        generator0.setDelegates(objArray22);
        generator0.setAttemptLoad(true);
        generator0.setStyle(0);
        java.lang.Class<?> wildcardClass31 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator7.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin12 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setAttemptLoad(true);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        generator22.setDelegates(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator34.getNamingPolicy();
        generator22.setNamingPolicy(namingPolicy39);
        generator7.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader42 = generator7.getClassLoader();
        generator0.setClassLoader(classLoader42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        generator44.setClasses(classArray64);
        generator44.setUseCache(true);
        generator44.setUseCache(false);
        java.lang.ClassLoader classLoader71 = generator44.getClassLoader();
        generator0.setClassLoader(classLoader71);
        generator0.setUseCache(false);
        boolean boolean75 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass76 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        generator0.setAttemptLoad(false);
        boolean boolean59 = generator0.getAttemptLoad();
        generator0.setUseCache(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray14 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, (java.lang.Object[]) classArray15);
        boolean boolean17 = namingPolicy6.equals((java.lang.Object) classLoader7);
        java.lang.Class<?> wildcardClass18 = namingPolicy6.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        generator11.setNamingPolicy(namingPolicy28);
        generator0.setNamingPolicy(namingPolicy28);
        boolean boolean31 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin34 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin29 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        boolean boolean30 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        generator9.setStrategy(generatorStrategy11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        generator9.setClasses(classArray18);
        boolean boolean22 = generator9.getUseCache();
        generator9.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin25 = generator9.create();
        java.lang.ClassLoader classLoader26 = generator9.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = null;
        generator27.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = null;
        generator27.setNamingPolicy(namingPolicy34);
        boolean boolean36 = generator27.getAttemptLoad();
        java.lang.Object[] objArray37 = null;
        generator27.setDelegates(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        generator39.setUseCache(true);
        boolean boolean43 = generator39.getUseCache();
        generator39.setAttemptLoad(true);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        generator39.setDelegates(objArray48);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray59);
        generator39.setClasses(classArray59);
        generator27.setClasses(classArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        boolean boolean73 = generator71.getUseCache();
        java.lang.Object[] objArray75 = new java.lang.Object[] { generator71, true };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray75);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        generator78.setDelegates((java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin89 = mixin63.newInstance((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray70);
        org.mockito.cglib.core.Predicate predicate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = namingPolicy6.getClassName("", "", (java.lang.Object) mixin90, predicate91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = generator8.getUseCache();
        generator8.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray43, (java.lang.Object[]) classArray54);
        generator8.setClasses(classArray43);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        boolean boolean62 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = generator58.getNamingPolicy();
        generator8.setNamingPolicy(namingPolicy63);
        generator6.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator6.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy66);
        java.lang.Object obj68 = null;
        boolean boolean69 = namingPolicy66.equals(obj68);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        java.lang.Object obj8 = null;
        org.mockito.cglib.core.Predicate predicate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = namingPolicy5.getClassName("hi!", "hi!", obj8, predicate9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin10 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        generator0.setDelegates(objArray77);
        generator0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        boolean boolean3 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        boolean boolean6 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        generator9.setStrategy(generatorStrategy15);
        generator9.setAttemptLoad(true);
        generator9.setUseCache(false);
        boolean boolean21 = generator9.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        generator22.setClasses(classArray34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        boolean boolean44 = generator42.getUseCache();
        java.lang.Object[] objArray46 = new java.lang.Object[] { generator42, true };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray46);
        generator9.setDelegates((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray7, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class<?> wildcardClass33 = classArray32.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = generator11.getNamingPolicy();
        generator11.setUseCache(true);
        java.lang.ClassLoader classLoader37 = generator11.getClassLoader();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray44);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        generator52.setDelegates(objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = null;
        generator71.setStrategy(generatorStrategy73);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray80);
        generator71.setClasses(classArray80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = null;
        generator71.setStrategy(generatorStrategy84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = generator71.getStrategy();
        generator64.setStrategy(generatorStrategy86);
        generator52.setStrategy(generatorStrategy86);
        boolean boolean89 = generator52.getAttemptLoad();
        java.lang.ClassLoader classLoader90 = null;
        java.lang.ClassLoader classLoader91 = null;
        java.lang.Object[] objArray93 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader91, objArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader90, objArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(objArray93);
        generator52.setDelegates(objArray93);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray93);
        org.mockito.cglib.proxy.Mixin mixin99 = mixin10.newInstance(objArray93);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[10]");
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        boolean boolean28 = generator26.getUseCache();
        java.lang.Object[] objArray30 = new java.lang.Object[] { generator26, true };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        java.lang.ClassLoader classLoader42 = null;
        generator40.setClassLoader(classLoader42);
        boolean boolean44 = generator40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        generator40.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getUseCache();
        generator47.setUseCache(true);
        boolean boolean51 = generator47.getUseCache();
        generator47.setUseCache(true);
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator40, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin39.newInstance(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create(classArray25, objArray56);
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        generator0.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(classArray61);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = generator24.getStrategy();
        generator22.setStrategy(generatorStrategy31);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator22.setDelegates(objArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator22.getStrategy();
        generator22.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin44 = generator22.create();
        boolean boolean45 = namingPolicy21.equals((java.lang.Object) mixin44);
        java.lang.Object obj48 = null;
        org.mockito.cglib.core.Predicate predicate49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = namingPolicy21.getClassName("hi!", "hi!", obj48, predicate49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        boolean boolean13 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = null;
        generator61.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = generator76.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator78.getStrategy();
        generator76.setStrategy(generatorStrategy80);
        generator61.setStrategy(generatorStrategy80);
        generator0.setStrategy(generatorStrategy80);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getUseCache();
        java.lang.ClassLoader classLoader86 = null;
        generator84.setClassLoader(classLoader86);
        boolean boolean88 = generator84.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = null;
        generator84.setNamingPolicy(namingPolicy89);
        boolean boolean91 = generator84.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator84.getStrategy();
        generator0.setStrategy(generatorStrategy92);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        generator1.setStrategy(generatorStrategy3);
        java.lang.ClassLoader classLoader5 = null;
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, objArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(objArray7);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses(objArray7);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray10);
        generator1.setClasses(classArray10);
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray10, (java.lang.Object[]) classArray21);
        generator0.setDelegates((java.lang.Object[]) classArray21);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        java.lang.Class[] classArray52 = null;
        generator27.setClasses(classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = generator54.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator54.getStrategy();
        generator27.setStrategy(generatorStrategy79);
        generator0.setStrategy(generatorStrategy79);
        generator0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass84 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[10]");
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = generator7.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader14 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator6.setClassLoader(classLoader11);
        generator6.setStyle(2);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin21.newInstance((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        generator32.setStrategy(generatorStrategy34);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray41);
        generator32.setClasses(classArray41);
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin31.newInstance((java.lang.Object[]) classArray75);
        generator6.setClasses(classArray75);
        generator0.setDelegates((java.lang.Object[]) classArray75);
        boolean boolean82 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        boolean boolean35 = generator12.getUseCache();
        generator12.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator12.getStrategy();
        org.mockito.cglib.core.Predicate predicate39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = namingPolicy9.getClassName("", "hi!", (java.lang.Object) generatorStrategy38, predicate39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin17 = generator0.create();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mixin17);
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        generator0.setClassLoader(classLoader14);
        boolean boolean16 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator0.getNamingPolicy();
        java.lang.ClassLoader classLoader18 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(objArray21);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray24);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getAttemptLoad();
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        generator27.setDelegates((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = mixin43.newInstance((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray52);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray37);
        java.lang.Object[] objArray57 = null;
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray37, objArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin58);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin18 = generator0.create();
        java.lang.ClassLoader classLoader19 = generator0.getClassLoader();
        boolean boolean20 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator19, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator0.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator40.getStrategy();
        generator40.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        generator40.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator40.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        java.lang.ClassLoader classLoader58 = null;
        generator56.setClassLoader(classLoader58);
        boolean boolean60 = generator56.getAttemptLoad();
        boolean boolean61 = generator56.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray62 = generatorStrategy54.generate((org.mockito.cglib.core.ClassGenerator) generator56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray20, objArray32);
        java.lang.Class<?> wildcardClass36 = classArray20.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        generator0.setStyle(2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator0.getStrategy();
        boolean boolean30 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader51 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader52 = null;
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray58);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        boolean boolean71 = generator69.getUseCache();
        java.lang.Object[] objArray73 = new java.lang.Object[] { generator69, true };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray68, objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        generator76.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray83);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, (java.lang.Object[]) classArray86);
        java.lang.ClassLoader classLoader89 = null;
        java.lang.ClassLoader classLoader90 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean(classLoader90, objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader89, objArray92);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create(objArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = mixin88.newInstance(objArray92);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        java.lang.Class[] classArray98 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10]");
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(classArray98);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin5 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        generator0.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator23.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator23.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator23.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        generator34.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator34.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator41.getStrategy();
        generator34.setStrategy(generatorStrategy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator34.setStrategy(generatorStrategy46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator34.getStrategy();
        boolean boolean49 = namingPolicy32.equals((java.lang.Object) generatorStrategy48);
        java.lang.Class<?> wildcardClass50 = namingPolicy32.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        boolean boolean8 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        generator4.setDelegates(objArray13);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, (java.lang.Object[]) classArray24);
        generator4.setClasses(classArray24);
        boolean boolean27 = generator4.getUseCache();
        generator4.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator30.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator30.setClasses(classArray39);
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray50);
        generator4.setClasses(classArray39);
        boolean boolean54 = generator4.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = generator4.getClassLoader();
        java.lang.ClassLoader classLoader56 = null;
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray62);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        boolean boolean75 = generator73.getUseCache();
        java.lang.Object[] objArray77 = new java.lang.Object[] { generator73, true };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray72, objArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator80.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray72);
        java.lang.ClassLoader classLoader91 = null;
        java.lang.Object[] objArray95 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean(classLoader91, objArray95);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray95);
        generator0.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader99 = generator0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(classLoader99);
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray9);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray9);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin6.newInstance((java.lang.Object[]) classArray15);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(objArray19);
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray22);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray22);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        generator25.setDelegates((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.create(classArray24, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator36.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getUseCache();
        generator42.setUseCache(true);
        boolean boolean46 = generator42.getUseCache();
        generator42.setAttemptLoad(true);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        generator42.setDelegates(objArray51);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray62);
        generator42.setClasses(classArray62);
        boolean boolean65 = namingPolicy41.equals((java.lang.Object) classArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = mixin35.newInstance((java.lang.Object[]) classArray62);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(objArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        generator75.setDelegates((java.lang.Object[]) classArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray74, (java.lang.Object[]) classArray82);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray74);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray62);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(mixin87);
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        generator0.setStrategy(generatorStrategy81);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setAttemptLoad(true);
        generator28.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        generator37.setStrategy(generatorStrategy39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(objArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray46);
        generator37.setClasses(classArray46);
        boolean boolean50 = generator37.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator37.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator37.getStrategy();
        generator28.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator28.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.ClassGenerator classGenerator56 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray57 = generatorStrategy54.generate(classGenerator56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray14);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass50 = classArray49.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = generator0.getNamingPolicy();
        boolean boolean35 = namingPolicy33.equals((java.lang.Object) 2);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, (java.lang.Object[]) classArray44);
        org.mockito.cglib.core.Predicate predicate47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = namingPolicy33.getClassName("hi!", "", (java.lang.Object) classArray44, predicate47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setUseCache(true);
        generator40.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator40.getStrategy();
        boolean boolean50 = namingPolicy39.equals((java.lang.Object) generator40);
        boolean boolean51 = generator40.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor52 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator40.generateClass(classVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        boolean boolean2 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator6.setStrategy(generatorStrategy8);
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        generator6.setClasses(classArray15);
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        java.lang.ClassLoader classLoader31 = null;
        generator29.setClassLoader(classLoader31);
        boolean boolean33 = generator29.getAttemptLoad();
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator29.setClasses(classArray41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        boolean boolean51 = generator49.getUseCache();
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator49, true };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray41, objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray41, (java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create(classArray15, (java.lang.Object[]) classArray41);
        generator0.setClasses(classArray15);
        boolean boolean72 = generator0.getAttemptLoad();
        boolean boolean73 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        boolean boolean79 = generator77.getUseCache();
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator77, true };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator84.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray91);
        boolean boolean94 = namingPolicy69.equals((java.lang.Object) classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray91);
        java.lang.Class<?> wildcardClass97 = classArray91.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        boolean boolean28 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        boolean boolean31 = generator29.getUseCache();
        java.lang.Object[] objArray33 = new java.lang.Object[] { generator29, true };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray28, objArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        generator36.setDelegates((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = mixin22.newInstance((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        java.lang.Class<?> wildcardClass49 = mixin48.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = generator0.getStrategy();
        java.lang.Class<?> wildcardClass6 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        generator7.setUseCache(true);
        boolean boolean11 = generator7.getUseCache();
        generator7.setUseCache(true);
        java.lang.Object[] objArray16 = new java.lang.Object[] { generator0, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.create(objArray16);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        java.lang.Class<?> wildcardClass21 = mixin20.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy47);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        generator37.setDelegates((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        generator46.setClasses(classArray58);
        generator37.setClasses(classArray58);
        generator0.setDelegates((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin62 = generator0.create();
        java.lang.ClassLoader classLoader63 = null;
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, (java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator0.setClasses(classArray69);
        java.lang.Class<?> wildcardClass75 = classArray69.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin96 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Specified classes are incompatible with delegates");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        generator76.setUseCache(true);
        generator76.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = generator76.getNamingPolicy();
        generator25.setNamingPolicy(namingPolicy82);
        org.mockito.asm.ClassVisitor classVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator25.generateClass(classVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy82);
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator7, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin6.newInstance(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        boolean boolean35 = generator33.getUseCache();
        java.lang.Object[] objArray37 = new java.lang.Object[] { generator33, true };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray32, objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        generator40.setDelegates((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray47);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        java.lang.ClassLoader classLoader60 = null;
        generator58.setClassLoader(classLoader60);
        boolean boolean62 = generator58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        generator58.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setUseCache(true);
        java.lang.Object[] objArray74 = new java.lang.Object[] { generator58, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = mixin57.newInstance(objArray74);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray47, objArray74);
        org.mockito.cglib.proxy.Mixin mixin79 = mixin25.newInstance((java.lang.Object[]) classArray47);
        java.lang.Class<?> wildcardClass80 = mixin25.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        generator23.setAttemptLoad(true);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        generator23.setDelegates(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        java.lang.ClassLoader classLoader37 = null;
        generator35.setClassLoader(classLoader37);
        boolean boolean39 = generator35.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator35.getNamingPolicy();
        generator23.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Mixin mixin42 = generator23.create();
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        generator43.setUseCache(true);
        boolean boolean47 = generator43.getUseCache();
        generator43.setAttemptLoad(true);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        generator43.setDelegates(objArray52);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, (java.lang.Object[]) classArray63);
        generator43.setClasses(classArray63);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        generator66.setUseCache(true);
        boolean boolean70 = generator66.getUseCache();
        generator66.setAttemptLoad(true);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        generator66.setDelegates(objArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray63, objArray75);
        generator23.setDelegates(objArray75);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator23.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray81 = generatorStrategy22.generate((org.mockito.cglib.core.ClassGenerator) generator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(namingPolicy80);
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        boolean boolean27 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator30.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = generator30.getStrategy();
        generator30.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator36.getStrategy();
        generator30.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = generator30.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator30.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        generator24.setUseCache(true);
        boolean boolean28 = generator24.getUseCache();
        generator24.setAttemptLoad(true);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        generator24.setDelegates(objArray33);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray44);
        generator24.setClasses(classArray44);
        boolean boolean47 = generator24.getUseCache();
        generator24.setAttemptLoad(false);
        boolean boolean50 = generator24.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray51 = generatorStrategy23.generate((org.mockito.cglib.core.ClassGenerator) generator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        boolean boolean36 = generator13.getUseCache();
        generator13.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        generator13.setClasses(classArray48);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        generator64.setClasses(classArray76);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getUseCache();
        boolean boolean86 = generator84.getUseCache();
        java.lang.Object[] objArray88 = new java.lang.Object[] { generator84, true };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create(classArray83, objArray88);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray76);
        java.lang.Class[] classArray94 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray94);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(mixin95);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader27 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader28 = null;
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(objArray31);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        boolean boolean37 = generator35.getUseCache();
        java.lang.Object[] objArray39 = new java.lang.Object[] { generator35, true };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray39);
        org.mockito.cglib.proxy.Mixin.Generator generator42 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean43 = generator42.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        generator42.setDelegates((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        generator57.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray66);
        generator57.setClasses(classArray66);
        boolean boolean70 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator71 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean72 = generator71.getUseCache();
        generator71.setUseCache(true);
        boolean boolean75 = generator71.getUseCache();
        generator71.setAttemptLoad(true);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        generator71.setDelegates(objArray80);
        generator57.setDelegates(objArray80);
        java.lang.Class[] classArray84 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray80);
        java.lang.Object[] objArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10]");
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(mixin85);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        boolean boolean13 = generator11.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray20);
        java.lang.Class[] classArray24 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray20);
        generator11.setClasses(classArray20);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = mixin31.newInstance((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        generator43.setStrategy(generatorStrategy45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        generator43.setClasses(classArray52);
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create(classArray52, (java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray52);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray40);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray40);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray69);
        generator0.setClasses(classArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin74 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.beans.IntrospectionException-->java.lang.Object not superclass of java.io.Serializable");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        generator6.setStrategy(generatorStrategy8);
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        generator6.setClasses(classArray15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator6.setStrategy(generatorStrategy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy21);
        boolean boolean23 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator36.setClasses(classArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        boolean boolean58 = generator56.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator56, true };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray71);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray83, (java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray71, (java.lang.Object[]) classArray83);
        java.lang.Class<?> wildcardClass98 = mixin97.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        generator40.setUseCache(true);
        boolean boolean44 = generator40.getUseCache();
        generator40.setUseCache(true);
        generator40.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator40.getStrategy();
        boolean boolean50 = namingPolicy39.equals((java.lang.Object) generator40);
        boolean boolean51 = generator40.getAttemptLoad();
        generator40.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator40.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        java.lang.Class<?> wildcardClass10 = namingPolicy9.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray61);
        generator41.setClasses(classArray61);
        boolean boolean64 = generator41.getUseCache();
        generator41.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = null;
        generator67.setStrategy(generatorStrategy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        generator67.setClasses(classArray76);
        java.lang.Object[] objArray86 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray86);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray87);
        generator41.setClasses(classArray76);
        org.mockito.cglib.proxy.Mixin mixin91 = mixin40.newInstance((java.lang.Object[]) classArray76);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray76);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin93);
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray33);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray33);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setAttemptLoad(true);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        generator41.setDelegates(objArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        boolean boolean57 = generator53.getUseCache();
        generator53.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator60.setStrategy(generatorStrategy62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator60.setClasses(classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = null;
        generator60.setStrategy(generatorStrategy73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = generator60.getStrategy();
        generator53.setStrategy(generatorStrategy75);
        generator41.setStrategy(generatorStrategy75);
        boolean boolean78 = generator41.getAttemptLoad();
        java.lang.ClassLoader classLoader79 = null;
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean(classLoader79, objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        generator41.setDelegates(objArray82);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray82);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(objArray82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Class[] classArray1 = org.mockito.cglib.proxy.Mixin.getClasses(objArray0);
        java.lang.Class[] classArray2 = org.mockito.cglib.proxy.Mixin.getClasses(objArray0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.create(objArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(classArray2);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        generator12.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        generator22.setUseCache(true);
        boolean boolean26 = generator22.getUseCache();
        generator22.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = generator22.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = generator22.getNamingPolicy();
        generator22.setUseCache(false);
        generator22.setUseCache(true);
        generator22.setAttemptLoad(false);
        org.mockito.cglib.core.Predicate predicate37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = namingPolicy18.getClassName("", "hi!", (java.lang.Object) false, predicate37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy30);
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        generator0.setAttemptLoad(false);
        java.lang.Class[] classArray26 = null;
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = generator29.getUseCache();
        generator29.setStyle((int) (byte) 1);
        java.lang.ClassLoader classLoader55 = generator29.getClassLoader();
        generator0.setClassLoader(classLoader55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray64);
        generator0.setDelegates((java.lang.Object[]) classArray64);
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        generator14.setUseCache(true);
        generator14.setUseCache(false);
        java.lang.ClassLoader classLoader41 = generator14.getClassLoader();
        generator0.setClassLoader(classLoader41);
        boolean boolean43 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        generator45.setUseCache(true);
        boolean boolean54 = generator45.getAttemptLoad();
        boolean boolean55 = generator45.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray56 = generatorStrategy44.generate((org.mockito.cglib.core.ClassGenerator) generator45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator6.getNamingPolicy();
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin23.newInstance((java.lang.Object[]) classArray32);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(objArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        boolean boolean43 = generator41.getUseCache();
        java.lang.Object[] objArray45 = new java.lang.Object[] { generator41, true };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create(classArray40, objArray45);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getAttemptLoad();
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        generator48.setDelegates((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray40, (java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray40);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, (java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin58.newInstance((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray65);
        generator6.setClasses(classArray70);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray72);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10]");
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = null;
        generator13.setNamingPolicy(namingPolicy20);
        boolean boolean22 = generator13.getAttemptLoad();
        java.lang.Object[] objArray23 = null;
        generator13.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = generator25.getStrategy();
        generator25.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator35.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator35.getStrategy();
        generator25.setStrategy(generatorStrategy50);
        generator13.setStrategy(generatorStrategy50);
        java.lang.Object obj53 = null;
        boolean boolean54 = generatorStrategy50.equals(obj53);
        generator0.setStrategy(generatorStrategy50);
        java.lang.Class<?> wildcardClass56 = generatorStrategy50.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray22);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin23.newInstance((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        generator36.setStrategy(generatorStrategy38);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        generator36.setClasses(classArray45);
        boolean boolean49 = generator36.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setAttemptLoad(true);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        generator50.setDelegates(objArray59);
        generator36.setDelegates(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator63.setStrategy(generatorStrategy65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        generator63.setClasses(classArray72);
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray72, (java.lang.Object[]) classArray83);
        generator36.setDelegates((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray83);
        generator0.setClasses(classArray83);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin90);
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator0.getStrategy();
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(objArray53);
        generator0.setDelegates(objArray53);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        java.lang.ClassLoader classLoader11 = null;
        generator9.setClassLoader(classLoader11);
        boolean boolean13 = generator9.getAttemptLoad();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        generator9.setClasses(classArray21);
        generator0.setClasses(classArray21);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        boolean boolean27 = generator0.getUseCache();
        java.lang.Class<?> wildcardClass28 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator0.getStrategy();
        boolean boolean83 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator0.getNamingPolicy();
        java.lang.Object obj85 = null;
        boolean boolean86 = namingPolicy84.equals(obj85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray42);
        generator0.setClasses(classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        java.lang.ClassLoader classLoader50 = null;
        generator48.setClassLoader(classLoader50);
        boolean boolean52 = generator48.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator48.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        generator54.setUseCache(true);
        boolean boolean58 = generator54.getUseCache();
        generator54.setAttemptLoad(true);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        generator54.setDelegates(objArray63);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, (java.lang.Object[]) classArray74);
        generator54.setClasses(classArray74);
        boolean boolean77 = namingPolicy53.equals((java.lang.Object) classArray74);
        generator46.setNamingPolicy(namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin16 = generator0.create();
        java.lang.ClassLoader classLoader17 = null;
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(objArray20);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, (java.lang.Object[]) classArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin25.newInstance((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        java.lang.ClassLoader classLoader36 = null;
        generator34.setClassLoader(classLoader36);
        boolean boolean38 = generator34.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = null;
        generator34.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        java.lang.Object[] objArray50 = new java.lang.Object[] { generator34, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create(objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray31, objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator0.setClasses(classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        generator56.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator56.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        java.lang.ClassLoader classLoader65 = null;
        generator63.setClassLoader(classLoader65);
        boolean boolean67 = generator63.getAttemptLoad();
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator63.setClasses(classArray75);
        java.lang.ClassLoader classLoader77 = null;
        generator63.setClassLoader(classLoader77);
        boolean boolean79 = generator63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = generator63.getNamingPolicy();
        generator56.setNamingPolicy(namingPolicy80);
        generator0.setNamingPolicy(namingPolicy80);
        generator0.setAttemptLoad(false);
        generator0.setUseCache(false);
        boolean boolean87 = generator0.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        generator19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setUseCache(true);
        java.lang.Object[] objArray35 = new java.lang.Object[] { generator19, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.create(objArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        generator0.setClasses(classArray38);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator40.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator40.getStrategy();
        generator40.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator46.getStrategy();
        generator40.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = generator40.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = null;
        generator40.setNamingPolicy(namingPolicy51);
        boolean boolean53 = generator40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = generator40.getStrategy();
        generator0.setStrategy(generatorStrategy54);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        generator56.setUseCache(true);
        boolean boolean60 = generator56.getUseCache();
        generator56.setAttemptLoad(true);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        generator56.setDelegates(objArray65);
        generator56.setUseCache(true);
        boolean boolean70 = generator56.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator56.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = generatorStrategy54.generate((org.mockito.cglib.core.ClassGenerator) generator56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator30.getStrategy();
        generator28.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        boolean boolean43 = generator41.getUseCache();
        generator41.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        generator46.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray55);
        generator46.setClasses(classArray55);
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray55, (java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        generator69.setStrategy(generatorStrategy71);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(objArray75);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray78);
        generator69.setClasses(classArray78);
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray89 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray78, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray66, (java.lang.Object[]) classArray89);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        generator41.setDelegates((java.lang.Object[]) classArray66);
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = generator41.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray97 = generatorStrategy40.generate((org.mockito.cglib.core.ClassGenerator) generator41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        generator50.setUseCache(true);
        boolean boolean54 = generator50.getUseCache();
        generator50.setAttemptLoad(true);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        generator50.setDelegates(objArray59);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, (java.lang.Object[]) classArray70);
        generator50.setClasses(classArray70);
        org.mockito.cglib.proxy.Mixin.Generator generator73 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean74 = generator73.getUseCache();
        generator73.setUseCache(true);
        boolean boolean77 = generator73.getUseCache();
        generator73.setAttemptLoad(true);
        java.lang.ClassLoader classLoader80 = null;
        java.lang.Object[] objArray82 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader80, objArray82);
        generator73.setDelegates(objArray82);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.create(classArray70, objArray82);
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin87 = mixin49.newInstance((java.lang.Object[]) classArray86);
        java.lang.Class<?> wildcardClass88 = classArray86.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[10]");
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        generator27.setStrategy(generatorStrategy49);
        generator15.setStrategy(generatorStrategy49);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray67);
        boolean boolean69 = generatorStrategy49.equals((java.lang.Object) mixin68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setAttemptLoad(true);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        generator70.setDelegates(objArray79);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray90);
        generator70.setClasses(classArray90);
        boolean boolean93 = generator70.getUseCache();
        generator70.setStyle((int) (byte) 1);
        boolean boolean96 = generatorStrategy49.equals((java.lang.Object) (byte) 1);
        generator0.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = generator0.getStrategy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(generatorStrategy98);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        generator34.setStrategy(generatorStrategy36);
        java.lang.ClassLoader classLoader38 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader38, objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(objArray40);
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray43);
        generator34.setClasses(classArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator34.setStrategy(generatorStrategy47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator34.getStrategy();
        generator27.setStrategy(generatorStrategy49);
        generator15.setStrategy(generatorStrategy49);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray59, (java.lang.Object[]) classArray67);
        boolean boolean69 = generatorStrategy49.equals((java.lang.Object) mixin68);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        generator70.setUseCache(true);
        boolean boolean74 = generator70.getUseCache();
        generator70.setAttemptLoad(true);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, objArray79);
        generator70.setDelegates(objArray79);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, (java.lang.Object[]) classArray90);
        generator70.setClasses(classArray90);
        boolean boolean93 = generator70.getUseCache();
        generator70.setStyle((int) (byte) 1);
        boolean boolean96 = generatorStrategy49.equals((java.lang.Object) (byte) 1);
        generator0.setStrategy(generatorStrategy49);
        java.lang.ClassLoader classLoader98 = generator0.getClassLoader();
        boolean boolean99 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10]");
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10]");
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(classLoader98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getAttemptLoad();
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        generator35.setDelegates((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create(classArray34, (java.lang.Object[]) classArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        generator0.setClasses(classArray45);
        java.lang.Class<?> wildcardClass47 = classArray45.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        boolean boolean8 = generator4.getUseCache();
        generator4.setAttemptLoad(true);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        generator4.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        java.lang.ClassLoader classLoader18 = null;
        generator16.setClassLoader(classLoader18);
        boolean boolean20 = generator16.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator16.getNamingPolicy();
        generator4.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Mixin mixin23 = generator4.create();
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray26 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, objArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(objArray26);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray26);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray29);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getAttemptLoad();
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        generator32.setDelegates((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.create(classArray31, (java.lang.Object[]) classArray39);
        generator4.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator43 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean44 = generator43.getUseCache();
        java.lang.ClassLoader classLoader45 = null;
        generator43.setClassLoader(classLoader45);
        boolean boolean47 = generator43.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = generator43.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        generator49.setUseCache(true);
        boolean boolean53 = generator49.getUseCache();
        generator49.setAttemptLoad(true);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, objArray58);
        generator49.setDelegates(objArray58);
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, (java.lang.Object[]) classArray69);
        generator49.setClasses(classArray69);
        boolean boolean72 = namingPolicy48.equals((java.lang.Object) classArray69);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, (java.lang.Object[]) classArray79);
        boolean boolean83 = namingPolicy48.equals((java.lang.Object) classArray79);
        generator4.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = generator4.getStrategy();
        generator0.setStrategy(generatorStrategy85);
        java.lang.Class<?> wildcardClass87 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[10]");
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10]");
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator27.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator27.getStrategy();
        generator0.setStrategy(generatorStrategy52);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator54.setStrategy(generatorStrategy56);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        java.lang.Class[] classArray63 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray63);
        generator54.setClasses(classArray63);
        boolean boolean67 = generator54.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator68 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean69 = generator68.getUseCache();
        generator68.setUseCache(true);
        boolean boolean72 = generator68.getUseCache();
        generator68.setAttemptLoad(true);
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        generator68.setDelegates(objArray77);
        generator54.setDelegates(objArray77);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray81 = generatorStrategy52.generate((org.mockito.cglib.core.ClassGenerator) generator54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10]");
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(classArray63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader19 = null;
        generator18.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        java.lang.ClassLoader classLoader23 = null;
        generator21.setClassLoader(classLoader23);
        boolean boolean25 = generator21.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = generator21.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, (java.lang.Object[]) classArray47);
        generator27.setClasses(classArray47);
        boolean boolean50 = namingPolicy26.equals((java.lang.Object) classArray47);
        generator18.setNamingPolicy(namingPolicy26);
        generator0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        generator53.setUseCache(true);
        generator53.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = generator53.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = generator60.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator60.getStrategy();
        generator53.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        generator53.setStrategy(generatorStrategy65);
        boolean boolean67 = namingPolicy26.equals((java.lang.Object) generator53);
        boolean boolean68 = generator53.getAttemptLoad();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getUseCache();
        generator1.setUseCache(true);
        boolean boolean5 = generator1.getUseCache();
        generator1.setAttemptLoad(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, objArray10);
        generator1.setDelegates(objArray10);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray21);
        generator1.setClasses(classArray21);
        boolean boolean24 = generator1.getUseCache();
        generator1.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray47);
        generator1.setClasses(classArray36);
        boolean boolean51 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader52 = generator1.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator53 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean54 = generator53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = null;
        generator53.setStrategy(generatorStrategy55);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray62);
        generator53.setClasses(classArray62);
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray73);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, (java.lang.Object[]) classArray62);
        generator0.setClassLoader(classLoader52);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = generator81.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator81.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator81.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray86 = generatorStrategy80.generate((org.mockito.cglib.core.ClassGenerator) generator81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10]");
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(namingPolicy85);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin mixin14 = generator0.create();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, (java.lang.Object[]) classArray35);
        generator15.setClasses(classArray35);
        boolean boolean38 = generator15.getUseCache();
        generator15.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator41.setStrategy(generatorStrategy43);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray47);
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray50);
        generator41.setClasses(classArray50);
        java.lang.Object[] objArray60 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray61 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray50, (java.lang.Object[]) classArray61);
        generator15.setClasses(classArray50);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        java.lang.ClassLoader classLoader67 = null;
        generator65.setClassLoader(classLoader67);
        boolean boolean69 = generator65.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = generator65.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy70);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        boolean boolean80 = generator78.getUseCache();
        java.lang.Object[] objArray82 = new java.lang.Object[] { generator78, true };
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(objArray82);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray77, objArray82);
        org.mockito.cglib.proxy.Mixin.Generator generator85 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean86 = generator85.getAttemptLoad();
        java.lang.ClassLoader classLoader87 = null;
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(classLoader87, objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(objArray89);
        java.lang.Class[] classArray92 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        generator85.setDelegates((java.lang.Object[]) classArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create(classArray77, (java.lang.Object[]) classArray92);
        boolean boolean95 = namingPolicy70.equals((java.lang.Object) classArray92);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray92);
        java.lang.Class[] classArray97 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        generator0.setClasses(classArray92);
        java.lang.Class[] classArray99 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10]");
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10]");
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(classArray97);
        org.junit.Assert.assertNotNull(classArray99);
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader17, objArray19);
        generator10.setDelegates(objArray19);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, (java.lang.Object[]) classArray30);
        generator10.setClasses(classArray30);
        boolean boolean33 = generator10.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator10.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setAttemptLoad(true);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        generator35.setDelegates(objArray44);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, (java.lang.Object[]) classArray55);
        generator35.setClasses(classArray55);
        boolean boolean58 = generator35.getUseCache();
        generator35.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        generator61.setStrategy(generatorStrategy63);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.Object[] objArray67 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        java.lang.Class[] classArray70 = org.mockito.cglib.proxy.Mixin.getClasses(objArray67);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray70);
        generator61.setClasses(classArray70);
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray70, (java.lang.Object[]) classArray81);
        generator35.setClasses(classArray70);
        boolean boolean85 = generatorStrategy34.equals((java.lang.Object) generator35);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getUseCache();
        generator86.setUseCache(true);
        generator86.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator86.getNamingPolicy();
        generator35.setNamingPolicy(namingPolicy92);
        boolean boolean94 = namingPolicy9.equals((java.lang.Object) generator35);
        // The following exception was thrown during execution in test generation
        try {
            generator35.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10]");
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[10]");
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        boolean boolean6 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        generator10.setUseCache(true);
        boolean boolean14 = generator10.getUseCache();
        generator10.setAttemptLoad(true);
        generator10.setUseCache(true);
        boolean boolean19 = generator10.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        generator20.setDelegates(objArray29);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray40 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, (java.lang.Object[]) classArray40);
        generator20.setClasses(classArray40);
        boolean boolean43 = generator20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator20.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        generator45.setStrategy(generatorStrategy47);
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray54);
        generator45.setClasses(classArray54);
        boolean boolean58 = generator45.getUseCache();
        generator45.setAttemptLoad(false);
        generator45.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin63 = generator45.create();
        java.lang.ClassLoader classLoader64 = generator45.getClassLoader();
        java.lang.ClassLoader classLoader65 = generator45.getClassLoader();
        boolean boolean66 = generatorStrategy44.equals((java.lang.Object) classLoader65);
        generator10.setClassLoader(classLoader65);
        org.mockito.cglib.core.Predicate predicate68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = namingPolicy7.getClassName("", "hi!", (java.lang.Object) classLoader65, predicate68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray5);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        boolean boolean39 = generator0.getUseCache();
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(objArray42);
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray45);
        java.lang.ClassLoader classLoader47 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader47, objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(objArray49);
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = mixin46.newInstance((java.lang.Object[]) classArray55);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray55);
        generator0.setClasses(classArray55);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin59 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10]");
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        boolean boolean9 = generator7.getUseCache();
        java.lang.Object[] objArray11 = new java.lang.Object[] { generator7, true };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(objArray11);
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.create(classArray6, objArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        generator14.setDelegates((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.create(classArray6, (java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray21);
        java.lang.Class<?> wildcardClass25 = classArray21.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        boolean boolean12 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        java.lang.Class[] classArray0 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator1 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean2 = generator1.getAttemptLoad();
        java.lang.ClassLoader classLoader3 = null;
        java.lang.Object[] objArray5 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(classLoader3, objArray5);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(objArray5);
        java.lang.Class[] classArray8 = org.mockito.cglib.proxy.Mixin.getClasses(objArray5);
        generator1.setDelegates((java.lang.Object[]) classArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        boolean boolean14 = generator10.getAttemptLoad();
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        generator10.setClasses(classArray22);
        generator1.setClasses(classArray22);
        org.mockito.cglib.proxy.Mixin mixin25 = generator1.create();
        org.mockito.cglib.proxy.Mixin mixin26 = generator1.create();
        generator1.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        generator29.setUseCache(true);
        generator29.setUseCache(false);
        java.lang.ClassLoader classLoader56 = generator29.getClassLoader();
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray59);
        java.lang.Class[] classArray62 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin.Generator generator63 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean64 = generator63.getUseCache();
        boolean boolean65 = generator63.getUseCache();
        java.lang.Object[] objArray67 = new java.lang.Object[] { generator63, true };
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.create(classArray62, objArray67);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        generator70.setDelegates((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray62, (java.lang.Object[]) classArray77);
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        generator1.setDelegates((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray0, (java.lang.Object[]) classArray80);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[10]");
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10]");
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin84);
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        generator49.setStrategy(generatorStrategy51);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray55);
        java.lang.Class[] classArray58 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray58);
        generator49.setClasses(classArray58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator49.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        generator64.setUseCache(true);
        boolean boolean68 = generator64.getUseCache();
        generator64.setAttemptLoad(true);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        generator64.setDelegates(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator76 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean77 = generator76.getUseCache();
        java.lang.ClassLoader classLoader78 = null;
        generator76.setClassLoader(classLoader78);
        boolean boolean80 = generator76.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = generator76.getNamingPolicy();
        generator64.setNamingPolicy(namingPolicy81);
        generator49.setNamingPolicy(namingPolicy81);
        generator0.setNamingPolicy(namingPolicy81);
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10]");
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(namingPolicy81);
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray4);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray14 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, (java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin16 = mixin5.newInstance((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin.Generator generator17 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean18 = generator17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        generator17.setStrategy(generatorStrategy19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator17.setClasses(classArray26);
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.create(classArray26, (java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.create(classArray14, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray14);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(mixin42);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator13.getNamingPolicy();
        generator13.setUseCache(true);
        boolean boolean20 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator13.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = generator13.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy22);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin24 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy22);
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        boolean boolean28 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        boolean boolean8 = generator6.getUseCache();
        java.lang.Object[] objArray10 = new java.lang.Object[] { generator6, true };
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean(objArray10);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.create(classArray5, objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(objArray17);
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray17);
        generator13.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray5, (java.lang.Object[]) classArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.ClassLoader classLoader24 = null;
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(objArray27);
        java.lang.Class[] classArray30 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray30);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray30);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        generator59.setUseCache(true);
        boolean boolean63 = generator59.getUseCache();
        generator59.setAttemptLoad(true);
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        generator59.setDelegates(objArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray56, objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = mixin35.newInstance(objArray68);
        org.mockito.cglib.proxy.Mixin mixin73 = mixin22.newInstance(objArray68);
        java.lang.Class<?> wildcardClass74 = mixin22.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getAttemptLoad();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        generator18.setDelegates((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray17, (java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray17);
        java.lang.ClassLoader classLoader29 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader29, objArray33);
        java.lang.ClassLoader classLoader35 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = mixin34.newInstance((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray28, (java.lang.Object[]) classArray43);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        boolean boolean49 = generatorStrategy9.equals((java.lang.Object) mixin48);
        java.lang.Class<?> wildcardClass50 = generatorStrategy9.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        boolean boolean35 = namingPolicy11.equals((java.lang.Object) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { 1L, '4', classArray32, generator36, classArray68 };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray83);
        generator0.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(classArray83);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setUseCache(true);
        boolean boolean14 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator18.setStrategy(generatorStrategy20);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        generator18.setClasses(classArray27);
        boolean boolean31 = generator18.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        generator18.setDelegates(objArray41);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        boolean boolean61 = generator57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = generator57.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy62);
        generator18.setNamingPolicy(namingPolicy62);
        generator18.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin67 = generator18.create();
        java.lang.ClassLoader classLoader68 = generator18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = generator18.getStrategy();
        org.mockito.cglib.proxy.Mixin mixin70 = generator18.create();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = generator18.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = namingPolicy15.getClassName("", "", (java.lang.Object) generator18, predicate72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(namingPolicy71);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.create(classArray9, (java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        generator23.setStrategy(generatorStrategy25);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        generator23.setClasses(classArray32);
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray43 = org.mockito.cglib.proxy.Mixin.getClasses(objArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(classArray32, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.create(classArray20, (java.lang.Object[]) classArray43);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray20);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = generator0.getNamingPolicy();
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator29.getStrategy();
        generator27.setStrategy(generatorStrategy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = generator27.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getUseCache();
        generator45.setUseCache(true);
        boolean boolean49 = generator45.getUseCache();
        generator45.setAttemptLoad(true);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        generator45.setDelegates(objArray54);
        java.lang.ClassLoader classLoader57 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader57, (java.lang.Object[]) classArray65);
        generator45.setClasses(classArray65);
        boolean boolean68 = namingPolicy44.equals((java.lang.Object) classArray65);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.ClassLoader classLoader70 = null;
        java.lang.Object[] objArray72 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader70, objArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(objArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray72);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, (java.lang.Object[]) classArray75);
        boolean boolean79 = namingPolicy44.equals((java.lang.Object) classArray75);
        generator27.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Mixin.Generator generator81 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean82 = generator81.getUseCache();
        generator81.setUseCache(true);
        boolean boolean85 = generator81.getUseCache();
        generator81.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = generator81.getStrategy();
        generator81.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator81.getStrategy();
        boolean boolean92 = namingPolicy44.equals((java.lang.Object) generatorStrategy91);
        generator0.setNamingPolicy(namingPolicy44);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[10]");
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        generator0.setDelegates((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = generator9.getUseCache();
        generator9.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        generator35.setStrategy(generatorStrategy37);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        generator35.setClasses(classArray44);
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray44, (java.lang.Object[]) classArray55);
        generator9.setClasses(classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        generator9.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getAttemptLoad();
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(objArray70);
        java.lang.Class[] classArray73 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        generator66.setDelegates((java.lang.Object[]) classArray73);
        boolean boolean75 = namingPolicy64.equals((java.lang.Object) classArray73);
        generator0.setNamingPolicy(namingPolicy64);
        org.mockito.asm.ClassVisitor classVisitor77 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10]");
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = generator0.getNamingPolicy();
        boolean boolean7 = generator0.getAttemptLoad();
        java.lang.Class<?> wildcardClass8 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator0.getStrategy();
        boolean boolean20 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        generator33.setAttemptLoad(false);
        boolean boolean63 = generator33.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator33.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        generator65.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator74 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean75 = generator74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        generator74.setStrategy(generatorStrategy76);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        generator74.setClasses(classArray83);
        boolean boolean87 = generator74.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = generator74.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = generator74.getStrategy();
        generator65.setStrategy(generatorStrategy89);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = generator65.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator65.getStrategy();
        generator33.setStrategy(generatorStrategy92);
        org.mockito.asm.ClassVisitor classVisitor94 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator33.generateClass(classVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator0.getStrategy();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray27);
        generator0.setClasses(classArray27);
        generator0.setAttemptLoad(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator0.setStrategy(generatorStrategy60);
        boolean boolean62 = generator0.getUseCache();
        boolean boolean63 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        generator0.setStyle(0);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        generator19.setUseCache(true);
        boolean boolean23 = generator19.getUseCache();
        generator19.setAttemptLoad(true);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        generator19.setDelegates(objArray28);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, (java.lang.Object[]) classArray39);
        generator19.setClasses(classArray39);
        boolean boolean42 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator19.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setAttemptLoad(true);
        java.lang.ClassLoader classLoader51 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader51, objArray53);
        generator44.setDelegates(objArray53);
        java.lang.ClassLoader classLoader56 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader56, (java.lang.Object[]) classArray64);
        generator44.setClasses(classArray64);
        boolean boolean67 = generator44.getUseCache();
        generator44.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        generator70.setStrategy(generatorStrategy72);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        generator70.setClasses(classArray79);
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create(classArray79, (java.lang.Object[]) classArray90);
        generator44.setClasses(classArray79);
        boolean boolean94 = generatorStrategy43.equals((java.lang.Object) generator44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator44.getStrategy();
        generator44.setAttemptLoad(false);
        java.lang.ClassLoader classLoader98 = generator44.getClassLoader();
        generator0.setClassLoader(classLoader98);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10]");
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(classLoader98);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        boolean boolean50 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        generator28.setUseCache(true);
        boolean boolean32 = generator28.getUseCache();
        generator28.setUseCache(true);
        generator28.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader37 = null;
        generator28.setClassLoader(classLoader37);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = generator28.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray40 = generatorStrategy27.generate((org.mockito.cglib.core.ClassGenerator) generator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy39);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = generator41.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator41.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator41.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy45);
        boolean boolean47 = generatorStrategy34.equals((java.lang.Object) namingPolicy45);
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray65);
        org.mockito.cglib.core.Predicate predicate68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = namingPolicy45.getClassName("hi!", "hi!", (java.lang.Object) mixin67, predicate68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        boolean boolean81 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator82 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean83 = generator82.getUseCache();
        generator82.setUseCache(true);
        boolean boolean86 = generator82.getUseCache();
        generator82.setUseCache(true);
        generator82.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader91 = null;
        generator82.setClassLoader(classLoader91);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = generator82.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy93);
        boolean boolean95 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        org.mockito.cglib.core.Predicate predicate40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = namingPolicy8.getClassName("hi!", "hi!", (java.lang.Object) classLoader38, predicate40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        java.lang.ClassLoader classLoader24 = null;
        generator22.setClassLoader(classLoader24);
        boolean boolean26 = generator22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = null;
        generator22.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = null;
        generator22.setNamingPolicy(namingPolicy29);
        boolean boolean31 = generator22.getAttemptLoad();
        java.lang.Object[] objArray32 = null;
        generator22.setDelegates(objArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator34.getStrategy();
        generator34.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator44.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator44.getStrategy();
        generator34.setStrategy(generatorStrategy59);
        generator22.setStrategy(generatorStrategy59);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray66);
        java.lang.ClassLoader classLoader68 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader68, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = mixin67.newInstance((java.lang.Object[]) classArray76);
        boolean boolean79 = generatorStrategy59.equals((java.lang.Object) classArray76);
        org.mockito.cglib.core.Predicate predicate80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = namingPolicy19.getClassName("hi!", "hi!", (java.lang.Object) generatorStrategy59, predicate80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        boolean boolean79 = generator77.getUseCache();
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator77, true };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray81);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        generator84.setDelegates((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.create(classArray76, (java.lang.Object[]) classArray91);
        boolean boolean94 = namingPolicy69.equals((java.lang.Object) classArray91);
        generator0.setDelegates((java.lang.Object[]) classArray91);
        java.lang.Class[] classArray96 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray91);
        java.lang.Class<?> wildcardClass97 = classArray91.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(classArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        java.lang.ClassLoader classLoader8 = null;
        generator6.setClassLoader(classLoader8);
        boolean boolean10 = generator6.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        boolean boolean35 = namingPolicy11.equals((java.lang.Object) classArray32);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        generator36.setUseCache(true);
        boolean boolean40 = generator36.getUseCache();
        generator36.setAttemptLoad(true);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        generator36.setDelegates(objArray45);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        generator36.setClasses(classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray79);
        java.lang.Object[] objArray82 = new java.lang.Object[] { 1L, '4', classArray32, generator36, classArray68 };
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        generator0.setDelegates((java.lang.Object[]) classArray83);
        generator0.setStyle(2);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin87 = generator0.create();
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.reflect.InvocationTargetException-->null");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(classArray83);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        generator0.setStyle(1);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        boolean boolean37 = generator14.getUseCache();
        generator14.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator40 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean41 = generator40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        generator40.setStrategy(generatorStrategy42);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray46);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray49);
        generator40.setClasses(classArray49);
        java.lang.Object[] objArray59 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray49, (java.lang.Object[]) classArray60);
        generator14.setClasses(classArray49);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator14.setNamingPolicy(namingPolicy69);
        generator0.setNamingPolicy(namingPolicy69);
        generator0.setUseCache(false);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.ClassLoader classLoader75 = null;
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(classLoader75, objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray77);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(objArray77);
        generator0.setDelegates(objArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader82 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10]");
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        generator0.setUseCache(true);
        generator0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        boolean boolean30 = generator28.getUseCache();
        generator28.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator33.setStrategy(generatorStrategy35);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean(objArray39);
        java.lang.Class[] classArray42 = org.mockito.cglib.proxy.Mixin.getClasses(objArray39);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray42);
        generator33.setClasses(classArray42);
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.create(classArray42, (java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        generator56.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray65);
        generator56.setClasses(classArray65);
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.create(classArray65, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create(classArray53, (java.lang.Object[]) classArray76);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray53);
        generator28.setDelegates((java.lang.Object[]) classArray53);
        generator28.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray85 = generatorStrategy27.generate((org.mockito.cglib.core.ClassGenerator) generator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        generator11.setUseCache(true);
        boolean boolean15 = generator11.getUseCache();
        generator11.setAttemptLoad(true);
        java.lang.ClassLoader classLoader18 = null;
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader18, objArray20);
        generator11.setDelegates(objArray20);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, (java.lang.Object[]) classArray31);
        generator11.setClasses(classArray31);
        boolean boolean34 = generator11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator11.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = generator11.getStrategy();
        boolean boolean37 = generatorStrategy9.equals((java.lang.Object) generator11);
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator11.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[10]");
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        generator27.setStrategy(generatorStrategy29);
        java.lang.ClassLoader classLoader31 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader31, objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(objArray33);
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray36);
        generator27.setClasses(classArray36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        generator27.setStrategy(generatorStrategy40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = generator27.getStrategy();
        generator20.setStrategy(generatorStrategy42);
        generator8.setStrategy(generatorStrategy42);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean46 = generator45.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator45.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = generator45.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator49.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = generator49.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = generator49.getNamingPolicy();
        generator45.setNamingPolicy(namingPolicy53);
        boolean boolean55 = generatorStrategy42.equals((java.lang.Object) namingPolicy53);
        generator0.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        java.lang.ClassLoader classLoader59 = null;
        generator57.setClassLoader(classLoader59);
        boolean boolean61 = generator57.getAttemptLoad();
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        generator57.setClasses(classArray69);
        java.lang.ClassLoader classLoader71 = null;
        java.lang.Object[] objArray73 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader71, objArray73);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(objArray73);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses(objArray73);
        org.mockito.cglib.proxy.Mixin.Generator generator77 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean78 = generator77.getUseCache();
        boolean boolean79 = generator77.getUseCache();
        java.lang.Object[] objArray81 = new java.lang.Object[] { generator77, true };
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.create(classArray76, objArray81);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create(classArray69, objArray81);
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray85);
        boolean boolean87 = namingPolicy53.equals((java.lang.Object) mixin86);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10]");
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[10]");
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator10 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean11 = generator10.getUseCache();
        java.lang.ClassLoader classLoader12 = null;
        generator10.setClassLoader(classLoader12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = generator14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = generator14.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator14.getNamingPolicy();
        generator10.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator10.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator10.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = generator37.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator39.getStrategy();
        generator37.setStrategy(generatorStrategy41);
        generator22.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = generator22.getStrategy();
        java.lang.ClassLoader classLoader45 = null;
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(objArray48);
        java.lang.Class[] classArray51 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        boolean boolean54 = generator52.getUseCache();
        java.lang.Object[] objArray56 = new java.lang.Object[] { generator52, true };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.create(classArray51, objArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getAttemptLoad();
        java.lang.ClassLoader classLoader61 = null;
        java.lang.Object[] objArray63 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(classLoader61, objArray63);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(objArray63);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray63);
        generator59.setDelegates((java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.create(classArray51, (java.lang.Object[]) classArray66);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray51);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray51);
        boolean boolean73 = generatorStrategy44.equals((java.lang.Object) mixin72);
        boolean boolean74 = namingPolicy21.equals((java.lang.Object) mixin72);
        org.mockito.cglib.proxy.Mixin.Generator generator75 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean76 = generator75.getUseCache();
        generator75.setUseCache(true);
        boolean boolean79 = generator75.getUseCache();
        generator75.setUseCache(true);
        generator75.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader84 = null;
        generator75.setClassLoader(classLoader84);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = generator75.getNamingPolicy();
        generator75.setStyle(0);
        boolean boolean89 = namingPolicy21.equals((java.lang.Object) generator75);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray90 = generatorStrategy9.generate((org.mockito.cglib.core.ClassGenerator) generator75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10]");
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[10]");
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setStyle((int) (byte) 0);
        java.lang.ClassLoader classLoader9 = null;
        generator0.setClassLoader(classLoader9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        java.lang.Class[] classArray0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray11);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setUseCache(true);
        java.lang.Object[] objArray29 = new java.lang.Object[] { generator13, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = mixin12.newInstance(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = mixin5.newInstance(objArray29);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.create(classArray0, objArray29);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = generator0.getStrategy();
        boolean boolean5 = generator0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator0.getNamingPolicy();
        java.lang.Object obj33 = null;
        boolean boolean34 = namingPolicy32.equals(obj33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        generator0.setDelegates(objArray13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = generator0.getStrategy();
        generator0.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin22 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator24.setStrategy(generatorStrategy26);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(objArray30);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray30);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray33);
        generator24.setClasses(classArray33);
        boolean boolean37 = generator24.getUseCache();
        generator24.setAttemptLoad(false);
        generator24.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin42 = generator24.create();
        java.lang.ClassLoader classLoader43 = generator24.getClassLoader();
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean(objArray46);
        generator24.setDelegates(objArray46);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray51 = generatorStrategy23.generate((org.mockito.cglib.core.ClassGenerator) generator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin6 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        java.lang.ClassLoader classLoader30 = null;
        generator28.setClassLoader(classLoader30);
        boolean boolean32 = generator28.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = null;
        generator28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Mixin.Generator generator35 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean36 = generator35.getUseCache();
        generator35.setUseCache(true);
        boolean boolean39 = generator35.getUseCache();
        generator35.setUseCache(true);
        java.lang.Object[] objArray44 = new java.lang.Object[] { generator28, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.create(objArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        generator51.setUseCache(true);
        boolean boolean55 = generator51.getUseCache();
        generator51.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = generator51.getStrategy();
        generator49.setStrategy(generatorStrategy58);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.createBean(objArray62);
        java.lang.Class[] classArray65 = org.mockito.cglib.proxy.Mixin.getClasses(objArray62);
        generator49.setDelegates(objArray62);
        org.mockito.cglib.proxy.Mixin mixin67 = mixin48.newInstance(objArray62);
        org.mockito.cglib.proxy.Mixin mixin68 = mixin27.newInstance(objArray62);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        generator19.setStrategy(generatorStrategy21);
        java.lang.ClassLoader classLoader23 = null;
        java.lang.Object[] objArray25 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(classLoader23, objArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean(objArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray25);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray28);
        generator19.setClasses(classArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator19.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = generator19.getStrategy();
        generator12.setStrategy(generatorStrategy34);
        generator0.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = generator37.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = generator37.getStrategy();
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin47.newInstance((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        boolean boolean67 = generator65.getUseCache();
        java.lang.Object[] objArray69 = new java.lang.Object[] { generator65, true };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create(classArray64, objArray69);
        org.mockito.cglib.proxy.Mixin.Generator generator72 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean73 = generator72.getAttemptLoad();
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray76 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, objArray76);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator72.setDelegates((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray64);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray64);
        boolean boolean84 = generatorStrategy41.equals((java.lang.Object) classArray64);
        generator0.setStrategy(generatorStrategy41);
        org.mockito.asm.ClassVisitor classVisitor86 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[10]");
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[10]");
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, objArray3);
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(objArray3);
        java.lang.Class[] classArray6 = org.mockito.cglib.proxy.Mixin.getClasses(objArray3);
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray6);
        java.lang.Class[] classArray10 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray6);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray10);
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray10);
        java.lang.Class<?> wildcardClass13 = classArray10.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[10]");
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        java.lang.ClassLoader classLoader19 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader19, objArray21);
        generator12.setDelegates(objArray21);
        java.lang.ClassLoader classLoader24 = null;
        java.lang.Object[] objArray31 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader24, (java.lang.Object[]) classArray32);
        generator12.setClasses(classArray32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = generator12.getNamingPolicy();
        generator12.setUseCache(true);
        java.lang.ClassLoader classLoader38 = generator12.getClassLoader();
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(objArray41);
        java.lang.Class[] classArray44 = org.mockito.cglib.proxy.Mixin.getClasses(objArray41);
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray44);
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray44);
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        java.lang.ClassLoader classLoader49 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(classLoader49, objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(objArray51);
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        generator47.setDelegates((java.lang.Object[]) classArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(classArray46, (java.lang.Object[]) classArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray46);
        java.lang.ClassLoader classLoader58 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader58, objArray62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, (java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin74 = mixin63.newInstance((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create(classArray57, (java.lang.Object[]) classArray72);
        java.lang.Class[] classArray76 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator12.setDelegates((java.lang.Object[]) classArray57);
        boolean boolean79 = namingPolicy11.equals((java.lang.Object) classArray57);
        java.lang.Class<?> wildcardClass80 = classArray57.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10]");
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10]");
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        generator0.setNamingPolicy(namingPolicy11);
        generator0.setAttemptLoad(true);
        java.lang.Object[] objArray15 = null;
        generator0.setDelegates(objArray15);
        java.lang.Class<?> wildcardClass17 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setUseCache(false);
        boolean boolean6 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader7 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator16 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean17 = generator16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        generator16.setStrategy(generatorStrategy18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        generator16.setClasses(classArray25);
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray36 = org.mockito.cglib.proxy.Mixin.getClasses(objArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.create(classArray25, (java.lang.Object[]) classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        generator39.setStrategy(generatorStrategy41);
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        generator39.setClasses(classArray48);
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray58);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray36, (java.lang.Object[]) classArray59);
        generator0.setClasses(classArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = generator64.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = generator64.getStrategy();
        generator64.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator70 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean71 = generator70.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = generator70.getStrategy();
        generator64.setStrategy(generatorStrategy72);
        generator0.setStrategy(generatorStrategy72);
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        java.lang.Object[] objArray89 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray90 = org.mockito.cglib.proxy.Mixin.getClasses(objArray89);
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.create(classArray82, (java.lang.Object[]) classArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray82);
        boolean boolean93 = generatorStrategy72.equals((java.lang.Object) classArray82);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray82);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(mixin94);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = generator0.getStrategy();
        boolean boolean11 = generator0.getUseCache();
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray33 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses(objArray33);
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, (java.lang.Object[]) classArray34);
        generator14.setClasses(classArray34);
        generator14.setUseCache(true);
        generator14.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator14.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy41);
        org.mockito.asm.ClassVisitor classVisitor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        java.lang.ClassLoader classLoader6 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean(classLoader6, objArray8);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(objArray8);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses(objArray8);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        boolean boolean14 = generator12.getUseCache();
        java.lang.Object[] objArray16 = new java.lang.Object[] { generator12, true };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.create(classArray11, objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray23);
        java.lang.Class[] classArray26 = org.mockito.cglib.proxy.Mixin.getClasses(objArray23);
        generator19.setDelegates((java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(classArray11, (java.lang.Object[]) classArray26);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader5, (java.lang.Object[]) classArray26);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        java.lang.ClassLoader classLoader39 = null;
        generator37.setClassLoader(classLoader39);
        boolean boolean41 = generator37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = null;
        generator37.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        generator44.setUseCache(true);
        boolean boolean48 = generator44.getUseCache();
        generator44.setUseCache(true);
        java.lang.Object[] objArray53 = new java.lang.Object[] { generator37, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = mixin36.newInstance(objArray53);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.create(objArray53);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.create(classArray26, objArray53);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray26);
        generator0.setClasses(classArray26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[10]");
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator6.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setAttemptLoad(true);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, objArray46);
        generator37.setDelegates(objArray46);
        org.mockito.cglib.proxy.Mixin.Generator generator49 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean50 = generator49.getUseCache();
        java.lang.ClassLoader classLoader51 = null;
        generator49.setClassLoader(classLoader51);
        boolean boolean53 = generator49.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator49.getNamingPolicy();
        generator37.setNamingPolicy(namingPolicy54);
        generator22.setNamingPolicy(namingPolicy54);
        java.lang.ClassLoader classLoader57 = generator22.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = generator22.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin59 = generator22.create();
        java.lang.Object[] objArray60 = null;
        org.mockito.cglib.proxy.Mixin mixin61 = mixin59.newInstance(objArray60);
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin72 = mixin59.newInstance((java.lang.Object[]) classArray69);
        org.mockito.cglib.core.Predicate predicate73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = namingPolicy19.getClassName("", "", (java.lang.Object) mixin72, predicate73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[10]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(mixin72);
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.Object[] objArray2 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin3 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, objArray2);
        org.mockito.cglib.proxy.Mixin mixin4 = org.mockito.cglib.proxy.Mixin.createBean(objArray2);
        java.lang.Class[] classArray5 = org.mockito.cglib.proxy.Mixin.getClasses(objArray2);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray5);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        java.lang.ClassLoader classLoader9 = null;
        generator7.setClassLoader(classLoader9);
        boolean boolean11 = generator7.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = null;
        generator7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        java.lang.Object[] objArray23 = new java.lang.Object[] { generator7, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        org.mockito.cglib.proxy.Mixin mixin25 = mixin6.newInstance(objArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(objArray23);
        java.lang.ClassLoader classLoader27 = null;
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader27, objArray29);
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(objArray29);
        java.lang.Class[] classArray32 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray34 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray34);
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator36.setClasses(classArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        boolean boolean58 = generator56.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator56, true };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create(classArray34, objArray60);
        org.mockito.cglib.proxy.Mixin mixin65 = mixin26.newInstance(objArray60);
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray60);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[10]");
        org.junit.Assert.assertNotNull(mixin3);
        org.junit.Assert.assertNotNull(mixin4);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[10]");
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator18 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean19 = generator18.getUseCache();
        generator18.setUseCache(true);
        boolean boolean22 = generator18.getUseCache();
        generator18.setAttemptLoad(true);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, objArray27);
        generator18.setDelegates(objArray27);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray38 = org.mockito.cglib.proxy.Mixin.getClasses(objArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, (java.lang.Object[]) classArray38);
        generator18.setClasses(classArray38);
        boolean boolean41 = namingPolicy17.equals((java.lang.Object) classArray38);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.ClassLoader classLoader43 = null;
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader43, objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(objArray45);
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray48);
        boolean boolean52 = namingPolicy17.equals((java.lang.Object) classArray48);
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = generator0.getNamingPolicy();
        boolean boolean55 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin56 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10]");
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10]");
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = generator0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin13 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray20);
        generator0.setDelegates((java.lang.Object[]) classArray20);
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = null;
        generator23.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = null;
        generator23.setClassLoader(classLoader30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator23.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin45 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(objArray44);
        java.lang.Class[] classArray47 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray47);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.create(classArray39, (java.lang.Object[]) classArray47);
        boolean boolean53 = namingPolicy32.equals((java.lang.Object) classArray47);
        org.mockito.cglib.proxy.Mixin.Generator generator54 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean55 = generator54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = null;
        generator54.setStrategy(generatorStrategy56);
        generator54.setAttemptLoad(false);
        java.lang.ClassLoader classLoader60 = null;
        java.lang.Object[] objArray62 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader60, objArray62);
        generator54.setDelegates(objArray62);
        org.mockito.cglib.proxy.Mixin mixin65 = generator54.create();
        org.mockito.cglib.proxy.Mixin.Generator generator66 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean67 = generator66.getUseCache();
        generator66.setUseCache(true);
        boolean boolean70 = generator66.getUseCache();
        generator66.setAttemptLoad(true);
        java.lang.ClassLoader classLoader73 = null;
        java.lang.Object[] objArray75 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(classLoader73, objArray75);
        generator66.setDelegates(objArray75);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray85 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray86 = org.mockito.cglib.proxy.Mixin.getClasses(objArray85);
        org.mockito.cglib.proxy.Mixin mixin87 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, (java.lang.Object[]) classArray86);
        generator66.setClasses(classArray86);
        boolean boolean89 = generator66.getUseCache();
        generator66.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator66.getStrategy();
        generator54.setStrategy(generatorStrategy92);
        boolean boolean94 = namingPolicy32.equals((java.lang.Object) generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10]");
        org.junit.Assert.assertNotNull(mixin45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[10]");
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[10]");
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(mixin87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        java.lang.ClassLoader classLoader0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin5 = org.mockito.cglib.proxy.Mixin.createBean(classLoader2, objArray4);
        org.mockito.cglib.proxy.Mixin mixin6 = org.mockito.cglib.proxy.Mixin.createBean(objArray4);
        java.lang.Class[] classArray7 = org.mockito.cglib.proxy.Mixin.getClasses(objArray4);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin9 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader1, (java.lang.Object[]) classArray7);
        java.lang.Class[] classArray11 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray7);
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader0, (java.lang.Object[]) classArray11);
        java.lang.ClassLoader classLoader13 = null;
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, (java.lang.Object[]) classArray19);
        java.lang.Class[] classArray23 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray19);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin26 = mixin12.newInstance((java.lang.Object[]) classArray23);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray23);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        java.lang.Class<?> wildcardClass30 = classArray27.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[10]");
        org.junit.Assert.assertNotNull(mixin5);
        org.junit.Assert.assertNotNull(mixin6);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(mixin9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        generator23.setUseCache(true);
        boolean boolean27 = generator23.getUseCache();
        java.lang.ClassLoader classLoader28 = null;
        generator23.setClassLoader(classLoader28);
        generator23.setStyle(2);
        generator23.setUseCache(true);
        boolean boolean34 = generator23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = generator23.getStrategy();
        generator0.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = generator0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy37);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        generator0.setStrategy(generatorStrategy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator0.getNamingPolicy();
        boolean boolean11 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        generator12.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy18);
        java.lang.Class<?> wildcardClass20 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = generator4.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator4.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = null;
        generator0.setNamingPolicy(namingPolicy10);
        boolean boolean12 = generator0.getUseCache();
        java.lang.ClassLoader classLoader13 = null;
        java.lang.Object[] objArray15 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean(classLoader13, objArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(objArray15);
        java.lang.Class[] classArray18 = org.mockito.cglib.proxy.Mixin.getClasses(objArray15);
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray18);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = mixin19.newInstance((java.lang.Object[]) classArray28);
        generator0.setClasses(classArray28);
        org.mockito.asm.ClassVisitor classVisitor31 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[10]");
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = null;
        generator0.setNamingPolicy(namingPolicy7);
        boolean boolean9 = generator0.getAttemptLoad();
        java.lang.Object[] objArray10 = null;
        generator0.setDelegates(objArray10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = generator12.getStrategy();
        generator12.setUseCache(false);
        org.mockito.cglib.proxy.Mixin.Generator generator22 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean23 = generator22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        generator22.setStrategy(generatorStrategy24);
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray31);
        generator22.setClasses(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        generator22.setStrategy(generatorStrategy35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = generator22.getStrategy();
        generator12.setStrategy(generatorStrategy37);
        generator0.setStrategy(generatorStrategy37);
        java.lang.Object obj40 = null;
        boolean boolean41 = generatorStrategy37.equals(obj40);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray46 = new java.lang.Object[] { (short) -1, 'a', 100.0f };
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, objArray46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray55 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray56 = org.mockito.cglib.proxy.Mixin.getClasses(objArray55);
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, (java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = mixin47.newInstance((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator59.setStrategy(generatorStrategy61);
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray68);
        generator59.setClasses(classArray68);
        java.lang.Object[] objArray78 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create(classArray68, (java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray56, (java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray56);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray56);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.Object[] objArray92 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray92);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray93);
        org.mockito.cglib.proxy.Mixin mixin96 = mixin84.newInstance((java.lang.Object[]) classArray93);
        boolean boolean97 = generatorStrategy37.equals((java.lang.Object) mixin96);
        org.mockito.cglib.core.ClassGenerator classGenerator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray99 = generatorStrategy37.generate(classGenerator98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[-1, a, 100.0]");
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        java.lang.ClassLoader classLoader14 = null;
        generator12.setClassLoader(classLoader14);
        boolean boolean16 = generator12.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = generator12.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Mixin mixin19 = generator0.create();
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(objArray22);
        java.lang.Class[] classArray25 = org.mockito.cglib.proxy.Mixin.getClasses(objArray22);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray25);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray25);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        generator28.setDelegates((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.create(classArray27, (java.lang.Object[]) classArray35);
        generator0.setDelegates((java.lang.Object[]) classArray27);
        java.lang.Class[] classArray39 = null;
        generator0.setClasses(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = generator0.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = namingPolicy41.getClassName("", "", (java.lang.Object) (-1), predicate45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        generator12.setDelegates((java.lang.Object[]) classArray19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = generator12.getNamingPolicy();
        boolean boolean22 = generator12.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray23 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator0.setClassLoader(classLoader5);
        generator0.setStyle(2);
        generator0.setAttemptLoad(false);
        boolean boolean11 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        generator12.setUseCache(true);
        boolean boolean16 = generator12.getUseCache();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator19 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean20 = generator19.getUseCache();
        java.lang.ClassLoader classLoader21 = null;
        generator19.setClassLoader(classLoader21);
        boolean boolean23 = generator19.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = generator19.getNamingPolicy();
        generator12.setNamingPolicy(namingPolicy24);
        generator0.setNamingPolicy(namingPolicy24);
        boolean boolean27 = generator0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = generator0.getStrategy();
        java.lang.ClassLoader classLoader12 = null;
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        java.lang.ClassLoader classLoader15 = null;
        generator13.setClassLoader(classLoader15);
        boolean boolean17 = generator13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        generator13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        generator20.setUseCache(true);
        boolean boolean24 = generator20.getUseCache();
        generator20.setUseCache(true);
        java.lang.Object[] objArray29 = new java.lang.Object[] { generator13, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.create(objArray29);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray29);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, objArray29);
        boolean boolean33 = generatorStrategy11.equals((java.lang.Object) classLoader12);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getAttemptLoad();
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(objArray38);
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray38);
        generator34.setDelegates((java.lang.Object[]) classArray41);
        java.lang.ClassLoader classLoader43 = null;
        generator34.setClassLoader(classLoader43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = generator34.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin mixin46 = generator34.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = generator34.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray48 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) generator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        boolean boolean8 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader9 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator6.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator6.getStrategy();
        generator6.setStyle((int) (byte) 0);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = generator12.getStrategy();
        generator6.setStrategy(generatorStrategy14);
        boolean boolean16 = namingPolicy5.equals((java.lang.Object) generator6);
        generator6.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = generator6.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader20 = generator6.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        generator30.setStrategy(generatorStrategy32);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean(objArray36);
        java.lang.Class[] classArray39 = org.mockito.cglib.proxy.Mixin.getClasses(objArray36);
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        org.mockito.cglib.proxy.Mixin mixin41 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray39);
        generator30.setClasses(classArray39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        generator30.setStrategy(generatorStrategy43);
        org.mockito.cglib.proxy.Mixin.Generator generator45 = new org.mockito.cglib.proxy.Mixin.Generator();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = generator45.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator47 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean48 = generator47.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = generator47.getStrategy();
        generator45.setStrategy(generatorStrategy49);
        generator30.setStrategy(generatorStrategy49);
        generator30.setStyle((int) (short) 0);
        boolean boolean54 = generator30.getUseCache();
        org.mockito.cglib.core.Predicate predicate55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = namingPolicy27.getClassName("hi!", "hi!", (java.lang.Object) boolean54, predicate55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(mixin41);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        generator0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = null;
        generator0.setClassLoader(classLoader7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = generator0.getNamingPolicy();
        boolean boolean10 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor13 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader26 = generator0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader26);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = generator2.getStrategy();
        generator0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Mixin.Generator generator11 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean12 = generator11.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = generator13.getStrategy();
        generator11.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator11.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator23 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean24 = generator23.getUseCache();
        java.lang.ClassLoader classLoader25 = null;
        generator23.setClassLoader(classLoader25);
        boolean boolean27 = generator23.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = generator23.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = namingPolicy28.equals((java.lang.Object) classArray49);
        java.lang.ClassLoader classLoader53 = null;
        java.lang.ClassLoader classLoader54 = null;
        java.lang.Object[] objArray56 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin57 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, objArray56);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(objArray56);
        java.lang.Class[] classArray59 = org.mockito.cglib.proxy.Mixin.getClasses(objArray56);
        org.mockito.cglib.proxy.Mixin mixin60 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray59);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader53, (java.lang.Object[]) classArray59);
        boolean boolean63 = namingPolicy28.equals((java.lang.Object) classArray59);
        generator11.setNamingPolicy(namingPolicy28);
        java.lang.Class[] classArray65 = null;
        generator11.setClasses(classArray65);
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray72);
        generator11.setClasses(classArray74);
        boolean boolean76 = generatorStrategy9.equals((java.lang.Object) classArray74);
        java.lang.Class<?> wildcardClass77 = generatorStrategy9.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[10]");
        org.junit.Assert.assertNotNull(mixin57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(mixin60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin11 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        boolean boolean26 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator29 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean30 = generator29.getUseCache();
        generator29.setUseCache(true);
        boolean boolean33 = generator29.getUseCache();
        generator29.setAttemptLoad(true);
        java.lang.ClassLoader classLoader36 = null;
        java.lang.Object[] objArray38 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, objArray38);
        generator29.setDelegates(objArray38);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray48 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray49 = org.mockito.cglib.proxy.Mixin.getClasses(objArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, (java.lang.Object[]) classArray49);
        generator29.setClasses(classArray49);
        boolean boolean52 = generator29.getUseCache();
        generator29.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator55 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean56 = generator55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator55.setStrategy(generatorStrategy57);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(objArray61);
        java.lang.Class[] classArray64 = org.mockito.cglib.proxy.Mixin.getClasses(objArray61);
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray64);
        generator55.setClasses(classArray64);
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray75 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray75);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(classArray64, (java.lang.Object[]) classArray75);
        generator29.setClasses(classArray64);
        org.mockito.cglib.proxy.Mixin.Generator generator79 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean80 = generator79.getUseCache();
        java.lang.ClassLoader classLoader81 = null;
        generator79.setClassLoader(classLoader81);
        boolean boolean83 = generator79.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = generator79.getNamingPolicy();
        generator29.setNamingPolicy(namingPolicy84);
        org.mockito.cglib.proxy.Mixin.Generator generator86 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean87 = generator86.getAttemptLoad();
        java.lang.ClassLoader classLoader88 = null;
        java.lang.Object[] objArray90 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin91 = org.mockito.cglib.proxy.Mixin.createBean(classLoader88, objArray90);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean(objArray90);
        java.lang.Class[] classArray93 = org.mockito.cglib.proxy.Mixin.getClasses(objArray90);
        generator86.setDelegates((java.lang.Object[]) classArray93);
        boolean boolean95 = namingPolicy84.equals((java.lang.Object) classArray93);
        generator0.setNamingPolicy(namingPolicy84);
        generator0.setStyle(0);
        org.mockito.cglib.core.NamingPolicy namingPolicy99 = generator0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[10]");
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[10]");
        org.junit.Assert.assertNotNull(mixin91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(namingPolicy99);
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        java.lang.ClassLoader classLoader4 = null;
        generator2.setClassLoader(classLoader4);
        boolean boolean6 = generator2.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = generator2.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator8 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean9 = generator8.getUseCache();
        generator8.setUseCache(true);
        boolean boolean12 = generator8.getUseCache();
        generator8.setAttemptLoad(true);
        java.lang.ClassLoader classLoader15 = null;
        java.lang.Object[] objArray17 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader15, objArray17);
        generator8.setDelegates(objArray17);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray28 = org.mockito.cglib.proxy.Mixin.getClasses(objArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, (java.lang.Object[]) classArray28);
        generator8.setClasses(classArray28);
        boolean boolean31 = namingPolicy7.equals((java.lang.Object) classArray28);
        generator0.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.Mixin.Generator generator33 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean34 = generator33.getUseCache();
        generator33.setUseCache(true);
        boolean boolean37 = generator33.getUseCache();
        generator33.setAttemptLoad(true);
        java.lang.ClassLoader classLoader40 = null;
        java.lang.Object[] objArray42 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin43 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, objArray42);
        generator33.setDelegates(objArray42);
        java.lang.ClassLoader classLoader45 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(classLoader45, (java.lang.Object[]) classArray53);
        generator33.setClasses(classArray53);
        boolean boolean56 = generator33.getUseCache();
        generator33.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator33.getStrategy();
        boolean boolean60 = namingPolicy7.equals((java.lang.Object) generator33);
        boolean boolean61 = generator33.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator62 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean63 = generator62.getUseCache();
        generator62.setUseCache(true);
        boolean boolean66 = generator62.getUseCache();
        generator62.setAttemptLoad(true);
        java.lang.ClassLoader classLoader69 = null;
        java.lang.Object[] objArray71 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean(classLoader69, objArray71);
        generator62.setDelegates(objArray71);
        java.lang.ClassLoader classLoader74 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses(objArray81);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean(classLoader74, (java.lang.Object[]) classArray82);
        generator62.setClasses(classArray82);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = generator62.getNamingPolicy();
        generator62.setUseCache(true);
        java.lang.ClassLoader classLoader88 = generator62.getClassLoader();
        boolean boolean89 = generator62.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = generator62.getStrategy();
        generator33.setStrategy(generatorStrategy90);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = generator33.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator33.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[10]");
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[10]");
        org.junit.Assert.assertNotNull(mixin43);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[10]");
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = generator0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = null;
        generator0.setStrategy(generatorStrategy6);
        generator0.setAttemptLoad(true);
        generator0.setUseCache(true);
        boolean boolean12 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        generator13.setUseCache(true);
        boolean boolean17 = generator13.getUseCache();
        generator13.setAttemptLoad(true);
        java.lang.ClassLoader classLoader20 = null;
        java.lang.Object[] objArray22 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader20, objArray22);
        generator13.setDelegates(objArray22);
        java.lang.ClassLoader classLoader25 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(classLoader25, (java.lang.Object[]) classArray33);
        generator13.setClasses(classArray33);
        generator13.setUseCache(true);
        generator13.setUseCache(false);
        java.lang.ClassLoader classLoader40 = generator13.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator41 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean42 = generator41.getUseCache();
        generator41.setUseCache(true);
        boolean boolean45 = generator41.getUseCache();
        generator41.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator48 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean49 = generator48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        generator48.setStrategy(generatorStrategy50);
        java.lang.ClassLoader classLoader52 = null;
        java.lang.Object[] objArray54 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader52, objArray54);
        org.mockito.cglib.proxy.Mixin mixin56 = org.mockito.cglib.proxy.Mixin.createBean(objArray54);
        java.lang.Class[] classArray57 = org.mockito.cglib.proxy.Mixin.getClasses(objArray54);
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray57);
        generator48.setClasses(classArray57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        generator48.setStrategy(generatorStrategy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = generator48.getStrategy();
        generator41.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = null;
        java.lang.Object[] objArray69 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(classLoader67, objArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(objArray69);
        java.lang.Class[] classArray72 = org.mockito.cglib.proxy.Mixin.getClasses(objArray69);
        generator65.setDelegates((java.lang.Object[]) classArray72);
        generator41.setDelegates((java.lang.Object[]) classArray72);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader40, (java.lang.Object[]) classArray72);
        generator0.setClasses(classArray72);
        generator0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[10]");
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[10]");
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(mixin56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[10]");
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(mixin75);
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        java.lang.ClassLoader classLoader1 = null;
        generator0.setClassLoader(classLoader1);
        org.mockito.cglib.proxy.Mixin.Generator generator3 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean4 = generator3.getUseCache();
        java.lang.ClassLoader classLoader5 = null;
        generator3.setClassLoader(classLoader5);
        boolean boolean7 = generator3.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator3.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        boolean boolean32 = namingPolicy8.equals((java.lang.Object) classArray29);
        generator0.setNamingPolicy(namingPolicy8);
        boolean boolean34 = generator0.getAttemptLoad();
        generator0.setStyle((int) (short) 1);
        generator0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass39 = generator0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        generator0.setUseCache(true);
        java.lang.ClassLoader classLoader8 = null;
        java.lang.ClassLoader classLoader9 = null;
        java.lang.ClassLoader classLoader10 = null;
        java.lang.Object[] objArray12 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin13 = org.mockito.cglib.proxy.Mixin.createBean(classLoader10, objArray12);
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(objArray12);
        java.lang.Class[] classArray15 = org.mockito.cglib.proxy.Mixin.getClasses(objArray12);
        org.mockito.cglib.proxy.Mixin mixin16 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, (java.lang.Object[]) classArray15);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray15);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(classLoader8, (java.lang.Object[]) classArray19);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        java.lang.Class[] classArray27 = org.mockito.cglib.proxy.Mixin.getClasses(objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray27);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray27);
        org.mockito.cglib.proxy.Mixin mixin32 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray33 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin mixin34 = mixin20.newInstance((java.lang.Object[]) classArray31);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray35);
        boolean boolean37 = generator0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader38 = generator0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[10]");
        org.junit.Assert.assertNotNull(mixin13);
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(mixin16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(mixin28);
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(mixin32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = generator0.getNamingPolicy();
        generator0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = generator0.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = generator14.getStrategy();
        generator12.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = generator12.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getUseCache();
        java.lang.ClassLoader classLoader26 = null;
        generator24.setClassLoader(classLoader26);
        boolean boolean28 = generator24.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = generator24.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator30 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean31 = generator30.getUseCache();
        generator30.setUseCache(true);
        boolean boolean34 = generator30.getUseCache();
        generator30.setAttemptLoad(true);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray39 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin40 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, objArray39);
        generator30.setDelegates(objArray39);
        java.lang.ClassLoader classLoader42 = null;
        java.lang.Object[] objArray49 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray50 = org.mockito.cglib.proxy.Mixin.getClasses(objArray49);
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader42, (java.lang.Object[]) classArray50);
        generator30.setClasses(classArray50);
        boolean boolean53 = namingPolicy29.equals((java.lang.Object) classArray50);
        java.lang.ClassLoader classLoader54 = null;
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.createBean(classLoader54, (java.lang.Object[]) classArray60);
        boolean boolean64 = namingPolicy29.equals((java.lang.Object) classArray60);
        generator12.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = generator12.getNamingPolicy();
        generator12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator69 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean70 = generator69.getUseCache();
        generator69.setUseCache(true);
        boolean boolean73 = generator69.getUseCache();
        generator69.setAttemptLoad(true);
        generator69.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator78 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean79 = generator78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = null;
        generator78.setStrategy(generatorStrategy80);
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin88 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray87);
        generator78.setClasses(classArray87);
        boolean boolean91 = generator78.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = generator78.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = generator78.getStrategy();
        generator69.setStrategy(generatorStrategy93);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = generator69.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = generator69.getStrategy();
        generator12.setStrategy(generatorStrategy96);
        generator0.setStrategy(generatorStrategy96);
        boolean boolean99 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[10]");
        org.junit.Assert.assertNotNull(mixin40);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin88);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(namingPolicy92);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        boolean boolean13 = generator0.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator14 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean15 = generator14.getUseCache();
        generator14.setUseCache(true);
        boolean boolean18 = generator14.getUseCache();
        generator14.setAttemptLoad(true);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin24 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, objArray23);
        generator14.setDelegates(objArray23);
        generator0.setDelegates(objArray23);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        generator27.setUseCache(true);
        boolean boolean31 = generator27.getUseCache();
        generator27.setAttemptLoad(true);
        java.lang.ClassLoader classLoader34 = null;
        java.lang.Object[] objArray36 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean(classLoader34, objArray36);
        generator27.setDelegates(objArray36);
        org.mockito.cglib.proxy.Mixin.Generator generator39 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean40 = generator39.getUseCache();
        java.lang.ClassLoader classLoader41 = null;
        generator39.setClassLoader(classLoader41);
        boolean boolean43 = generator39.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = generator39.getNamingPolicy();
        generator27.setNamingPolicy(namingPolicy44);
        generator0.setNamingPolicy(namingPolicy44);
        generator0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Mixin mixin49 = generator0.create();
        org.mockito.cglib.proxy.Mixin mixin50 = generator0.create();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        generator52.setUseCache(true);
        boolean boolean56 = generator52.getUseCache();
        generator52.setAttemptLoad(true);
        java.lang.ClassLoader classLoader59 = null;
        java.lang.Object[] objArray61 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean(classLoader59, objArray61);
        generator52.setDelegates(objArray61);
        org.mockito.cglib.proxy.Mixin.Generator generator64 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean65 = generator64.getUseCache();
        java.lang.ClassLoader classLoader66 = null;
        generator64.setClassLoader(classLoader66);
        boolean boolean68 = generator64.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = generator64.getNamingPolicy();
        generator52.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Mixin mixin71 = generator52.create();
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.createBean(objArray74);
        java.lang.Class[] classArray77 = org.mockito.cglib.proxy.Mixin.getClasses(objArray74);
        org.mockito.cglib.proxy.Mixin mixin78 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray77);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray77);
        org.mockito.cglib.proxy.Mixin.Generator generator80 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean81 = generator80.getAttemptLoad();
        java.lang.ClassLoader classLoader82 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin85 = org.mockito.cglib.proxy.Mixin.createBean(classLoader82, objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(objArray84);
        java.lang.Class[] classArray87 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        generator80.setDelegates((java.lang.Object[]) classArray87);
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.create(classArray79, (java.lang.Object[]) classArray87);
        generator52.setDelegates((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray91 = null;
        generator52.setClasses(classArray91);
        boolean boolean93 = generator52.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = generatorStrategy51.generate((org.mockito.cglib.core.ClassGenerator) generator52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[10]");
        org.junit.Assert.assertNotNull(mixin24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[10]");
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[10]");
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(mixin78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10]");
        org.junit.Assert.assertNotNull(mixin85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        boolean boolean4 = generator0.getAttemptLoad();
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray12 = org.mockito.cglib.proxy.Mixin.getClasses(objArray11);
        generator0.setClasses(classArray12);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray16 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, objArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean(objArray16);
        java.lang.Class[] classArray19 = org.mockito.cglib.proxy.Mixin.getClasses(objArray16);
        org.mockito.cglib.proxy.Mixin.Generator generator20 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean21 = generator20.getUseCache();
        boolean boolean22 = generator20.getUseCache();
        java.lang.Object[] objArray24 = new java.lang.Object[] { generator20, true };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(objArray24);
        org.mockito.cglib.proxy.Mixin mixin26 = org.mockito.cglib.proxy.Mixin.create(classArray19, objArray24);
        org.mockito.cglib.proxy.Mixin mixin27 = org.mockito.cglib.proxy.Mixin.create(classArray12, objArray24);
        org.mockito.cglib.proxy.Mixin mixin28 = org.mockito.cglib.proxy.Mixin.create(objArray24);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10]");
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertNotNull(mixin26);
        org.junit.Assert.assertNotNull(mixin27);
        org.junit.Assert.assertNotNull(mixin28);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 0);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        generator0.setStrategy(generatorStrategy26);
        generator0.setUseCache(true);
        generator0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Mixin.Generator generator32 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean33 = generator32.getUseCache();
        generator32.setUseCache(true);
        boolean boolean36 = generator32.getUseCache();
        generator32.setAttemptLoad(true);
        java.lang.ClassLoader classLoader39 = null;
        java.lang.Object[] objArray41 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader39, objArray41);
        generator32.setDelegates(objArray41);
        java.lang.ClassLoader classLoader44 = null;
        java.lang.Object[] objArray51 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray52 = org.mockito.cglib.proxy.Mixin.getClasses(objArray51);
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader44, (java.lang.Object[]) classArray52);
        generator32.setClasses(classArray52);
        boolean boolean55 = generator32.getUseCache();
        generator32.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator58 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean59 = generator58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        generator58.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = null;
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin65 = org.mockito.cglib.proxy.Mixin.createBean(classLoader62, objArray64);
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(objArray64);
        java.lang.Class[] classArray67 = org.mockito.cglib.proxy.Mixin.getClasses(objArray64);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray67);
        generator58.setClasses(classArray67);
        java.lang.Object[] objArray77 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray77);
        org.mockito.cglib.proxy.Mixin mixin79 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray78);
        org.mockito.cglib.proxy.Mixin mixin80 = org.mockito.cglib.proxy.Mixin.create(classArray67, (java.lang.Object[]) classArray78);
        generator32.setClasses(classArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = generator32.getStrategy();
        generator0.setStrategy(generatorStrategy82);
        org.mockito.cglib.proxy.Mixin.Generator generator84 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean85 = generator84.getUseCache();
        java.lang.ClassLoader classLoader86 = null;
        generator84.setClassLoader(classLoader86);
        boolean boolean88 = generator84.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = null;
        generator84.setNamingPolicy(namingPolicy89);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = generator84.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy91);
        boolean boolean93 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[10]");
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[10]");
        org.junit.Assert.assertNotNull(mixin65);
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(mixin79);
        org.junit.Assert.assertNotNull(mixin80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator7 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean8 = generator7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        generator7.setStrategy(generatorStrategy9);
        java.lang.ClassLoader classLoader11 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin14 = org.mockito.cglib.proxy.Mixin.createBean(classLoader11, objArray13);
        org.mockito.cglib.proxy.Mixin mixin15 = org.mockito.cglib.proxy.Mixin.createBean(objArray13);
        java.lang.Class[] classArray16 = org.mockito.cglib.proxy.Mixin.getClasses(objArray13);
        org.mockito.cglib.proxy.Mixin mixin17 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        org.mockito.cglib.proxy.Mixin mixin18 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray16);
        generator7.setClasses(classArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        generator7.setStrategy(generatorStrategy20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = generator7.getStrategy();
        generator0.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Mixin.Generator generator24 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean25 = generator24.getAttemptLoad();
        java.lang.ClassLoader classLoader26 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin29 = org.mockito.cglib.proxy.Mixin.createBean(classLoader26, objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(objArray28);
        java.lang.Class[] classArray31 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        generator24.setDelegates((java.lang.Object[]) classArray31);
        generator0.setDelegates((java.lang.Object[]) classArray31);
        org.mockito.cglib.proxy.Mixin.Generator generator34 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean35 = generator34.getUseCache();
        generator34.setUseCache(true);
        boolean boolean38 = generator34.getUseCache();
        generator34.setAttemptLoad(true);
        java.lang.ClassLoader classLoader41 = null;
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin44 = org.mockito.cglib.proxy.Mixin.createBean(classLoader41, objArray43);
        generator34.setDelegates(objArray43);
        java.lang.ClassLoader classLoader46 = null;
        java.lang.Object[] objArray53 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray54 = org.mockito.cglib.proxy.Mixin.getClasses(objArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean(classLoader46, (java.lang.Object[]) classArray54);
        generator34.setClasses(classArray54);
        boolean boolean57 = generator34.getUseCache();
        generator34.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        generator60.setStrategy(generatorStrategy62);
        java.lang.ClassLoader classLoader64 = null;
        java.lang.Object[] objArray66 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(classLoader64, objArray66);
        org.mockito.cglib.proxy.Mixin mixin68 = org.mockito.cglib.proxy.Mixin.createBean(objArray66);
        java.lang.Class[] classArray69 = org.mockito.cglib.proxy.Mixin.getClasses(objArray66);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray69);
        generator60.setClasses(classArray69);
        java.lang.Object[] objArray79 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray80 = org.mockito.cglib.proxy.Mixin.getClasses(objArray79);
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.create(classArray69, (java.lang.Object[]) classArray80);
        generator34.setClasses(classArray69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = generator34.getStrategy();
        java.lang.Object obj85 = null;
        boolean boolean86 = generatorStrategy84.equals(obj85);
        generator0.setStrategy(generatorStrategy84);
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10]");
        org.junit.Assert.assertNotNull(mixin14);
        org.junit.Assert.assertNotNull(mixin15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(mixin17);
        org.junit.Assert.assertNotNull(mixin18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10]");
        org.junit.Assert.assertNotNull(mixin29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[10]");
        org.junit.Assert.assertNotNull(mixin44);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[10]");
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(mixin68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(mixin71);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray80);
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = generator0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator9 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean10 = generator9.getUseCache();
        generator9.setUseCache(true);
        boolean boolean13 = generator9.getUseCache();
        generator9.setAttemptLoad(true);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        generator9.setDelegates(objArray18);
        java.lang.ClassLoader classLoader21 = null;
        java.lang.Object[] objArray28 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray29 = org.mockito.cglib.proxy.Mixin.getClasses(objArray28);
        org.mockito.cglib.proxy.Mixin mixin30 = org.mockito.cglib.proxy.Mixin.createBean(classLoader21, (java.lang.Object[]) classArray29);
        generator9.setClasses(classArray29);
        generator9.setUseCache(true);
        generator9.setUseCache(false);
        java.lang.ClassLoader classLoader36 = generator9.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator37 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean38 = generator37.getUseCache();
        generator37.setUseCache(true);
        boolean boolean41 = generator37.getUseCache();
        generator37.setUseCache(true);
        org.mockito.cglib.proxy.Mixin.Generator generator44 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean45 = generator44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        generator44.setStrategy(generatorStrategy46);
        java.lang.ClassLoader classLoader48 = null;
        java.lang.Object[] objArray50 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin51 = org.mockito.cglib.proxy.Mixin.createBean(classLoader48, objArray50);
        org.mockito.cglib.proxy.Mixin mixin52 = org.mockito.cglib.proxy.Mixin.createBean(objArray50);
        java.lang.Class[] classArray53 = org.mockito.cglib.proxy.Mixin.getClasses(objArray50);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        org.mockito.cglib.proxy.Mixin mixin55 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray53);
        generator44.setClasses(classArray53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = null;
        generator44.setStrategy(generatorStrategy57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = generator44.getStrategy();
        generator37.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Mixin.Generator generator61 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean62 = generator61.getAttemptLoad();
        java.lang.ClassLoader classLoader63 = null;
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin66 = org.mockito.cglib.proxy.Mixin.createBean(classLoader63, objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.createBean(objArray65);
        java.lang.Class[] classArray68 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        generator61.setDelegates((java.lang.Object[]) classArray68);
        generator37.setDelegates((java.lang.Object[]) classArray68);
        org.mockito.cglib.proxy.Mixin mixin71 = org.mockito.cglib.proxy.Mixin.createBean(classLoader36, (java.lang.Object[]) classArray68);
        generator0.setClassLoader(classLoader36);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin73 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(mixin30);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[10]");
        org.junit.Assert.assertNotNull(mixin51);
        org.junit.Assert.assertNotNull(mixin52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(mixin55);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10]");
        org.junit.Assert.assertNotNull(mixin66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(mixin71);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        generator0.setAttemptLoad(false);
        generator0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Mixin mixin8 = generator0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Either classes or delegates must be set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        java.lang.Object[] objArray6 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin7 = org.mockito.cglib.proxy.Mixin.createBean(classLoader4, objArray6);
        org.mockito.cglib.proxy.Mixin mixin8 = org.mockito.cglib.proxy.Mixin.createBean(objArray6);
        java.lang.Class[] classArray9 = org.mockito.cglib.proxy.Mixin.getClasses(objArray6);
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        org.mockito.cglib.proxy.Mixin mixin11 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray9);
        generator0.setClasses(classArray9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        generator0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        generator15.setUseCache(true);
        boolean boolean19 = generator15.getUseCache();
        generator15.setAttemptLoad(true);
        java.lang.ClassLoader classLoader22 = null;
        java.lang.Object[] objArray24 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin25 = org.mockito.cglib.proxy.Mixin.createBean(classLoader22, objArray24);
        generator15.setDelegates(objArray24);
        org.mockito.cglib.proxy.Mixin.Generator generator27 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean28 = generator27.getUseCache();
        java.lang.ClassLoader classLoader29 = null;
        generator27.setClassLoader(classLoader29);
        boolean boolean31 = generator27.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = generator27.getNamingPolicy();
        generator15.setNamingPolicy(namingPolicy32);
        generator0.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader35 = generator0.getClassLoader();
        org.mockito.cglib.proxy.Mixin.Generator generator36 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean37 = generator36.getUseCache();
        java.lang.ClassLoader classLoader38 = null;
        generator36.setClassLoader(classLoader38);
        boolean boolean40 = generator36.getAttemptLoad();
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        generator36.setClasses(classArray48);
        java.lang.ClassLoader classLoader50 = null;
        java.lang.Object[] objArray52 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin53 = org.mockito.cglib.proxy.Mixin.createBean(classLoader50, objArray52);
        org.mockito.cglib.proxy.Mixin mixin54 = org.mockito.cglib.proxy.Mixin.createBean(objArray52);
        java.lang.Class[] classArray55 = org.mockito.cglib.proxy.Mixin.getClasses(objArray52);
        org.mockito.cglib.proxy.Mixin.Generator generator56 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean57 = generator56.getUseCache();
        boolean boolean58 = generator56.getUseCache();
        java.lang.Object[] objArray60 = new java.lang.Object[] { generator56, true };
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean(objArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.create(classArray55, objArray60);
        org.mockito.cglib.proxy.Mixin mixin63 = org.mockito.cglib.proxy.Mixin.create(classArray48, objArray60);
        org.mockito.cglib.proxy.Mixin mixin64 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        java.lang.ClassLoader classLoader65 = null;
        java.lang.ClassLoader classLoader66 = null;
        java.lang.Object[] objArray68 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin69 = org.mockito.cglib.proxy.Mixin.createBean(classLoader66, objArray68);
        org.mockito.cglib.proxy.Mixin mixin70 = org.mockito.cglib.proxy.Mixin.createBean(objArray68);
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray68);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin74 = org.mockito.cglib.proxy.Mixin.createBean(classLoader65, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin76 = org.mockito.cglib.proxy.Mixin.create(classArray48, (java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.createBean(classLoader35, (java.lang.Object[]) classArray71);
        java.lang.ClassLoader classLoader78 = null;
        java.lang.Object[] objArray80 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin81 = org.mockito.cglib.proxy.Mixin.createBean(classLoader78, objArray80);
        org.mockito.cglib.proxy.Mixin mixin82 = org.mockito.cglib.proxy.Mixin.createBean(objArray80);
        java.lang.Class[] classArray83 = org.mockito.cglib.proxy.Mixin.getClasses(objArray80);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray83);
        java.lang.ClassLoader classLoader85 = null;
        java.lang.ClassLoader classLoader86 = null;
        java.lang.Object[] objArray88 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin89 = org.mockito.cglib.proxy.Mixin.createBean(classLoader86, objArray88);
        org.mockito.cglib.proxy.Mixin mixin90 = org.mockito.cglib.proxy.Mixin.createBean(objArray88);
        java.lang.Class[] classArray91 = org.mockito.cglib.proxy.Mixin.getClasses(objArray88);
        org.mockito.cglib.proxy.Mixin mixin92 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin93 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin94 = org.mockito.cglib.proxy.Mixin.createBean(classLoader85, (java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin95 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin96 = org.mockito.cglib.proxy.Mixin.create(classArray83, (java.lang.Object[]) classArray91);
        org.mockito.cglib.proxy.Mixin mixin97 = org.mockito.cglib.proxy.Mixin.create(classArray71, (java.lang.Object[]) classArray83);
        org.mockito.cglib.proxy.Mixin mixin98 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin99 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray71);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[10]");
        org.junit.Assert.assertNotNull(mixin7);
        org.junit.Assert.assertNotNull(mixin8);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(mixin11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[10]");
        org.junit.Assert.assertNotNull(mixin25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[10]");
        org.junit.Assert.assertNotNull(mixin53);
        org.junit.Assert.assertNotNull(mixin54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(mixin63);
        org.junit.Assert.assertNotNull(mixin64);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[10]");
        org.junit.Assert.assertNotNull(mixin69);
        org.junit.Assert.assertNotNull(mixin70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertNotNull(mixin74);
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(mixin76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[10]");
        org.junit.Assert.assertNotNull(mixin81);
        org.junit.Assert.assertNotNull(mixin82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(mixin84);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[10]");
        org.junit.Assert.assertNotNull(mixin89);
        org.junit.Assert.assertNotNull(mixin90);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(mixin92);
        org.junit.Assert.assertNotNull(mixin93);
        org.junit.Assert.assertNotNull(mixin94);
        org.junit.Assert.assertNotNull(mixin95);
        org.junit.Assert.assertNotNull(mixin96);
        org.junit.Assert.assertNotNull(mixin97);
        org.junit.Assert.assertNotNull(mixin98);
        org.junit.Assert.assertNotNull(mixin99);
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        generator0.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        generator26.setStrategy(generatorStrategy28);
        java.lang.ClassLoader classLoader30 = null;
        java.lang.Object[] objArray32 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin33 = org.mockito.cglib.proxy.Mixin.createBean(classLoader30, objArray32);
        org.mockito.cglib.proxy.Mixin mixin34 = org.mockito.cglib.proxy.Mixin.createBean(objArray32);
        java.lang.Class[] classArray35 = org.mockito.cglib.proxy.Mixin.getClasses(objArray32);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        org.mockito.cglib.proxy.Mixin mixin37 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray35);
        generator26.setClasses(classArray35);
        java.lang.Object[] objArray45 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray46 = org.mockito.cglib.proxy.Mixin.getClasses(objArray45);
        org.mockito.cglib.proxy.Mixin mixin47 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray46);
        org.mockito.cglib.proxy.Mixin mixin48 = org.mockito.cglib.proxy.Mixin.create(classArray35, (java.lang.Object[]) classArray46);
        generator0.setClasses(classArray35);
        org.mockito.cglib.proxy.Mixin.Generator generator50 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean51 = generator50.getUseCache();
        java.lang.ClassLoader classLoader52 = null;
        generator50.setClassLoader(classLoader52);
        boolean boolean54 = generator50.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = generator50.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Mixin.Generator generator57 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean58 = generator57.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator59 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean60 = generator59.getUseCache();
        java.lang.ClassLoader classLoader61 = null;
        generator59.setClassLoader(classLoader61);
        boolean boolean63 = generator59.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = generator59.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator65 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean66 = generator65.getUseCache();
        generator65.setUseCache(true);
        boolean boolean69 = generator65.getUseCache();
        generator65.setAttemptLoad(true);
        java.lang.ClassLoader classLoader72 = null;
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin75 = org.mockito.cglib.proxy.Mixin.createBean(classLoader72, objArray74);
        generator65.setDelegates(objArray74);
        java.lang.ClassLoader classLoader77 = null;
        java.lang.Object[] objArray84 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray85 = org.mockito.cglib.proxy.Mixin.getClasses(objArray84);
        org.mockito.cglib.proxy.Mixin mixin86 = org.mockito.cglib.proxy.Mixin.createBean(classLoader77, (java.lang.Object[]) classArray85);
        generator65.setClasses(classArray85);
        boolean boolean88 = namingPolicy64.equals((java.lang.Object) classArray85);
        generator57.setNamingPolicy(namingPolicy64);
        generator0.setNamingPolicy(namingPolicy64);
        boolean boolean91 = generator0.getAttemptLoad();
        generator0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader94 = generator0.getClassLoader();
        boolean boolean95 = generator0.getAttemptLoad();
        java.lang.ClassLoader classLoader96 = generator0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = null;
        generator0.setNamingPolicy(namingPolicy97);
        boolean boolean99 = generator0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[10]");
        org.junit.Assert.assertNotNull(mixin33);
        org.junit.Assert.assertNotNull(mixin34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(mixin37);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(mixin47);
        org.junit.Assert.assertNotNull(mixin48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[10]");
        org.junit.Assert.assertNotNull(mixin75);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(mixin86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        java.lang.Class[] classArray25 = null;
        generator0.setClasses(classArray25);
        boolean boolean27 = generator0.getUseCache();
        boolean boolean28 = generator0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        generator0.setUseCache(true);
        boolean boolean4 = generator0.getUseCache();
        generator0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = null;
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin10 = org.mockito.cglib.proxy.Mixin.createBean(classLoader7, objArray9);
        generator0.setDelegates(objArray9);
        java.lang.ClassLoader classLoader12 = null;
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray20 = org.mockito.cglib.proxy.Mixin.getClasses(objArray19);
        org.mockito.cglib.proxy.Mixin mixin21 = org.mockito.cglib.proxy.Mixin.createBean(classLoader12, (java.lang.Object[]) classArray20);
        generator0.setClasses(classArray20);
        boolean boolean23 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = generator0.getStrategy();
        org.mockito.cglib.proxy.Mixin.Generator generator25 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean26 = generator25.getUseCache();
        generator25.setUseCache(true);
        boolean boolean29 = generator25.getUseCache();
        generator25.setAttemptLoad(true);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        generator25.setDelegates(objArray34);
        java.lang.ClassLoader classLoader37 = null;
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray45 = org.mockito.cglib.proxy.Mixin.getClasses(objArray44);
        org.mockito.cglib.proxy.Mixin mixin46 = org.mockito.cglib.proxy.Mixin.createBean(classLoader37, (java.lang.Object[]) classArray45);
        generator25.setClasses(classArray45);
        boolean boolean48 = generator25.getUseCache();
        generator25.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator51 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean52 = generator51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        generator51.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader55 = null;
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin58 = org.mockito.cglib.proxy.Mixin.createBean(classLoader55, objArray57);
        org.mockito.cglib.proxy.Mixin mixin59 = org.mockito.cglib.proxy.Mixin.createBean(objArray57);
        java.lang.Class[] classArray60 = org.mockito.cglib.proxy.Mixin.getClasses(objArray57);
        org.mockito.cglib.proxy.Mixin mixin61 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        org.mockito.cglib.proxy.Mixin mixin62 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray60);
        generator51.setClasses(classArray60);
        java.lang.Object[] objArray70 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray71 = org.mockito.cglib.proxy.Mixin.getClasses(objArray70);
        org.mockito.cglib.proxy.Mixin mixin72 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray71);
        org.mockito.cglib.proxy.Mixin mixin73 = org.mockito.cglib.proxy.Mixin.create(classArray60, (java.lang.Object[]) classArray71);
        generator25.setClasses(classArray60);
        boolean boolean75 = generatorStrategy24.equals((java.lang.Object) generator25);
        boolean boolean76 = generator25.getAttemptLoad();
        boolean boolean77 = generator25.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator25.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[10]");
        org.junit.Assert.assertNotNull(mixin10);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(mixin21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(mixin46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[10]");
        org.junit.Assert.assertNotNull(mixin58);
        org.junit.Assert.assertNotNull(mixin59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(mixin61);
        org.junit.Assert.assertNotNull(mixin62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(mixin72);
        org.junit.Assert.assertNotNull(mixin73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        java.lang.ClassLoader classLoader2 = null;
        generator0.setClassLoader(classLoader2);
        org.mockito.cglib.proxy.Mixin.Generator generator4 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean5 = generator4.getUseCache();
        generator4.setUseCache(true);
        generator4.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = generator4.getNamingPolicy();
        generator0.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Mixin.Generator generator12 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean13 = generator12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        generator12.setStrategy(generatorStrategy14);
        java.lang.ClassLoader classLoader16 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin19 = org.mockito.cglib.proxy.Mixin.createBean(classLoader16, objArray18);
        org.mockito.cglib.proxy.Mixin mixin20 = org.mockito.cglib.proxy.Mixin.createBean(objArray18);
        java.lang.Class[] classArray21 = org.mockito.cglib.proxy.Mixin.getClasses(objArray18);
        org.mockito.cglib.proxy.Mixin mixin22 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray21);
        generator12.setClasses(classArray21);
        boolean boolean25 = generator12.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator26 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean27 = generator26.getUseCache();
        generator26.setUseCache(true);
        boolean boolean30 = generator26.getUseCache();
        generator26.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, objArray35);
        generator26.setDelegates(objArray35);
        generator12.setDelegates(objArray35);
        generator0.setDelegates(objArray35);
        // The following exception was thrown during execution in test generation
        try {
            generator0.setStyle(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mixin style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[10]");
        org.junit.Assert.assertNotNull(mixin19);
        org.junit.Assert.assertNotNull(mixin20);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(mixin22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[10]");
        org.junit.Assert.assertNotNull(mixin36);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = null;
        generator0.setStrategy(generatorStrategy2);
        java.lang.ClassLoader classLoader4 = null;
        generator0.setClassLoader(classLoader4);
        org.mockito.cglib.proxy.Mixin.Generator generator6 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean7 = generator6.getUseCache();
        generator6.setUseCache(true);
        boolean boolean10 = generator6.getUseCache();
        generator6.setStyle((int) (short) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator13 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean14 = generator13.getUseCache();
        org.mockito.cglib.proxy.Mixin.Generator generator15 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean16 = generator15.getUseCache();
        java.lang.ClassLoader classLoader17 = null;
        generator15.setClassLoader(classLoader17);
        boolean boolean19 = generator15.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = generator15.getNamingPolicy();
        org.mockito.cglib.proxy.Mixin.Generator generator21 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean22 = generator21.getUseCache();
        generator21.setUseCache(true);
        boolean boolean25 = generator21.getUseCache();
        generator21.setAttemptLoad(true);
        java.lang.ClassLoader classLoader28 = null;
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin31 = org.mockito.cglib.proxy.Mixin.createBean(classLoader28, objArray30);
        generator21.setDelegates(objArray30);
        java.lang.ClassLoader classLoader33 = null;
        java.lang.Object[] objArray40 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray41 = org.mockito.cglib.proxy.Mixin.getClasses(objArray40);
        org.mockito.cglib.proxy.Mixin mixin42 = org.mockito.cglib.proxy.Mixin.createBean(classLoader33, (java.lang.Object[]) classArray41);
        generator21.setClasses(classArray41);
        boolean boolean44 = namingPolicy20.equals((java.lang.Object) classArray41);
        generator13.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Mixin.Generator generator46 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean47 = generator46.getUseCache();
        java.lang.ClassLoader classLoader48 = null;
        generator46.setClassLoader(classLoader48);
        boolean boolean50 = generator46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = generator46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        generator46.setStrategy(generatorStrategy52);
        generator46.setAttemptLoad(true);
        generator46.setUseCache(true);
        boolean boolean58 = generator46.getUseCache();
        java.lang.Object[] objArray65 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray66 = org.mockito.cglib.proxy.Mixin.getClasses(objArray65);
        org.mockito.cglib.proxy.Mixin mixin67 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray66);
        generator46.setDelegates((java.lang.Object[]) classArray66);
        boolean boolean69 = namingPolicy20.equals((java.lang.Object) generator46);
        generator6.setNamingPolicy(namingPolicy20);
        generator0.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader72 = null;
        generator0.setClassLoader(classLoader72);
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            generator0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[10]");
        org.junit.Assert.assertNotNull(mixin31);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(mixin42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(mixin67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        org.mockito.cglib.proxy.Mixin.Generator generator0 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean1 = generator0.getAttemptLoad();
        org.mockito.cglib.proxy.Mixin.Generator generator2 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean3 = generator2.getUseCache();
        generator2.setUseCache(true);
        boolean boolean6 = generator2.getUseCache();
        generator2.setAttemptLoad(true);
        java.lang.ClassLoader classLoader9 = null;
        java.lang.Object[] objArray11 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin12 = org.mockito.cglib.proxy.Mixin.createBean(classLoader9, objArray11);
        generator2.setDelegates(objArray11);
        java.lang.ClassLoader classLoader14 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray22 = org.mockito.cglib.proxy.Mixin.getClasses(objArray21);
        org.mockito.cglib.proxy.Mixin mixin23 = org.mockito.cglib.proxy.Mixin.createBean(classLoader14, (java.lang.Object[]) classArray22);
        generator2.setClasses(classArray22);
        boolean boolean25 = generator2.getUseCache();
        generator2.setStyle((int) (byte) 1);
        org.mockito.cglib.proxy.Mixin.Generator generator28 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean29 = generator28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        generator28.setStrategy(generatorStrategy30);
        java.lang.ClassLoader classLoader32 = null;
        java.lang.Object[] objArray34 = new java.lang.Object[] { (byte) 10 };
        org.mockito.cglib.proxy.Mixin mixin35 = org.mockito.cglib.proxy.Mixin.createBean(classLoader32, objArray34);
        org.mockito.cglib.proxy.Mixin mixin36 = org.mockito.cglib.proxy.Mixin.createBean(objArray34);
        java.lang.Class[] classArray37 = org.mockito.cglib.proxy.Mixin.getClasses(objArray34);
        org.mockito.cglib.proxy.Mixin mixin38 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        org.mockito.cglib.proxy.Mixin mixin39 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray37);
        generator28.setClasses(classArray37);
        java.lang.Object[] objArray47 = new java.lang.Object[] { (byte) 10, 'a', (-1L), 10.0d, (short) 100, 'a' };
        java.lang.Class[] classArray48 = org.mockito.cglib.proxy.Mixin.getClasses(objArray47);
        org.mockito.cglib.proxy.Mixin mixin49 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray48);
        org.mockito.cglib.proxy.Mixin mixin50 = org.mockito.cglib.proxy.Mixin.create(classArray37, (java.lang.Object[]) classArray48);
        generator2.setClasses(classArray37);
        org.mockito.cglib.proxy.Mixin.Generator generator52 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean53 = generator52.getUseCache();
        java.lang.ClassLoader classLoader54 = null;
        generator52.setClassLoader(classLoader54);
        boolean boolean56 = generator52.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = generator52.getNamingPolicy();
        generator2.setNamingPolicy(namingPolicy57);
        generator0.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Mixin.Generator generator60 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean61 = generator60.getUseCache();
        java.lang.ClassLoader classLoader62 = null;
        generator60.setClassLoader(classLoader62);
        boolean boolean64 = generator60.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = null;
        generator60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Mixin.Generator generator67 = new org.mockito.cglib.proxy.Mixin.Generator();
        boolean boolean68 = generator67.getUseCache();
        generator67.setUseCache(true);
        boolean boolean71 = generator67.getUseCache();
        generator67.setUseCache(true);
        java.lang.Object[] objArray76 = new java.lang.Object[] { generator60, true, (byte) -1, 100.0f };
        org.mockito.cglib.proxy.Mixin mixin77 = org.mockito.cglib.proxy.Mixin.create(objArray76);
        java.lang.Class[] classArray78 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        java.lang.Class[] classArray79 = org.mockito.cglib.proxy.Mixin.getClasses(objArray76);
        generator0.setClasses(classArray79);
        java.lang.Class[] classArray81 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        java.lang.Class[] classArray82 = org.mockito.cglib.proxy.Mixin.getClasses((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin83 = org.mockito.cglib.proxy.Mixin.createBean((java.lang.Object[]) classArray79);
        org.mockito.cglib.proxy.Mixin mixin84 = org.mockito.cglib.proxy.Mixin.create((java.lang.Object[]) classArray79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[10]");
        org.junit.Assert.assertNotNull(mixin12);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(mixin23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[10]");
        org.junit.Assert.assertNotNull(mixin35);
        org.junit.Assert.assertNotNull(mixin36);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(mixin38);
        org.junit.Assert.assertNotNull(mixin39);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[10, a, -1, 10.0, 100, a]");
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(mixin49);
        org.junit.Assert.assertNotNull(mixin50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(mixin77);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(mixin83);
        org.junit.Assert.assertNotNull(mixin84);
    }
}

